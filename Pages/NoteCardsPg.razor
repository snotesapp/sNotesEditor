@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using BlazorApp1.Pages.Components
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM
@inject IMessageService MessageService


@using BlazorApp1.ViewModels;
@using BlazorBootstrap;
@using Microsoft.JSInterop
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@inject IJSRuntime JSRuntime



@if (dataSvs.SelectedNoteCard != null)
{

    <MCol>
        <MRow>

            <MCard Elevation="3" class=" m-1 p-0 gradient-coral shownavbtns"
               Width="@(dataSvs.SelectedNoteCard.Note.MainImgWidth )" Height="@(dataSvs.SelectedNoteCard.Note.MainImgHeight )"
               
               >

                @if (dataSvs.SelectedNoteCard.Note != null)
                {
                    <div class="position-absolute @((navbuttonsEnabled) ? "shownavbtns" : "navbuttons")
                    @(upAnimation ? "slide-animation-up" : "")
                    @(downAnimation ? "slide-animation-down" : "")
                    @(leftAnimation ? "slide-animation-left" : "")
                    @(rightAnimation ? "slide-animation-right" : "")"
                         style=";
                            width: @(dataSvs.SelectedNoteCard.Note.MainImgWidth)px;
                            height:@(dataSvs.SelectedNoteCard.Note.MainImgHeight)px;
                            background-color:@dataSvs.SelectedNoteCard.Note.BackgroundColor">

                        <NoteCardsTemplate Items="dataSvs.SelectedNoteCard.Note.Images">
                            <ImgTemplate Context="ncimg">
                                <span class="position-relative" style="left:@(@ncimg.X)px;top:@(@ncimg.Y)px">


                                    <img id="ncimage_@ncimg.NoteImageID" draggable="true"
                                         style="border:4px none #1565c0;border-radius:6px"
                                         width="@ncimg.Width" height="@ncimg.Height"
                                         class="rounded mx-auto d-block position-absolute  "
                                         src="@ncimg.Location" alt="zoom image">

                                </span>

                            </ImgTemplate>

                        </NoteCardsTemplate>
                        @if (dataSvs.SelectedNoteCard.Note is not null)
                        {
                            <div style="pointer-events:@(PointerEvent); width: @(dataSvs.SelectedNoteCard.Note.MainImgWidth)px;
                                    height:@(dataSvs.SelectedNoteCard.Note.MainImgHeight)px; ">
                                <SKCanvasView @ref="skiaView" OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true"
                                              style="position: absolute;
                top: 0;background-color:transparent;
                left: 0; width:inherit;height:inherit;
                pointer-events:inherit">

                                </SKCanvasView>
                            </div>


                            <div class="mb-3">

                                <MExpansionPanels Class="elevation-6" Style="width:50%;position:absolute;bottom:10px;left:25%;background-color:white">
                                    <MExpansionPanel>
                                        <MExpansionPanelHeader>
                                            Summary
                                        </MExpansionPanelHeader>
                                        <MExpansionPanelContent Class="font-class">
                                            @(dataSvs.SelectedNoteCard.Note.Text)
                                        </MExpansionPanelContent>
                                    </MExpansionPanel>

                                </MExpansionPanels>


                            </div>
                        }

                    </div>

                }

            </MCard>

            @if (dataSvs.SelectedCard is not null && dataSvs.SelectedCard.NotePackets is not null)
            {
                <div class="position-absolute navbuttons ms-3 top-50 start-0 translate-middle-y">


                    <div class="row" style="width:96px;">
                        <div class="col-4 offset-4 p-0">


                            <button class="d-flex justify-content-center align-items-center  elevation-3 rounded-3 sn-tooltip
                            @((dataSvs.SelectedCard.Parent is not null) ? "npnavbutton" : "btn btn-secondary disabled npnavbutton-disabled")
							"
                                    type="button" @onpointerdown="ResetAnimation" @onclick="@(()=>SelectSubPacket(dataSvs.SelectedCard.Parent,true))">
                                <i class="mdi mdi-chevron-up mdi-24px " style="color:#f5f5f5"></i>
                                @if (dataSvs.SelectedCard.Parent is not null)
                                {
                                    <span class="px-2 truncate-text tooltiptext">@dataSvs.SelectedCard.Parent.Title </span>
                                }

                            </button>

                        </div>
                    </div>

                    <div class="row " style="width:96px;">
                        <div class="col-4 p-0">
                            <button class=" d-flex justify-content-center align-items-center  elevation-3 rounded-3
                                 @(!dataSvs.SelectedCard.NotePackets.Any() || !dataSvs.SelectedCard.NotePackets.First().Equals(dataSvs.SelectedNoteCard) ? "npnavbutton" : "btn btn-secondary disabled npnavbutton-disabled")
                                " type="button" @onpointerdown="ResetAnimation" @onclick="PrecedingNC">
                                <i class="mdi mdi-chevron-left mdi-24px " style="color:#f5f5f5"></i>
                            </button>

                        </div>



                        <div class="col-4 offset-4 p-0">
                            <button class=" d-flex justify-content-center align-items-center  elevation-3 rounded-3
                              @(!dataSvs.SelectedCard.NotePackets.Any() || !dataSvs.SelectedCard.NotePackets.Last().Equals(dataSvs.SelectedNoteCard) ? "npnavbutton" : "btn btn-secondary disabled npnavbutton-disabled")"
                                    type="button" @onpointerdown="ResetAnimation" @onclick="NextNC">
                                <i class="mdi mdi-chevron-right mdi-24px " style="color:#f5f5f5"></i>
                            </button>

                        </div>
                    </div>

                    <div class="row " style="width:96px;">

                        <div class="col-4 offset-4 p-0">

                           
                            <button class=" d-flex justify-content-center align-items-center npnavbutton elevation-3 rounded-3
                                 @((dataSvs.ChildCards is not null && dataSvs.ChildCards.Count > 0) ? "npnavbutton" : "btn btn-secondary disabled npnavbutton-disabled") "
                                    type="button" @onclick="ToggleContentAsync">
                                <i class="mdi mdi-chevron-down mdi-24px " style="color:#f5f5f5"></i>
                            </button>

                            <Collapse @ref="collapse1" Style="background-color:transparent;width:200px;max-height:30vh;overflow:auto">
                                <ListTemplate Items="dataSvs.ChildCards">
                                    <RowTemplate Context="card">
                                        <MListItem Class="dropdown-item elevation-4 rounded-3" Link
                                                               style="background-color:#1565c0; margin-bottom:2px"
                                           Color="white" @onpointerdown="ResetAnimation" OnClick="()=>SelectSubPacket(card,false)">
                                        <MListItemContent>
                                        <MListItemTitle Class="truncate-text">@card.Title </MListItemTitle>

                                        </MListItemContent>
                                        </MListItem>

                                    </RowTemplate>

                                    </ListTemplate>

                            </Collapse>


                            </div>

                        </div>


                    </div>

            }

        </MRow>
    </MCol>
}
else
{

    <div class="position-relative nullnotecardpg ">
        <MButton Class="primary position-absolute top-50 start-50 translate-middle"
             OnClick='() => dataSvs.SwitchMenus("collection")'>
            <MIcon Left>mdi-arrow-left</MIcon>
        Add Notes
    </MButton>
</div>

}





@code {

    IJSObjectReference _module;

    string PointerEvent = "none";
    SKCanvasView skiaView = new SKCanvasView();

    private bool leftAnimation, rightAnimation, upAnimation, downAnimation = false;
    private bool navbuttonsEnabled = true;

    [CascadingParameter]
    public Error? Error { get; set; }

    Collapse? collapse1 = default!;


    protected override void OnInitialized()
    {
        MessageService.OnMessage += MessageHandler;
        dataSvs.OnChange += StateHasChanged;


        StateHasChanged();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (dataSvs.SelectedNoteCard != null)
        {
            skiaView.Invalidate();

        }


    }

    #region Drawing
    SKPoint? touchLocation;
    SKBitmap? saveBitmap;

    SKPaint paint = new SKPaint
        {
            Style = SKPaintStyle.Stroke,
            IsAntialias = true,
            StrokeCap = SKStrokeCap.Round,
            StrokeJoin = SKStrokeJoin.Round,
            FilterQuality = SKFilterQuality.High,
            BlendMode = SKBlendMode.SrcOver,
            PathEffect = SKPathEffect.CreateCorner(45)



        };

    void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {

        SKImageInfo info = args.Info;
        SKSurface surface = args.Surface;
        SKCanvas canvas = args.Surface.Canvas;

        try
        {
            canvas.Clear();

            foreach (NotePath notePath in dataSvs.SelectedNoteCard.Note.NotePaths)
            {

                paint.BlendMode = Enum.Parse<SKBlendMode>(notePath.StrokeBlendMode);
                paint.Color = SKColor.Parse(notePath.StrokeColor);
                paint.StrokeWidth = notePath.StrokeWidth;
                canvas.DrawPath(SKPath.ParseSvgPathData(notePath.SvgPath), paint);

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error Here");

        }

    }

    #endregion

    #region navigation buttons
    private void NextNC()
    {
        leftAnimation = true;
        dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.SkipWhile(x => x != dataSvs.SelectedNoteCard).Skip(1).First();


    }
    private void PrecedingNC()
    {

        int index = dataSvs.SelectedCard.NotePackets.IndexOf(dataSvs.SelectedNoteCard);
        if (index > 0)
        {
            rightAnimation = true;
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.ElementAt(index - 1);

        }

    }
    private void ResetAnimation()
    {
        rightAnimation = false;
        leftAnimation = false;
        upAnimation = false;
        downAnimation = false;
    }

    private async Task SelectSubPacket(Packet subPacket, bool Up)
    {
        try
        {
            if (dataSvs.ncDragingMode)
            {
                dataSvs.ncDragingMode = false;
            }

            await PacketVM.GetPacket(subPacket);
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();
            if (Up)
            {


                upAnimation = true;
            }
            else
            {
                downAnimation = true;
            }

        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }


    }

    private async Task ToggleContentAsync() => await collapse1.ToggleAsync();
    #endregion

    private void MessageHandler()
    {

        StateHasChanged();
    }

    public void Dispose()
    {

        MessageService.OnMessage -= MessageHandler;
        dataSvs.OnChange -= StateHasChanged;
        if (skiaView != null)
        {
            skiaView.Dispose();

        }


    }

}
