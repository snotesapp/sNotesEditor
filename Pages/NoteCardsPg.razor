@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using BlazorApp1.Pages.Components
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM
@inject IMessageService MessageService

@using BlazorApp1.ViewModels;
@using BlazorBootstrap;
@using Microsoft.JSInterop
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@inject IJSRuntime JSRuntime




@if (dataSvs.SelectedNoteCard != null)
{

    <MCol>
        <MRow Style="overflow-x:auto">

            <MCard Elevation="3" class=" m-1 p-0 gradient-coral shownavbtns"
               Width="@(dataSvs.SelectedNoteCard.Note.MainImgWidth )" Height="@(dataSvs.SelectedNoteCard.Note.MainImgHeight )"
               
               >

                @if (dataSvs.SelectedNoteCard.Note != null)
                {
                    <div class="position-absolute @((navbuttonsEnabled) ? "shownavbtns" : "navbuttons")
                    @(PacketVM.upAnimation ? "slide-animation-up" : "")
                    @(PacketVM.downAnimation ? "slide-animation-down" : "")
                    @(PacketVM.leftAnimation ? "slide-animation-left" : "")
                    @(PacketVM.rightAnimation ? "slide-animation-right" : "")"
                         style=";
                            width: @(dataSvs.SelectedNoteCard.Note.MainImgWidth)px;
                            height:@(dataSvs.SelectedNoteCard.Note.MainImgHeight)px;
                            background-color:@dataSvs.SelectedNoteCard.Note.BackgroundColor">

                        <NoteCardsTemplate Items="dataSvs.SelectedNoteCard.Note.Images">
                            <ImgTemplate Context="ncimg">
                                <span class="position-relative" style="left:@(@ncimg.X)px;top:@(@ncimg.Y)px">


                                    <img id="ncimage_@ncimg.NoteImageID" draggable="true"
                                         style="border:4px none #1565c0;border-radius:6px"
                                         width="@ncimg.Width" height="@ncimg.Height"
                                         class="rounded mx-auto d-block position-absolute  "
                                         src="@ncimg.Location" alt="zoom image">

                                </span>

                            </ImgTemplate>

                        </NoteCardsTemplate>
                        @if (dataSvs.SelectedNoteCard.Note is not null)
                        {
                            <div style="pointer-events:@(PointerEvent); width: @(dataSvs.SelectedNoteCard.Note.MainImgWidth)px;
                                    height:@(dataSvs.SelectedNoteCard.Note.MainImgHeight)px; ">
                                <SKCanvasView @ref="skiaView" OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true"
                                              style="position: absolute;
                top: 0;background-color:transparent;
                left: 0; width:inherit;height:inherit;
                pointer-events:inherit">

                                </SKCanvasView>
                            </div>


                            <div class="mb-3">

                                <MExpansionPanels Class="elevation-6" Style="width:50%;position:absolute;bottom:10px;left:25%;background-color:white">
                                    <MExpansionPanel>
                                        <MExpansionPanelHeader>
                                            Summary
                                        </MExpansionPanelHeader>
                                        <MExpansionPanelContent Class="lh-sm text-body font-class" Style="overflow: auto; text-overflow: ellipsis;white-space:pre-wrap; max-height:100px;">
                                            @(dataSvs.SelectedNoteCard.Note.Text)
                                        </MExpansionPanelContent>
                                    </MExpansionPanel>

                                </MExpansionPanels>


                            </div>
                        }

                    </div>

                }

            </MCard>

            @if (dataSvs.SelectedCard is not null && dataSvs.SelectedCard.NotePackets is not null)
            {
                

              <div class="position-absolute navbuttons ms-3 top-50 start-0 translate-middle-y">

                 <NavButtons EmptyNCPage = "false" />
                </div>

            }

           

        </MRow>
    </MCol>
}
else
{

    <div class="container sn-container">
        
        @if (dataSvs.SelectedCard is not null && dataSvs.SelectedCard.NotePackets is not null)
        {
            <div class="position-absolute ms-3 top-50 start-0 translate-middle-y">


                <NavButtons EmptyNCPage = "true" />


            </div>


        }
        


        <div class="sn-addnotebutton ">
            <MButton Class="primary "
                     OnClick='() => dataSvs.SwitchMenus("collection")'>
                <MIcon Left>mdi-arrow-left</MIcon>
                    Add Notes
            </MButton>


        </div>

    </div>

   
  
       

}

@if(PacketVM.ShowMoveDownPacketModal == true){


     <SNmodal Width="500" Height="250" IsOpen="@PacketVM.ShowMoveDownPacketModal">
            <MCard>
                <MCardTitle Class="p-2 gradient-blue ">
                       <div class="input-group shadow">
                            <input type="text" class="form-control" placeholder="Add Sub Packet" @bind-value="packetTitle" @onkeypress="((eventArg) => AddSubPacket(eventArg)) " aria-describedby="addpktbtnGroup">
                            <button class="btn btn-primary" id="addpktbtnGroup" @onclick="AddSubPacket">
                                Add
                            </button>
                        </div>
                    
                </MCardTitle>

                <MList MaxHeight="250" Class="mx-1" Style="overflow:auto">

                    <ListTemplate Items="dataSvs.CurrentPacketsSet">
                        <RowTemplate Context="packet">

                       
                            <MListItem Link style="background-color:#1565c0"
                            OnClick="@(() => {MoveDownNotePacketN(packet).GetAwaiter().GetResult(); PacketVM.ShowMoveDownPacketModal =false; })"
                                   Color="white" Class="m-1 elevation-4 rounded-3 truncate-text">
                            <MListItemContent>
                                <MListItemTitle>@packet.Title </MListItemTitle>
                            </MListItemContent>
                        </MListItem>
                        
                        </RowTemplate>

                    </ListTemplate>

                </MList>

                <MDivider Class="my-1"></MDivider>

                <MCardActions>

                    <MSpacer></MSpacer>
                    <MButton Color="primary"
                     Text
                     OnClick="() =>{ PacketVM.ShowMoveDownPacketModal = false; }">
                        Close
                    </MButton>
                </MCardActions>
            </MCard>


        </SNmodal>
}





@code {

    IJSObjectReference _module;

    string PointerEvent = "none";
    SKCanvasView skiaView = new SKCanvasView();
    private bool navbuttonsEnabled = true;

    [CascadingParameter]
    public Error? Error { get; set; }

     private string packetTitle { get; set; }

    protected override void OnInitialized()
    {
        MessageService.OnMessage += MessageHandler;
        dataSvs.OnChange += StateHasChanged;


        StateHasChanged();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (dataSvs.SelectedNoteCard != null)
        {
            skiaView.Invalidate();

        }


    }

    #region Drawing
    SKPoint? touchLocation;
    SKBitmap? saveBitmap;

    SKPaint paint = new SKPaint
        {
            Style = SKPaintStyle.Stroke,
            IsAntialias = true,
            StrokeCap = SKStrokeCap.Round,
            StrokeJoin = SKStrokeJoin.Round,
            FilterQuality = SKFilterQuality.High,
            BlendMode = SKBlendMode.SrcOver,
            PathEffect = SKPathEffect.CreateCorner(45)



        };

    void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {

        SKImageInfo info = args.Info;
        SKSurface surface = args.Surface;
        SKCanvas canvas = args.Surface.Canvas;

        try
        {
            canvas.Clear();

            foreach (NotePath notePath in dataSvs.SelectedNoteCard.Note.NotePaths)
            {

                paint.BlendMode = Enum.Parse<SKBlendMode>(notePath.StrokeBlendMode);
                paint.Color = SKColor.Parse(notePath.StrokeColor);
                paint.StrokeWidth = notePath.StrokeWidth;
                canvas.DrawPath(SKPath.ParseSvgPathData(notePath.SvgPath), paint);

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error Here");

        }

    }

    #endregion


#region MoveDown Note
 private async Task AddSubPacket()
    {
        if (!string.IsNullOrWhiteSpace(packetTitle))
        {
            Packet newPacket = new Packet { Title = packetTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID };
            await PacketVM.AddPacket(newPacket);
            await PacketVM.SetParentPacket(dataSvs.SelectedCard, newPacket);
            dataSvs.CurrentPacketsSet.Add(newPacket);
           
            packetTitle = "";
        }

    }

    private async Task AddSubPacket(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {
            await Task.Delay(100);
            if (!string.IsNullOrWhiteSpace(packetTitle))
            {

                Packet newPacket = new Packet { Title = packetTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID };
                await PacketVM.AddPacket(newPacket);
                await PacketVM.SetParentPacket(dataSvs.SelectedCard, newPacket);
                dataSvs.CurrentPacketsSet.Add(newPacket);
           
                packetTitle = "";


            }
        }

    }

    public async Task MoveDownNotePacketN (Packet packet)
    {
    
        await dataSvs.NewNoteCard(packet, PacketVM.NotePacketToDel.Note );

        await PacketVM.DeleteNotePacket(PacketVM.NotePacketToDel);

    }



#endregion


    private void MessageHandler()
    {

        StateHasChanged();
    }

    public void Dispose()
    {

        MessageService.OnMessage -= MessageHandler;
        dataSvs.OnChange -= StateHasChanged;
        if (skiaView != null)
        {
            skiaView.Dispose();

        }


    }

}
