
@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using System.IO.Compression
@using System.Text.Json
@using Blazored.LocalStorage
@using Blazored.SessionStorage

@inject SharedDataService dataSvs

@inject NavigationManager navigation

@inject ILocalStorageService localstorage1
@inject ISessionStorageService sessionStorage


@switch (CurrentStep)
{

    case "Project":

        <MCard Class="p-1" >
            <MCardTitle Class="text-h5 grey lighten-2">
                Create Project
            </MCardTitle>

            <MIcon Large>
                mdi-plus
            </MIcon>
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">New Project</span>
                <input type="text" class="form-control" placeholder="Project Name" @bind-value="projectname" aria-label="ProjectName">
                <button class="btn btn-outline-primary " @onclick=CreateProject>
                    <span class="bi bi-play-fill"></span>
                </button>
            </div>
            <MDivider/>
            <MIcon Large>
                mdi-file-upload-outline

            </MIcon>
            <div class="input-group mb-3">

                <InputFile class="form-control" OnChange="LoadFiles" id="inputGroupFile02" />


            </div>


        </MCard>

           

        break;

    case "Progress":
        <div class="col-md-12" style="background-color:whitesmoke">

            <MProgressLinear Value="@progress" Height="25"  Class="text-white" Color="#1565c0" BackgroundColor="#5e92f3" OnChange="SetProgres">
                <strong>@($"{context}%")</strong>
            </MProgressLinear>
          
           
        </div>
        break;

  
}


@code {

    private string CurrentStep { get; set; } = "Project";
   

    private string projectname { get; set; } = $"Project {DateTime.Now.ToString("dd'_'MM'_'yyyy'_'HH'_'mm")}";
    private string collectionname { get; set; } = "Default Collection";

    double progress;

    [Parameter]
    public EventCallback<bool> CloseDialoge { get; set; }



    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        CurrentStep = "Progress";
        if (dataSvs.ProjectPath is null || dataSvs.ProjectPath.Exists == false)
        {
            dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        }


        IBrowserFile uploadedfile = e.File;

        await using FileStream fileContent = new(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", FileMode.Create);
        await uploadedfile.OpenReadStream(uploadedfile.Size).CopyToAsync(fileContent);

        await SetProgres(20);

        ZipFile.ExtractToDirectory(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", AppDomain.CurrentDomain.BaseDirectory + "project");
        await Task.Delay(20);
        await SetProgres(40);

        //  var listfiles = Directory.GetFiles( AppDomain.CurrentDomain.BaseDirectory );
        //  var listdirs = Directory.GetDirectories(AppDomain.CurrentDomain.BaseDirectory+"project");

        var jsonProjectFile = dataSvs.ProjectPath.Parent.FullName + "/jsonFile.json";

        using (FileStream openStreamPrj = File.OpenRead(jsonProjectFile))
        {
            Project? newProject =
              await JsonSerializer.DeserializeAsync<Project>(openStreamPrj);
            dataSvs.MainProject = newProject;
        }
        await SetProgres(50);

        await dataSvs.InsertProject(dataSvs.MainProject);
        await Task.Delay(300);
        await SetProgres(70);

        var jsonNoteCardsFile = dataSvs.ProjectPath.Parent.FullName + "/notecards.json";

        using (FileStream openStreamNC = File.OpenRead(jsonNoteCardsFile))
        {
            List<NoteCard>? noteCardsList =
              await JsonSerializer.DeserializeAsync<List<NoteCard>>(openStreamNC);
            await dataSvs.NewRangNoteCards(noteCardsList);
        }
        await SetProgres(80);

        await dataSvs.GetNotes();
        await Task.Delay(20);
        await SetProgres(100);
       
        await CloseDialoge.InvokeAsync(false);

    }



    void SetStep(string step)
    {
        CurrentStep = step;
    }

    private async Task SetProgres(double progressValue)
    {

        progress = progressValue;
        await Task.Delay(2000);
        StateHasChanged();
        //dialogService.Refresh();

    }

    private async Task CreateProject()
    {
        dataSvs.MainProject.Name = projectname;

        dataSvs.MainProject.NotesCollection.Add(new NotesCollection()
            {
                Title = collectionname,
                Selected = true,
                Note = new List<Note>()
            });
        dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        await dataSvs.InsertProject(dataSvs.MainProject);

       
        
        await CloseDialoge.InvokeAsync(false);
    }


   
}
