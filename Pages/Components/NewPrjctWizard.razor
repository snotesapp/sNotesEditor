
@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using System.IO.Compression
@using System.Text.Json
@using Blazored.LocalStorage
@using Blazored.SessionStorage

@inject SharedDataService dataSvs

@inject NavigationManager navigation

@inject ILocalStorageService localstorage1
@inject ISessionStorageService sessionStorage


@switch (CurrentStep)
{
    case "Storage":

        <div class="hstack gap-3 my-3 justify-content-evenly">

            <MButton title="Local" Height="60" Width="200" Style="background-image:url(./images/download_icon.png);background-size:contain;background-position: center center" OnClick="@(() => SetStep("Project"))">

            </MButton>

            <MButton title="gDrive" Height="60" Width="200" Style="background-image:url(./images/gDrive_icon.png);background-size:contain;background-position: center center;" OnClick="AuthenticateGDriveUser">

            </MButton>

        </div>

        break;
    case "Project":

        <div class="container">

            <MIcon Large>
                mdi-plus
            </MIcon>
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">New Project</span>
                <input type="text" class="form-control" placeholder="Project Name" @bind-value="projectname" aria-label="ProjectName">
                <button class="btn btn-primary " @onclick=CreateProject>
                    <span class="bi bi-play-fill"></span>
                </button>
            </div>

            <MIcon Large>
                mdi-file-upload-outline

            </MIcon>
            <div class="input-group mb-3">

                <InputFile class="form-control" OnChange="LoadFiles" id="inputGroupFile02" />


            </div>

        </div>

        break;

    case "Progress":
        <div class="col-md-12">

            <MProgressLinear Value="@progress" Height="25" OnChange="SetProgres">
                <strong>@($"{context}%")</strong>
            </MProgressLinear>
            <!--
                 <RadzenProgressBar @bind-Value="@progress" />
            -->
           
        </div>
        break;

    case "New Project":

        <form>
            <div class="mb-3">
                <label for="recipient-name" class="col-form-label">Enter Project Name</label>
                <input type="text" class="form-control" id="recipient-name" @bind-value="projectname">
            </div>


            <div class="mb-3">
                <label for="recipient-name" class="col-form-label">Enter Collection Name</label>
                <input type="text" class="form-control" id="recipient-name" @bind-value="collectionname">
            </div>

            <button class="btn btn-primary btn-lg" @onclick=CreateProject>Create Project </button>

        </form>

        break;

}


@code {

    private string CurrentStep { get; set; } = "Storage";
    [Parameter] public string FileID { get; set; }

    private string projectname { get; set; } = $"Project {DateTime.Now.ToString("dd'_'MM'_'yyyy'_'HH'_'mm")}";
    private string collectionname { get; set; } = "Default Collection";

    double progress;

    [Parameter]
    public EventCallback<bool> CloseDialoge { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string authValue = await sessionStorage.GetItemAsync<string>("auth");
        if (authValue == "authenticating")
        {
            CurrentStep = "Project";
            dataSvs.storageType = "gdrive";
            // await sessionStorage.SetItemAsync("storage", "gdrive");

        }

    }

    

    protected override async Task OnParametersSetAsync()
    {


        if (FileID is not null)
        {
            CurrentStep = "Progress";

            progress = 10;
           
            string apiKey = "AIzaSyBl_QdS1lMUgHW2BY6blYTJWejuMeMjnMM";
            #region Download file from GDrive as bitArray
            HttpClient httpClient = new HttpClient()
                {
                    BaseAddress = new Uri("https://www.googleapis.com/drive/v3/files/")
                };

            byte[] downloadFile = await httpClient.GetByteArrayAsync($"{FileID}?key={apiKey}&alt=media");


            progress = 40;

            try
            {
                if (dataSvs.ProjectPath is null || dataSvs.ProjectPath.Exists == false )
                {
                    dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
                }
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }
    
            //var listdirect = Directory.GetDirectories(AppDomain.CurrentDomain.BaseDirectory);
           

            progress = 50;
            try
            {
                File.WriteAllBytes(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", downloadFile);
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }
            
            //await File.WriteAllBytesAsync(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", downloadFile);

            //  var listfiles = Directory.GetFiles( AppDomain.CurrentDomain.BaseDirectory );
            //  var listdirs = Directory.GetDirectories(AppDomain.CurrentDomain.BaseDirectory+"project");

            progress = 55;

            #endregion

            try
            {
                ZipFile.ExtractToDirectory(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", AppDomain.CurrentDomain.BaseDirectory + "project");

            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }


            progress = 60;

            var jsonProjectFile = dataSvs.ProjectPath.Parent.FullName + "/jsonFile.json";
            progress = 70;

            using (FileStream openStreamPrj = File.OpenRead(jsonProjectFile))
            {
                Project? newProject =
              await JsonSerializer.DeserializeAsync<Project>(openStreamPrj);
                dataSvs.MainProject = newProject;
            }

            try
            {
                await dataSvs.InsertProject(dataSvs.MainProject);

            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }

           
           
            progress = 80;

            var jsonNoteCardsFile = dataSvs.ProjectPath.Parent.FullName + "/notecards.json";

            using (FileStream openStreamNC = File.OpenRead(jsonNoteCardsFile))
            {
                List<NoteCard>? noteCardsList =
               await JsonSerializer.DeserializeAsync<List<NoteCard>>(openStreamNC);
                await dataSvs.NewRangNoteCards(noteCardsList);
            }

             progress = 90;

            await dataSvs.GetNotes();
            
            progress = 100;

            if (dataSvs.storageType is null)
            {
                dataSvs.storageType = "local";

            }

            await CloseDialoge.InvokeAsync(false);

        }





    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        CurrentStep = "Progress";
        if (dataSvs.ProjectPath is null || dataSvs.ProjectPath.Exists == false)
        {
            dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        }


        IBrowserFile uploadedfile = e.File;

        await using FileStream fileContent = new(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", FileMode.Create);
        await uploadedfile.OpenReadStream(uploadedfile.Size).CopyToAsync(fileContent);

        await SetProgres(20);

        ZipFile.ExtractToDirectory(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", AppDomain.CurrentDomain.BaseDirectory + "project");
        await Task.Delay(20);
        await SetProgres(40);

        //  var listfiles = Directory.GetFiles( AppDomain.CurrentDomain.BaseDirectory );
        //  var listdirs = Directory.GetDirectories(AppDomain.CurrentDomain.BaseDirectory+"project");

        var jsonProjectFile = dataSvs.ProjectPath.Parent.FullName + "/jsonFile.json";

        using (FileStream openStreamPrj = File.OpenRead(jsonProjectFile))
        {
            Project? newProject =
              await JsonSerializer.DeserializeAsync<Project>(openStreamPrj);
            dataSvs.MainProject = newProject;
        }
        await SetProgres(50);

        await dataSvs.InsertProject(dataSvs.MainProject);
        await Task.Delay(300);
        await SetProgres(70);

        var jsonNoteCardsFile = dataSvs.ProjectPath.Parent.FullName + "/notecards.json";

        using (FileStream openStreamNC = File.OpenRead(jsonNoteCardsFile))
        {
            List<NoteCard>? noteCardsList =
              await JsonSerializer.DeserializeAsync<List<NoteCard>>(openStreamNC);
            await dataSvs.NewRangNoteCards(noteCardsList);
        }
        await SetProgres(80);

        await dataSvs.GetNotes();
        await Task.Delay(20);
        await SetProgres(100);
        if (dataSvs.storageType is null)
        {
            dataSvs.storageType = "local";

        }
        await CloseDialoge.InvokeAsync(false);

    }



    void SetStep(string step)
    {
        CurrentStep = step;
    }

    private async Task SetProgres(double progressValue)
    {

        progress = progressValue;
        await Task.Delay(2000);
        StateHasChanged();
        //dialogService.Refresh();

    }

    private async Task CreateProject()
    {
        dataSvs.MainProject.Name = projectname;

        dataSvs.MainProject.NotesCollection.Add(new NotesCollection()
            {
                Title = collectionname,
                Selected = true,
                Note = new List<Note>()
            });
        dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        await dataSvs.InsertProject(dataSvs.MainProject);

        if (dataSvs.storageType is null)
        {
            dataSvs.storageType = "local";

        }
        
        await CloseDialoge.InvokeAsync(false);
    }


    private async Task AuthenticateGDriveUser()
    {
        await sessionStorage.SetItemAsync("auth", "authenticating");

        navigation.NavigateTo($"authentication/login");

    }
}
