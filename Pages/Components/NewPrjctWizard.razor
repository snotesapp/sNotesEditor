
@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using System.IO.Compression
@using System.Text.Json
@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using SkiaSharp;

@inject SharedDataService dataSvs

@inject NavigationManager navigation

@inject ILocalStorageService localstorage1
@inject ISessionStorageService sessionStorage



@switch (CurrentStep)
{

    case "Project":

        <MCard Class="p-1 " >
            <MCardTitle Class="text-h5 gradient-blue">
                Create Project
            </MCardTitle>

            <MCard Flat Class="mx-3 py-4">

                <div class="input-group elevation-2 rounded-3 shadow mb-3">
                    <span class="input-group-text" id="basic-addon1">
                        <MIcon >
                            mdi-plus
                        </MIcon>
                    </span>
                    <input type="text" class="form-control" placeholder="Project Name" @bind-value="projectname" aria-label="Projec tName">
                    <MButton Class="primary" aria-label="Create SNotes Project" title="Create SNotes Project"
                     OnClick="CreateProject">
                     <MIcon>
                         mdi-play
                     </MIcon>
                    </MButton>
                   
                </div>
                <MDivider />

                <div class="input-group elevation-2 rounded-3 shadow">
                    <span class="input-group-text " id="basic-addon1">
                        <MIcon>
                            mdi-file-upload-outline
                        </MIcon>
                    </span>

                    <MFileInput TValue="IBrowserFile" OnChange="HandleOnChange"
                       PrependIcon="null"
                        Accept="application/snotes"
                        Label="Import SNotes File"></MFileInput>


                </div>


            </MCard>

            <MCardActions>

                <span class="w-100 text-dark" style="font-size:16px">
                    By using this app, you are accepting the
                    <a class="text-dark "  href="TermsAndConditions">Terms and Conditions</a> and
                    the <a class="text-dark " href="PrivacyPolicy">Privacy Policy</a>.
                      
                </span>                   
              
            </MCardActions>
        </MCard>

           

        break;

    case "Progress":
        <div class="col-md-12" style="background-color:whitesmoke">

            <MProgressLinear Value="@progress" Height="25"  Class="text-white" Color="#1565c0" BackgroundColor="#5e92f3" OnChange="SetProgres">
                <strong>@($"{context}%")</strong>
            </MProgressLinear>
          
           
        </div>
        break;

  
}


@code {

    private string CurrentStep { get; set; } = "Project";


    private string projectname { get; set; } = $"Project {DateTime.Now.ToString("dd'_'MM'_'yyyy'_'HH'_'mm")}";
    private string collectionname { get; set; } = "Default Collection";

    double progress;

    [Parameter]
    public EventCallback<bool> CloseDialoge { get; set; }


    private async Task HandleOnChange(IBrowserFile file)
    {
        CurrentStep = "Progress"; 
        if (dataSvs.ProjectPath is null || dataSvs.ProjectPath.Exists == false)
        {
            dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        }


        IBrowserFile uploadedfile = file;

        await using FileStream fileContent = new(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", FileMode.Create);
        await uploadedfile.OpenReadStream(uploadedfile.Size).CopyToAsync(fileContent);


        await SetProgres(20);
        try
        {
            await Task.Delay(200);
            ZipFile.ExtractToDirectory(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", AppDomain.CurrentDomain.BaseDirectory + "project");
        }
        catch
        {
            Console.WriteLine("Error");
        }


        await Task.Delay(20);
        await SetProgres(40);

        //  var listfiles = Directory.GetFiles( AppDomain.CurrentDomain.BaseDirectory );
        //  var listdirs = Directory.GetDirectories(AppDomain.CurrentDomain.BaseDirectory+"project");

        var jsonProjectFile = dataSvs.ProjectPath.Parent.FullName + "/jsonFile.json";

        using (FileStream openStreamPrj = File.OpenRead(jsonProjectFile))
        {
            Project? newProject =
              await JsonSerializer.DeserializeAsync<Project>(openStreamPrj);
            dataSvs.MainProject = newProject;
        }
        await SetProgres(50);

        await dataSvs.InsertProject(dataSvs.MainProject);
        await Task.Delay(300);
        await SetProgres(70);

        var jsonNoteCardsFile = dataSvs.ProjectPath.Parent.FullName + "/notecards.json";

        using (FileStream openStreamNC = File.OpenRead(jsonNoteCardsFile))
        {
            List<NotePacket>? noteCardsList =
              await JsonSerializer.DeserializeAsync<List<NotePacket>>(openStreamNC);
            await dataSvs.NewRangNoteCards(noteCardsList);
        }
        await SetProgres(80);

        await dataSvs.GetNotes();
        // await dataSvs.SetInitialeNC();

        await Task.Delay(20);

        await SetProgres(100);

        await CloseDialoge.InvokeAsync(false);
    }


        /*

    private async Task LoadFiles(InputFileChangeEventArgs e)
            {

        CurrentStep = "Progress";
        if (dataSvs.ProjectPath is null || dataSvs.ProjectPath.Exists == false)
    {
    dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        }


    IBrowserFile uploadedfile = e.File;

    await using FileStream fileContent = new(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", FileMode.Create);
    await uploadedfile.OpenReadStream(uploadedfile.Size).CopyToAsync(fileContent);

    await SetProgres(20);

    ZipFile.ExtractToDirectory(AppDomain.CurrentDomain.BaseDirectory + "Project.zip", AppDomain.CurrentDomain.BaseDirectory + "project");
    await Task.Delay(20);
    await SetProgres(40);

    //  var listfiles = Directory.GetFiles( AppDomain.CurrentDomain.BaseDirectory );
    //  var listdirs = Directory.GetDirectories(AppDomain.CurrentDomain.BaseDirectory+"project");

    var jsonProjectFile = dataSvs.ProjectPath.Parent.FullName + "/jsonFile.json";

        using (FileStream openStreamPrj = File.OpenRead(jsonProjectFile))
          {
          Project? newProject =
        await JsonSerializer.DeserializeAsync<Project>(openStreamPrj);
    dataSvs.MainProject = newProject;
    }
    await SetProgres(50);

    await dataSvs.InsertProject(dataSvs.MainProject);
    await Task.Delay(300);
    await SetProgres(70);

    var jsonNoteCardsFile = dataSvs.ProjectPath.Parent.FullName + "/notecards.json";

    using (FileStream openStreamNC = File.OpenRead(jsonNoteCardsFile))
          {
          List<NoteCard>? noteCardsList =
          await JsonSerializer.DeserializeAsync<List<NoteCard>>(openStreamNC);
        await dataSvs.NewRangNoteCards(noteCardsList);
    }
    await SetProgres(80);

    await dataSvs.GetNotes();
    await Task.Delay(20);
    await SetProgres(100);

    await CloseDialoge.InvokeAsync(false);

    }


     */

    void SetStep(string step)
    {
        CurrentStep = step;
    }

    private async Task SetProgres(double progressValue)
    {

        progress = progressValue;
        await Task.Delay(2000);
        StateHasChanged();
        //dialogService.Refresh();

    }

    private async Task CreateProject()
    {
        dataSvs.MainProject.Name = projectname;

        dataSvs.MainProject.NotesCollection.Add(new NotesCollection()
            {
                Title = collectionname,
                Selected = true,
                Note = new List<Note>()
            });
        dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        
        
        Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections/0/bitmaps");
        DirectoryInfo imagespth = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections/0/images");

        using (var bitmap = new SkiaSharp.SKBitmap(600, 400))
        {
            bitmap.Erase(SKColor.Parse("#FF7F50"));
            using (var canvas = new SkiaSharp.SKCanvas(bitmap))
            {
                var paint = new SkiaSharp.SKPaint()
                    {
                        Color = SKColors.Black,
                        TextSize = 20,
                        IsAntialias = true,
                        Typeface = SKTypeface.FromFamilyName("Arial")
                    };
                canvas.DrawText("Copyright © 2023 sNotes. All rights reserved.", 20, 100, paint);
               
            }
            using (var image = SkiaSharp.SKImage.FromBitmap(bitmap))
            using (var data = image.Encode(SkiaSharp.SKEncodedImageFormat.Jpeg, 100))
            {
                using (var stream = File.OpenWrite(imagespth.FullName + "/blanc.jpeg"))
                {
                    data.SaveTo(stream);
                }
            }
        }

        await dataSvs.InsertProject(dataSvs.MainProject);

        await CloseDialoge.InvokeAsync(false);
    }


   
}
