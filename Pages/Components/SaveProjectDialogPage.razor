@using BlazorApp1.Helpers
@inject SharedDataService dataSvs
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory ClientFactory

<MCard Class="p-1" >
    <MCardTitle Class="text-h5 grey lighten-2">
        Download Project
    </MCardTitle>


    @switch (CurrentStep)
    {

        case "Storage":
            <div class="hstack gap-3 my-3 justify-content-evenly">

                <MButton title="Download" Height="60" Width="200" Style="background-image:url(./images/download_icon.png);background-size:contain;background-position: center center" OnClick="DownloadProject">

                </MButton>

            </div>

            <MDivider></MDivider>

            <MCardActions>
                <MSpacer></MSpacer>
                <MButton Color="primary"
                 Text
                 OnClick="CloseSaveDialg">
                    Close
                </MButton>
            </MCardActions>

            break;

        case "Progress":
            <div class="col-md-12" style="background-color:whitesmoke">

                <MProgressLinear Value="@progress" Height="25" Class="text-white" Color="#1565c0" BackgroundColor="#5e92f3">
                    <strong>@($"{context}%")</strong>
                </MProgressLinear>

            </div>
            break;



    }

</MCard>



@code {

    private string CurrentStep { get; set; } = "Storage";
    
    IJSObjectReference _module;

  
    double progress;

    [Parameter]
    public EventCallback<bool> CloseDialoge { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

        }


    }


    private async Task DownloadProject()
    {
        CurrentStep = "Progress";
        SetProgres(10);


        await dataSvs.DownloadProjectFile();
        SetProgres(70);
        #region convert bitArray to zip and download it
        var fileName = $"{dataSvs.MainProject.Name} - {DateTime.Now.ToString()}.snotes";
        await _module.InvokeVoidAsync("blazorDownloadFile1", fileName, "application/zip", dataSvs.fileArray);
        SetProgres(100);
        //dialogService.Close();
        CurrentStep = "Storage";
        await CloseDialoge.InvokeAsync(false);
        #endregion
    }

    private async Task CloseSaveDialg()
    {

        await CloseDialoge.InvokeAsync(false);

    }

    private void SetProgres(double progressValue)
    {

        progress = progressValue;
        StateHasChanged();
    }

}
