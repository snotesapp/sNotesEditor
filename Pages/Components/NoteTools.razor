@using BlazorApp1.Helpers
@using SkiaSharp
@inject SharedDataService dataSvs



<div class="d-flex flex-wrap justify-content-start">


    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="() => {  dataSvs.EnableDraw() ;}">
        <span class="bi bi-pen-fill"></span>
    </button>
    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="() => {  dataSvs.EnableTransparentColor() ;}">
        <span class="bi bi-pen"></span>
    </button>

    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="dataSvs.EnableHand">
        <span class="bi bi-hand-index"></span>
    </button>

    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="() => dataSvs.ErasePaint()">
        <span class="bi bi-eraser"></span>
    </button>

    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="dataSvs.ClearCanvas">
        <span class="bi bi-x-lg"></span>
    </button>

    <div class="row w-100 m-2 toolstyle"
         style="display:inline-block;border-radius: 5px;border: 1px solid #003c8f;  ">
       <label for="stylesWidthSlider" class="mb-0 ">Thickness: @dataSvs.strokeWidth</label>
        <input type="range" class="form-range w-100 px-3 " id="stylesWidthSlider" @bind=@dataSvs.strokeWidth @bind:event="oninput" min="3" max="40"  />
         
    </div>
    <div class="row w-100 m-2 toolstyle"
         style="display:inline-block;border-radius: 5px;border: 1px solid #003c8f;  "
    >
         <label  class="form-label" for="pencolor">Pen Color:</label>
         <input type="color" style="height:20px; " id="pencolor" name="PenColor" value="@dataSvs.defaultColor" @onchange="@(chArgs => OnChangeColor(chArgs) )">

    </div>

        <div class="row w-100 m-2 toolstyle"
         style="display:inline-block;border-radius: 5px;border: 1px solid #003c8f;  "
    >
        <label for="background">Background:</label>
        <input type="color" style="height:20px;" id="background" aria-describedby="backgroundcolorgrp" name="BackgroundColor" value="@dataSvs.editNote.BackgroundColor" @onchange="@(chArgs => OnChangeBackgroundColor(chArgs) )">

    </div>


             

    <!--
        <div class="row w-100 m-2   toolstyle">
            <RadzenFieldset AllowCollapse="true" class="p-0   border-primary">
                <HeaderTemplate>
                    <span class="d-inline-flex align-items-center align-middle">
                        <RadzenIcon Icon="create" Class="mr-1" />
                        <b>Pen</b>
                    </span>
                </HeaderTemplate>
                <ChildContent>
                    <div class="row w-100  my-1 ">
                        <div class="col-md-4 p-0 align-items-center d-flex">
                            <RadzenLabel Text="Thickness" Component="StylesWidthSlider" />

                        </div>
                        <div class="col-md-8 p-0 w-100">
                            <RadzenSlider Name="StylesWidthSlider" @bind-Value=@dataSvs.strokeWidth TValue="float" Min="3" Max="40" Change=@(args => OnChangestrokeWidth(args)) Class="w-100 my-2" />

                        </div>
                    </div>

                    <div class="row w-100 mt-2">
                        <div class="col-md-4 p-0 align-items-center d-flex">
                            <RadzenLabel Text="Color:" Component="StylesColor" />
                        </div>
                        <div class="col-md-8 p-0 w-100">

    @*   <RadzenColorPicker Name="StylesColor" @bind-Value=@dataSvs.defaultColor ShowHSV=true ShowRGBA=false ShowColors=true Change=@OnChangeColor class="w-100 my-2 border-primary" />
                            <input type="color" id="pencolor" name="PenColor" @bind-value="@dataSvs.defaultColor"  @oninput="@(dataSvs.EnableDraw)"><br><br>
    *@

                            <input style="width:100%" type="color" id="pencolor" name="PenColor" value="@dataSvs.defaultColor" @onchange="@(chArgs => OnChangeColor(chArgs) )"><br><br>

                        </div>
                    </div>

                </ChildContent>


            </RadzenFieldset>
        </div>


        <div class="row w-100 m-2   toolstyle">
            <RadzenFieldset AllowCollapse="true" class="p-0   border-primary">
                <HeaderTemplate>
                    <span class="d-inline-flex align-items-center align-middle">
                        <RadzenIcon Icon="tv" Class="mr-1" />
                        <b>Background</b>
                    </span>
                </HeaderTemplate>
                <ChildContent>

                    <div class="row w-100  ">

                        <div class="input-group mb-3 " style="width:100%">
                            <span class="input-group-text" id="backgroundcolorgrp">Color:</span>
                            <input class="w-50" type="color" id="background" aria-describedby="backgroundcolorgrp" name="BackgroundColor" value="@dataSvs.editNote.BackgroundColor" @onchange="@(chArgs => OnChangeBackgroundColor(chArgs) )"><br><br>

    </div>

                    </div>

                    <div class="hstack gap-1 my-2 ">
                        <MTextField Label="Width" Placeholder="Width" Value="@(dataSvs.editNote.MainImgWidth)" @onfocusin="SetInitialValue" @onblur="SetCanvasDim"></MTextField>


                        X

                        <MTextField Label="Height" Placeholder="Height" Value="@(dataSvs.editNote.MainImgHeight)" @onfocusin="SetInitialValue" @onblur="SetCanvasDim"></MTextField>


                    </div>
                </ChildContent>

            </RadzenFieldset>


        </div>

    -->
    <!--
    <div class="row w-100 m-2   toolstyle">

        <SNExpandable Label="Pen"  >
            <ChildContent>

                <label for="stylesWidthSlider" class="form-label mb-0">Thickness: @dataSvs.strokeWidth</label>
                <input type="range" class="form-range mb-2" id="stylesWidthSlider" @bind=@dataSvs.strokeWidth @bind:event="oninput" min="3" max="40"  />

                <span style="display:inline-block;width:100%;border-radius: 5px;border: 1px solid #003c8f; padding-bottom:1px; padding-left:2px;margin-bottom:10px;">

                    <label for="pencolor">Color:</label>

                    <input type="color" style="height:20px;width:80%;position:relative;top:3px; " id="pencolor" name="PenColor" value="@dataSvs.defaultColor" @onchange="@(chArgs => OnChangeColor(chArgs) )">

                </span>


            </ChildContent>

        </SNExpandable>
    </div>


     <div class="row w-100 m-2   toolstyle">

        <SNExpandable Label="Background"  >
            <ChildContent>



                <span style="display:inline-block;width:100%;border-radius: 5px;border: 1px solid #003c8f;  padding-bottom:1px; padding-left:2px">


                    <label for="background">Color:</label>
                    <input type="color" style="height:20px;width:80%;position:relative;top:3px; " id="background" aria-describedby="backgroundcolorgrp" name="BackgroundColor" value="@dataSvs.editNote.BackgroundColor" @onchange="@(chArgs => OnChangeBackgroundColor(chArgs) )">

                </span>

                <div class="hstack gap-1 my-2 ">
                    <MTextField Label="Width" Placeholder="Width" Value="@(dataSvs.editNote.MainImgWidth)" @onfocusin="SetInitialValue" @onblur="SetCanvasDim"></MTextField>

                    &ensp;  X &ensp;

                    <MTextField Label="Height" Placeholder="Height" Value="@(dataSvs.editNote.MainImgHeight)" @onfocusin="SetInitialValue" @onblur="SetCanvasDim"></MTextField>


                </div>
            </ChildContent>

        </SNExpandable>
    </div>
    -->


</div>

@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }



    protected override void OnInitialized()
    {

        var editnt = dataSvs.editNote;
        dataSvs.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await Task.Delay(1000);
           
            StateHasChanged();
        }
    }


    private Task GoToMainMenu()
    {
        /*
         
        //Don't Update new note,update existing note.
        if (dataSvs.EditMode == true)
        {
            dataSvs.UpdateNote().GetAwaiter().GetResult();

        }
        * 
         */

        dataSvs.UpdateNote().GetAwaiter().GetResult();
        dataSvs.ClearCanvas();
        dataSvs.GetNotes().GetAwaiter().GetResult();
        return BackToMain.InvokeAsync("collection");
    }



    void OnChangestrokeWidth(dynamic value) => dataSvs.strokeWidth = value;

    void OnChangeColor(ChangeEventArgs chArgs)
    {
        dataSvs.defaultColor = chArgs?.Value?.ToString();
        dataSvs.EnableDraw();
        /*
        byte r = Byte.Parse(value.Replace("rgb", "").Replace("(", "").Replace(")", "").Split(",")[0]);
      byte g = Byte.Parse( value.Replace("rgb", "").Replace("(", "").Replace(")", "").Split(",")[1]);
      byte b = Byte.Parse( value.Replace("rgb", "").Replace("(", "").Replace(")", "").Split(",")[2]);
      dataSvs.selectedColor = new SKColor(r, g, b);
        */


        // Console.WriteLine($"Value changed to: {value.Replace("rgb", "").Replace("(","").Replace(")","").Split(",")[0]}");
    }

    void SetCanvasDim(FocusEventArgs focusEventArgs)
    {

        if (dataSvs.editNote.MainImgWidth <= dataSvs.Wdimension.Width + 1000 && dataSvs.editNote.MainImgHeight <= dataSvs.Wdimension.Height + 1000)
        {

            SKBitmap newBitmap = new SKBitmap(dataSvs.editNote.MainImgWidth, dataSvs.editNote.MainImgHeight);
            dataSvs.saveBitmap = newBitmap;
        }
        else
        {
            dataSvs.editNote.MainImgWidth = widthInitialValue;
            dataSvs.editNote.MainImgHeight = heightInitialValue;

        }
        StateHasChanged();

    }

    int widthInitialValue;
    int heightInitialValue;

    void SetInitialValue(FocusEventArgs focusEventArgs)
    {
        widthInitialValue = dataSvs.editNote.MainImgWidth;
        heightInitialValue = dataSvs.editNote.MainImgHeight;



    }


    void OnChangeBackgroundColor(ChangeEventArgs chArgs)
    {

        //Console.WriteLine($"Value changed to: {value}");
        dataSvs.SetBackgroundColor(chArgs?.Value?.ToString());
        //Console.WriteLine($"Value changed to: {value.Replace("rgb", "").Replace("(","").Replace(")","").Split(",")[0]}");
    }

    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }

}
