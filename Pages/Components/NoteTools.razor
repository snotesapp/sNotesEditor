@using BlazorApp1.Helpers
@using BlazorApp1.ViewModels;
@using SkiaSharp
@inject SharedDataService dataSvs
@inject SkiaServices skiaSvs

@inject NoteViewModel NoteVM

<div class="d-flex flex-wrap justify-content-start">


    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="() => { dataSvs.PenStyle =null; dataSvs.EnableDraw() ;}">
        <span class="bi bi-pen-fill"></span>
    </button>
    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick='() => { dataSvs.PenStyle ="transparent"; dataSvs.EnableDraw() ;}'>
        <span class="bi bi-pen"></span>
    </button>

    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="dataSvs.EnableHand">
        <span class="bi bi-hand-index"></span>
    </button>

    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="() => dataSvs.ErasePaint()">
        <span class="bi bi-eraser"></span>
    </button>

    <button type="button" class="btn btn-outline-primary flexbtn" autocomplete="off" @onclick="NoteVM.ClearCanvas">
        <span class="bi bi-x-lg"></span>
    </button>

    <div class="row w-100 m-2 toolstyle"
         style="display:inline-block;border-radius: 5px;border: 1px solid #003c8f;  ">
       <label for="stylesWidthSlider" class="mb-0 ">Thickness: @dataSvs.strokeWidth</label>
        <input type="range" class="form-range w-100 px-3 " id="stylesWidthSlider" @bind=@dataSvs.strokeWidth @bind:event="oninput" min="3" max="40"  />
         
    </div>
    <div class="row w-100 m-2 toolstyle"
         style="display:inline-block;border-radius: 5px;border: 1px solid #003c8f;  "
    >
         <label  class="form-label" for="pencolor">Pen Color:</label>
         <input type="color" style="height:20px; " id="pencolor" name="PenColor" value="@dataSvs.defaultColor" @onchange="@(chArgs => OnChangeColor(chArgs) )">

    </div>

        <div class="row w-100 m-2 toolstyle"
         style="display:inline-block;border-radius: 5px;border: 1px solid #003c8f;  "
    >
        <label for="background">Background:</label>
        <input type="color" style="height:20px;" id="background" aria-describedby="backgroundcolorgrp" name="BackgroundColor" value="@dataSvs.editNote.BackgroundColor" @onchange="@(chArgs => OnChangeBackgroundColor(chArgs) )">

    </div>


</div>

@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }



    protected override void OnInitialized()
    {

        var editnt = dataSvs.editNote;
        dataSvs.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await Task.Delay(1000);
           
            StateHasChanged();
        }
    }


    private Task GoToMainMenu()
    {
   
        NoteVM.UpdateNote().GetAwaiter().GetResult();
        dataSvs.completedPolylines.Clear();
        NoteVM.GetNotes().GetAwaiter().GetResult();
        return BackToMain.InvokeAsync("collection");
    }



    void OnChangestrokeWidth(dynamic value) => dataSvs.strokeWidth = value;

    void OnChangeColor(ChangeEventArgs chArgs)
    {
        dataSvs.defaultColor = chArgs?.Value?.ToString();

        dataSvs.EnableDraw();
    }

    void SetCanvasDim(FocusEventArgs focusEventArgs)
    {

        if (dataSvs.editNote.MainImgWidth <= dataSvs.Wdimension.Width + 1000 && dataSvs.editNote.MainImgHeight <= dataSvs.Wdimension.Height + 1000)
        {

            SKBitmap newBitmap = new SKBitmap(dataSvs.editNote.MainImgWidth, dataSvs.editNote.MainImgHeight);
            dataSvs.saveBitmap = newBitmap;
        }
        else
        {
            dataSvs.editNote.MainImgWidth = widthInitialValue;
            dataSvs.editNote.MainImgHeight = heightInitialValue;

        }
        StateHasChanged();

    }

    int widthInitialValue;
    int heightInitialValue;

    void SetInitialValue(FocusEventArgs focusEventArgs)
    {
        widthInitialValue = dataSvs.editNote.MainImgWidth;
        heightInitialValue = dataSvs.editNote.MainImgHeight;

    }


    void OnChangeBackgroundColor(ChangeEventArgs chArgs)
    {

        dataSvs.SetBackgroundColor(chArgs?.Value?.ToString());
        skiaSvs.UpdateBitmap();
    }

    public void Dispose()
    {
        dataSvs.OnChange -= StateHasChanged;
    }

}
