@using BlazorApp1.Data
@using System.Collections.ObjectModel

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs

@inject IMessageService MessageService

<MContainer Style="height:calc(100vh - 170px); overflow:auto">

    @if (NotesMenuSelected)
    {
        @if (dataSvs.ncDragingMode)
        {
            <MDragZone Group="nc_Grp" Options=SetOptions>
                <ListTemplate Items="dataSvs.SelectedCard.NoteCards">
                    <RowTemplate Context="notecard">



                        <MDragItem>


                            <MCard Class="m-1" Style="background-image: linear-gradient(to left top, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e )"
                           Dark
                           @oncontextmenu="@(args => { ShowNoteCardContextMenu(args,notecard);})" __internal_preventDefault_oncontextmenu>

                                <MImage Width="250" Height="141" Class="align-end" Src="@notecard.Note.Thumbnail">
                                    <MCardText Class="lh-sm text-body">
                                        @notecard.Note.Text
                                    </MCardText>

                                </MImage>



                            </MCard>



                        </MDragItem>


                        <!--

                             <MCard Class="m-1" Style="background-image: linear-gradient(to left top, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e )"
                                    Dark
                        @onclick="()=> SelectNoteCard(notecard)"
                        @oncontextmenu="@(args => { NoteCardContextMenuWithContent(args,notecard);})" __internal_preventDefault_oncontextmenu
                                   >

                                 <MImage Width="250" Height="141" Class="align-end" Src="@notecard.Note.Thumbnail">
                                     <MCardText Class="lh-sm text-body">
                        @notecard.Note.Text
                                     </MCardText>

                                 </MImage>



                             </MCard>
                           -->
                        <!--
                                                         <div class="card nc-style shadow m-1 "
                        @onclick="()=> SelectNoteCard(notecard)"
                        @oncontextmenu="@(args => { NoteCardContextMenuWithContent(args,notecard);})" @oncontextmenu:preventDefault="true">
                                                                       <img src="@notecard.Note.Thumbnail" class="card-img  alt="...">
                                                                       <div class="card-img-overlay px-2 pt-1 ncText-style lh-sm text-body">


                        @notecard.Note.Text



                                                                       </div>
                                                                   </div>

                           -->

                    </RowTemplate>

                </ListTemplate>
            </MDragZone>

         @if (ContextMenuNoteCard != null)
        {
           <MMenu @bind-Value="ShowNoteCardContext"
           PositionX="X"
           PositionY="Y"
           CloseOnContentClick
           Absolute
           OffsetY
           >
                <MList Dense Width="200">
                
               
                        <MListItem OnClick="() => SetDragMode()">
                            <MListItemIcon>
                                <MIcon>
                                   mdi-arrow-vertical-lock 
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Disable Sorting Mode
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>




                   

                </MList>
            </MMenu>
        }
       
        }
        else
        {


        <ListTemplate Items="dataSvs.SelectedCard.NoteCards">
                <RowTemplate Context="notecard">

                    <MCard Class="m-1" Style="background-image: linear-gradient(to left top, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e )"
                   Dark
                   @onclick="()=> SelectNoteCard(notecard)"
                   @oncontextmenu="@(args => { ShowNoteCardContextMenu(args,notecard);})" __internal_preventDefault_oncontextmenu>

                        <MImage Width="250" Height="141" Class="align-end" Src="@notecard.Note.Thumbnail">
                            <MCardText Class="lh-sm text-body">
                                @notecard.Note.Text
                            </MCardText>

                        </MImage>



                    </MCard>




                    <!--
                                                     <div class="card nc-style shadow m-1 "
                    @onclick="()=> SelectNoteCard(notecard)"
                    @oncontextmenu="@(args => { NoteCardContextMenuWithContent(args,notecard);})" @oncontextmenu:preventDefault="true">
                                                                   <img src="@notecard.Note.Thumbnail" class="card-img  alt="...">
                                                                   <div class="card-img-overlay px-2 pt-1 ncText-style lh-sm text-body">


                    @notecard.Note.Text



                                                                   </div>
                                                               </div>

                       -->

                </RowTemplate>

            </ListTemplate>
         
        @if (ContextMenuNoteCard != null)
        {
         <MMenu @bind-Value="ShowNoteCardContext"
           PositionX="X"
           PositionY="Y"
           Absolute
           OffsetY
           CloseOnContentClick
           >
                <MList Dense Width="200">
               
               
                        <MListItem OnClick="() => SetDragMode()">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-swap-vertical 
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Enable Sorting Mode
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                        <MListItem OnClick="() => DeleteNoteCard(ContextMenuNoteCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-close
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>

                                <MListItemTitle>
                                    Remove
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>




                   

                </MList>
            </MMenu>
        }
       

        }


    }
    else
    {

        <MList>




            @if (dataSvs.ChildCards.Count > 0)
            {
                <div class="p-0 ms-2 me-1 ">

                    <ListTemplate Items="dataSvs.ChildCards">
                        <RowTemplate Context="card">
                            <MListItem Link style="background-color:#1565c0; margin-bottom:2px"
                               Color="white" Class="elevation-4  rounded-3"
                               OnClick="()=>SelectChildCard(card)"
                               @oncontextmenu="@(args => {ShowCardContextMenu(args,card);})"
                               __internal_preventDefault_oncontextmenu>
                                <MListItemContent>
                                    <MListItemTitle>@card.Title </MListItemTitle>
                                   
                                </MListItemContent>
                            </MListItem>

                        </RowTemplate>

                    </ListTemplate>

                </div>
            }

        </MList>

        @if (ContextMenuCard != null)
        {
           <MMenu Value="true"
           PositionX="X"
           PositionY="Y"
           Absolute
           OffsetY
           OnOutsideClick="(() => ContextMenuCard = null)">
                <MList Dense Width="200">

                    @if (ContextMenuCard.Selected == true)
                    {
                        <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-pin-off
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>

                                <MListItemTitle>
                                    UnPin Packet
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                        <MListItem OnClick="() => RemoveSubPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-close
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Remove
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>



                    }
                    else
                    {

                        <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-pin
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>

                                <MListItemTitle>
                                    Pin Packet
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                        <MListItem OnClick="() => RemoveSubPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-close
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Remove
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                    }

                </MList>
            </MMenu>
        }
       
    }

   

</MContainer>

<div class="d-inline-flex justify-content-evenly border-top border-secondary mb-0 align-items-center" style="height:40px">

    @if(NotesMenuSelected){
        <button class="btn btn-primary p-1 shadow text-white rounded-3" style="background-color:#1565c0;height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = true)">
        Notes
    </button>
        <button class="btn btn-outline-primary shadow  p-1  rounded-3" style="height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = false)">
        Sub-Packets
    </button>
    }else{
        <button class="btn btn-outline-primary shadow-sm p-1 rounded-3" style="height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = true)">
            Notes
        </button>
        <button class="btn btn-primary shadow-sm text-white  p-1  rounded-3" style="background-color:#1565c0;height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = false)">
            Sub-Packets
        </button>
    }
   
</div>

@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }

    IJSObjectReference _module;

    private bool NotesMenuSelected = true;

    private Card? ContextMenuCard = null;
    private NoteCard? ContextMenuNoteCard = null;
    private bool ShowNoteCardContext;
    double X = 0;
    double Y = 0;


    private void ShowCardContextMenu(MouseEventArgs args, Card chCard)
    {
        ContextMenuCard = null;
        // await Task.Delay(16);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuCard = chCard;
    }

    private void ShowNoteCardContextMenu(MouseEventArgs args, NoteCard noteCard )
    {
        ShowNoteCardContext = false;
        ContextMenuNoteCard = null;
        // await Task.Delay(16);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuNoteCard = noteCard;
        ShowNoteCardContext = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");



    }

    private Task GoToMainMenu()
    {
        
        return BackToMain.InvokeAsync("cards");
    }


    protected override void OnInitialized()
    {

        dataSvs.OnChange += StateHasChanged;
    }

    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }


    private async Task DeleteNoteCard(NoteCard noteCard)
    {

        dataSvs.SelectedNoteCard = null;
        await dataSvs.RemoveNoteCard(noteCard);
        await dataSvs.GetCard(dataSvs.SelectedCard);
        StateHasChanged();

        //MessageService.SendMessage();
        //  contextMenuService.Close();
        ShowNoteCardContext = false;


    }

    private async Task SelectNoteCard(NoteCard noteCard)
    {


        dataSvs.SelectedNoteCard = noteCard;

        MessageService.SendMessage();

        StateHasChanged();

        //await BackToMain.InvokeAsync("notecards");



        /*
        if (dataSvs.ROnoteCard != null)
      {
      dataSvs.ROnoteCard.ChangeDrawing();

         }
         */


    }

    private async void DropNoteCard(SorttableEventArgs sorttableEventArgs)
    {

        NoteCard movedNoteCard = dataSvs.SelectedCard.NoteCards[sorttableEventArgs.OldIndex];

        dataSvs.SelectedCard.NoteCards.RemoveAt(sorttableEventArgs.OldIndex);
        dataSvs.SelectedCard.NoteCards.Insert(sorttableEventArgs.NewIndex, movedNoteCard);


        //Update notecards Order
        dataSvs.SelectedCard.NoteCards.Select(dx => { dx.Order = dataSvs.SelectedCard.NoteCards.IndexOf(dx); return dx; }).ToList();
        await dataSvs.UpdateCard(dataSvs.SelectedCard);

    }

    private async Task SelectChildCard(Card chCard)
    {
        await dataSvs.GetCard(chCard);

    }

    private async Task PinPacket(Card card)
    {
        if (card.Selected == true)
        {
            card.Selected = false;
        }
        else
        {
            card.Selected = true;
        }

        await dataSvs.UpdateCard(card);
        // dataSvs.MainProject = await dataSvs.GetProject();
        // contextMenuService.Close();
        ContextMenuCard = null;
    }
    private async Task RemoveSubPacket(Card card)
    {
        card.Parent = null;
        card.ParentID = null;
        card.Selected = true;
        await dataSvs.UpdateCard(card);
        await dataSvs.GetCard(dataSvs.SelectedCard);
        //contextMenuService.Close();
        ContextMenuCard = null;

    }


    private void SetDragMode()
    {
        if (dataSvs.ncDragingMode)
        {
            dataSvs.ncDragingMode = false;
        }
        else
        {
            dataSvs.ncDragingMode = true;
        }
        StateHasChanged();
        ShowNoteCardContext = false;
        //contextMenuService.Close();
    }

    private void SetOptions(SorttableOptions options)
    {
        options.OnEnd = DropNoteCard;

    }



}
