@using BlazorApp1.Data
@using System.Collections.ObjectModel

@using BlazorApp1.ViewModels;
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM

@inject IMessageService MessageService

<MContainer Style="height:calc(100vh - 170px); overflow:auto">

    @if (NotesMenuSelected)
    {
        @if (dataSvs.ncDragingMode)
        {
            <MDragZone Group="nc_Grp" Options=SetOptions>
                <ListTemplate Items="dataSvs.SelectedCard.NotePackets">
                    <RowTemplate Context="notecard">



                        <MDragItem>


                            <MCard Class="m-1" Style="background-image: linear-gradient(to left top, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e )"
                           Dark
                           @oncontextmenu="@(args => { ShowNoteCardContextMenu(args,notecard);})" __internal_preventDefault_oncontextmenu>

                                <MImage Width="250" Height="141" Class="align-end" Src="@notecard.Note.Thumbnail">
                            <MCardText Class="lh-sm text-body" Style="overflow: hidden; text-overflow: ellipsis;white-space:pre-wrap;height:70px; ">
                                        @notecard.Note.Text
                                    </MCardText>

                                </MImage>

                            </MCard>

                        </MDragItem>

                    </RowTemplate>

                </ListTemplate>
            </MDragZone>

            @if (ContextMenuNoteCard != null)
            {
                <MMenu @bind-Value="ShowNoteCardContext"
           PositionX="X"
           PositionY="Y"
           CloseOnContentClick
           Absolute
           OffsetY>
                    <MList Dense Width="200">


                        <MListItem OnClick="() => SetDragMode()">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-arrow-vertical-lock
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Disable Sorting Mode
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                    </MList>
                </MMenu>
            }

        }
        else
        {


            <ListTemplate Items="dataSvs.SelectedCard.NotePackets">
                <RowTemplate Context="notecard">

                    <MCard Class="m-1" Style="background-image: linear-gradient(to left top, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e )"
                   Dark
                   @onclick="()=> SelectNoteCard(notecard)"
                   @oncontextmenu="@(args => { ShowNoteCardContextMenu(args,notecard);})" __internal_preventDefault_oncontextmenu>

                        <MImage Width="250" Height="141" Class="align-end" Src="@notecard.Note.Thumbnail">
                    <MCardText Class="lh-sm text-body" Style="overflow: hidden; text-overflow: ellipsis;white-space:pre-wrap;max-height:70px; ">
                                @notecard.Note.Text
                            </MCardText>

                        </MImage>

                    </MCard>

                </RowTemplate>

            </ListTemplate>

            @if (ContextMenuNoteCard != null)
            {
                <MMenu @bind-Value="ShowNoteCardContext"
           PositionX="X"
           PositionY="Y"
           Absolute
           OffsetY
           CloseOnContentClick>
                    <MList Dense Width="200">


                        <MListItem OnClick="() => SetDragMode()">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-swap-vertical
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Enable Sorting Mode
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                        <MListItem OnClick="() => DeleteNoteCard(ContextMenuNoteCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-close
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>

                                <MListItemTitle>
                                    Remove
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                    </MList>
                </MMenu>
            }


        }


    }
    else
    {

        <MList>

            @if (dataSvs.CurrentPacketsSet.Count > 0)
            {
                <div class="p-0 ms-2 me-1 ">

                    <ListTemplate Items="dataSvs.CurrentPacketsSet">
                        <RowTemplate Context="card">
                            <MListItem Link style="background-color:#1565c0; margin-bottom:2px"
                               Color="white" Class="elevation-4  rounded-3"
                               OnClick="()=>SelectChildCard(card)"
                               @oncontextmenu="@(args => {ShowCardContextMenu(args,card);})"
                               __internal_preventDefault_oncontextmenu>
                                <MListItemContent>
                                    <MListItemTitle>@card.Title </MListItemTitle>
                                </MListItemContent>
                            </MListItem>

                        </RowTemplate>

                    </ListTemplate>

                </div>
            }

        </MList>

        @if (ContextMenuCard != null)
        {
            <MMenu Value="true"
           PositionX="X"
           PositionY="Y"
           Absolute
           OffsetY
           OnOutsideClick="(() => ContextMenuCard = null)">
                <MList Dense Width="200">

                    @if (ContextMenuCard.Selected == true)
                    {
                        <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-pin-off
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>

                                <MListItemTitle>
                                    UnPin Packet
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                        <MListItem OnClick="() => DetachSubPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>

                                    mdi-arrow-split-horizontal
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Detach
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>



                    }
                    else
                    {

                        <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-pin
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>

                                <MListItemTitle>
                                    Pin Packet
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                        <MListItem OnClick="() => DetachSubPacket(ContextMenuCard)">
                            <MListItemIcon>
                                <MIcon>
                                    mdi-arrow-split-horizontal
                                </MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>
                                    Detach
                                </MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                    }

                </MList>
            </MMenu>
        }

    }

</MContainer>


<div class="d-inline-flex justify-content-evenly border-top border-secondary mb-0 align-items-center" style="height:40px">

    @if (NotesMenuSelected)
    {
        <button class="btn btn-primary p-1 shadow text-white rounded-3" style="background-color:#1565c0;height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = true)">
            Notes
        </button>
        <button class="btn btn-outline-primary shadow  p-1  rounded-3" style="height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = false)">
            Sub-Packets
        </button>
    }
    else
    {
        <button class="btn btn-outline-primary shadow-sm p-1 rounded-3" style="height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = true)">
            Notes
        </button>
        <button class="btn btn-primary shadow-sm text-white  p-1  rounded-3" style="background-color:#1565c0;height:30px;width:100px" type="button" @onclick="(() => NotesMenuSelected = false)">
            Sub-Packets
        </button>
    }

</div>

@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }
    [CascadingParameter]
    public Error? Error { get; set; }

    IJSObjectReference _module;

    private bool NotesMenuSelected = false;

    private Packet? ContextMenuCard = null;
    private NotePacket? ContextMenuNoteCard = null;
    private bool ShowNoteCardContext;
    double X = 0;
    double Y = 0;


    private void ShowCardContextMenu(MouseEventArgs args, Packet chCard)
    {
        ContextMenuCard = null;
       
        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuCard = chCard;
    }

    private void ShowNoteCardContextMenu(MouseEventArgs args, NotePacket noteCard)
    {
        ShowNoteCardContext = false;
        ContextMenuNoteCard = null;
       
        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuNoteCard = noteCard;
        ShowNoteCardContext = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");


    }

    private Task GoToMainMenu()
    {

        return BackToMain.InvokeAsync("cards");
    }


    protected override void OnInitialized()
    {

        dataSvs.OnChange += StateHasChanged;
    }

    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }


    private async Task DeleteNoteCard(NotePacket noteCard)
    {
        int indx = dataSvs.SelectedCard.NotePackets.IndexOf(noteCard);

        if (indx == 0 && dataSvs.SelectedCard.NotePackets.Count > 1)
        {


            dataSvs.SelectedCard.NotePackets.Remove(noteCard);
            await dataSvs.RemoveNoteCard(noteCard);
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.First();
        }
        else if (dataSvs.SelectedCard.NotePackets.Count == 1)
        {
            dataSvs.SelectedNoteCard = null;
            await dataSvs.RemoveNoteCard(noteCard);

            await PacketVM.GetPacket(dataSvs.SelectedCard);
            dataSvs.SwitchMenus("cards");
        }
        else if (indx < dataSvs.SelectedCard.NotePackets.Count)
        {
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.ElementAtOrDefault(indx - 1);
            dataSvs.SelectedCard.NotePackets.Remove(noteCard);
            await dataSvs.RemoveNoteCard(noteCard);
        }
        else
        {
            await PacketVM.GetPacket(dataSvs.SelectedCard);
            dataSvs.SwitchMenus("cards");
        }

        ShowNoteCardContext = false;
        MessageService.SendMessage();
        StateHasChanged();

    }



    private async Task SelectNoteCard(NotePacket noteCard)
    {


        dataSvs.SelectedNoteCard = noteCard;
        MessageService.SendMessage();
        StateHasChanged();

    }

    private async void DropNoteCard(SorttableEventArgs sorttableEventArgs)
    {

        NotePacket movedNoteCard = dataSvs.SelectedCard.NotePackets[sorttableEventArgs.OldIndex];

        dataSvs.SelectedCard.NotePackets.RemoveAt(sorttableEventArgs.OldIndex);
        dataSvs.SelectedCard.NotePackets.Insert(sorttableEventArgs.NewIndex, movedNoteCard);

        //Update notecards Order
        dataSvs.SelectedCard.NotePackets.Select(dx => { dx.Order = dataSvs.SelectedCard.NotePackets.IndexOf(dx); return dx; }).ToList();
        await PacketVM.UpdatePacket(dataSvs.SelectedCard);

    }

    private async Task SelectChildCard(Packet chCard)
    {
        try
        {
            PacketVM.GetPrevOrNextPackets(chCard,false);

            await PacketVM.GetPacket(chCard);
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();
           
            MessageService.SendMessage();
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }

    }

    private async Task PinPacket(Packet packet)
    {
        if (packet.Selected == true)
        {
            packet.Selected = false;
        }
        else
        {
            packet.Selected = true;
        }

        await PacketVM.UpdatePacket(packet);

        ContextMenuCard = null;
    }
    private async Task DetachSubPacket(Packet packet)
    {
        packet.Parent = null;
        packet.ParentID = null;
        packet.Selected = true;
        await PacketVM.UpdatePacket(packet);
        await PacketVM.GetPacket(dataSvs.SelectedCard);

        ContextMenuCard = null;

    }


    private void SetDragMode()
    {
        if (dataSvs.ncDragingMode)
        {
            dataSvs.ncDragingMode = false;
        }
        else
        {
            dataSvs.ncDragingMode = true;
        }
        StateHasChanged();
        ShowNoteCardContext = false;
       
    }

    private void SetOptions(SorttableOptions options)
    {
        options.OnEnd = DropNoteCard;

    }



}
