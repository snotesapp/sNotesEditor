@using BlazorApp1.Data
@using System.Collections.ObjectModel

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs

@using BlazorComponent
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@inject IMessageService MessageService







<MContainer Style="height:calc(100vh - 130px); overflow:auto">
    

            
    <MRow Class="mx-0 w-100" >

        <MList Subheader>
           
             
            <ListTemplate Items="dataSvs.MainProject.Cards">
                <RowTemplate Context="card">

                    @if (card.Editable == false)
                    {
                        <div class="p-0 mx-1  mb-1 " @oncontextmenu:preventDefault="true"
                         @oncontextmenu="@(args => {dataSvs.SelectionCards = new(); ShowCardContextMenu(args,card);})">
                         @if(card.Parent is null){
                                <MListItem Link style="background-color:#1565c0"
                                           OnClick="() => SelectCard(card)"
                                           Color="white" Class="elevation-4  rounded-3">
                                        <MListItemContent>
                                            <MListItemTitle>@card.Title </MListItemTitle>
                                        </MListItemContent>
                               </MListItem>
                         }else{


                                <MListItem Link style="background-color:#1565c0"
                                           OnClick="() => SelectCard(card)"
                                           Color="white" Class="elevation-4  rounded-3">
                                        <MListItemContent>
                                            <MListItemTitle>@card.Title </MListItemTitle>
                                            
                                            <MListItemSubtitle   Style="color:white; text-align:end;">@card.Parent.Title</MListItemSubtitle>

                                            
                                        </MListItemContent>
                                    </MListItem>
                               
                           
                         }  

                        </div>

                    }
                    else
                    {
                        <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                           placeholder="Card Name" aria-label="Card Name"
                           aria-describedby="basic-addon2" @bind-value="card.Title" @onfocusout="() => SaveCardName(card)">

                    }


                </RowTemplate>

            </ListTemplate>



        </MList>

    </MRow>
    <!--
    <MDivider></MDivider>

    <MRow Class="mx-0  " Style="height:35vh; overflow:auto">
        <MList Class="cardsList" style="height:100%" Subheader>
        
            <MListGroup>
                <ActivatorContent>
                    <MListItemContent>
                        <MListItemTitle>Pinned Packets</MListItemTitle>
                    </MListItemContent>
                </ActivatorContent>
                <ChildContent>


                    <ListTemplate Items="dataSvs.MainProject.Cards">
                        <RowTemplate Context="card">

                            @if (card.Editable == false)
                            {
                                <div class="p-0 mx-1 mb-1 " @oncontextmenu:preventDefault="true"
                                 @oncontextmenu="@(args => {dataSvs.SelectionCards = new(); CardContextMenuWithContent(args,card);})">
                                    <MListItem Link style="background-color:#5e92f3"
                                           OnClick="() => SelectCard(card)"
                                           Color="white" Class="elevation-4  rounded-3">
                                        <MListItemContent>
                                            <MListItemTitle>@card.Title</MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>

                                </div>

                            }
                            else
                            {
                                <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                                   placeholder="Card Name" aria-label="Card Name"
                                   aria-describedby="basic-addon2" @bind-value="card.Title" @onfocusout="() => SaveCardName(card)">

                            }


                        </RowTemplate>

                    </ListTemplate>
                </ChildContent>
            </MListGroup>


        </MList>
       
    </MRow>
     -->
</MContainer>

@if(ContextMenuCard != null){
    <MMenu @bind-Value="ShowCardContext"
       PositionX="X"
       PositionY="Y"
       Absolute
       OffsetY
       CloseOnContentClick>
    <MList Dense Width="200">



       
            <MListItem OnClick="() => RenameCard(ContextMenuCard)">
            <MListItemIcon>
                <MIcon>
                    mdi-form-textbox
                </MIcon>
            </MListItemIcon>
            <MListItemContent>

                <MListItemTitle>
                    Rename
                </MListItemTitle>
            </MListItemContent>
        </MListItem>

            <MListItem OnClick="() => DeleteCard(ContextMenuCard)">
            <MListItemIcon>
                <MIcon>
                    mdi-delete-outline
                </MIcon>
            </MListItemIcon>
            <MListItemContent>
                <MListItemTitle>
                    Delete
                </MListItemTitle>
            </MListItemContent>
        </MListItem>

     
            <MDialog @bind-Value="dialog" HideOverlay
                 Width="500">
                <ActivatorContent>
                    <MListItem @attributes="@context.Attrs" OnClick="() => GetSelectionCards(ContextMenuCard)">
            <MListItemIcon>
                <MIcon>
                   mdi-subdirectory-arrow-right 
                </MIcon>
            </MListItemIcon>
            <MListItemContent>

                <MListItemTitle>
                    Move To
                </MListItemTitle>
            </MListItemContent>
        </MListItem>

                   
                </ActivatorContent>

                <ChildContent>
                    <MCard>
                        <MCardTitle Class="text-h5 gradient-blue">
                            Select Destination Packet
                        </MCardTitle>

                           <MList MaxHeight="250" Class="mx-1" Style="overflow:auto">
                            
                            <ListTemplate Items="dataSvs.SelectionCards">
                                <RowTemplate Context="card">

                                    <button type="button" class="list-group-item list-group-item-action mb-1 shadow rounded" style="background-color:#5e92f3"
                                    @onclick="@(() => {SetParentCard(card,ContextMenuCard); dialog = false;})">
                                        @card.Title
                                    </button>

                                </RowTemplate>

                            </ListTemplate>

            </MList>

                        <MDivider></MDivider>

                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="primary"
                                 Text
                                 OnClick="() => dialog = false">
                                Close
                            </MButton>
                        </MCardActions>
                    </MCard>
                </ChildContent>
            </MDialog>
    </MList>
</MMenu>

}


<!--
<div class=" row h-50 overflow-auto ps-5 pe-2">

    <MList Subheader>

        <ListTemplate Items="dataSvs.MainProject.Cards">
            <RowTemplate Context="card">

@if (card.Editable == false)
{
                    <div class="p-0 mb-1 " @oncontextmenu:preventDefault="true"
                     @oncontextmenu="@(args => {dataSvs.SelectionCards = new(); CardContextMenuWithContent(args,card);})">
                        <MListItem Link style="background-color:#5e92f3"
                               OnClick="() => SelectCard(card)"
                               Color="white" Class="elevation-4  rounded-3">
                            <MListItemContent>
                                <MListItemTitle>@card.Title</MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                    </div>

}
else
{
                    <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                       placeholder="Card Name" aria-label="Card Name"
                       aria-describedby="basic-addon2" @bind-value="card.Title" @onfocusout="() => SaveCardName(card)">

}


            </RowTemplate>

        </ListTemplate>



    </MList>


</div>
-->
<!--


<div class="row mx-0 h-50 overflow-auto" >
    <MSubheader Style="height:20px">Roote Packets</MSubheader>

    <div class="row mx-0 px-0 my-1 mb-3" style="height:30px">
    <div class="input-group d-flex ">
        <input type="text" class="form-control" placeholder="Packet Name" aria-label="Packet Name" aria-describedby="basic-addon2" @bind-value="cardTitle">

        <button class="btn btn-outline-success ms-1" type="button" onclick="@AddCard">Add</button>

    </div>

</div>

    <ul class="list-group px-1 " style="width:100%">



        <li class="input-group  d-flex my-2">

        <input type="text" class="form-control" placeholder="Packet Name" aria-label="Packet Name" aria-describedby="basic-addon2" @bind-value="cardTitle">

        <button class="btn btn-outline-success ms-1" type="button" onclick="@AddCard">Add</button>

    </li>

        <ListTemplate Items="dataSvs.MainProject.Cards">
            <RowTemplate Context="card">

@if (card.Editable == false)
{
                    <button type="button" class="list-group-item list-group-item-action mb-1  text-white shadow rounded" style="background-color:#5e92f3"
                        @onclick="() => SelectCard(card)"
                        @oncontextmenu="@(args => {dataSvs.SelectionCards = new(); CardContextMenuWithContent(args,card);})" @oncontextmenu:preventDefault="true">
    @card.Title
                    </button>
}
else
{
                    <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                       placeholder="Card Name" aria-label="Card Name"
                       aria-describedby="basic-addon2" @bind-value="card.Title" @onfocusout="() => SaveCardName(card)">

}


            </RowTemplate>

        </ListTemplate>

    </ul>

</div>
-->
<!--
<MDivider></MDivider>
<div class=" row h-25 overflow-auto ps-5 pe-1">
    <MSubheader Style="height:20px">Pinned Packets</MSubheader>

    <MList Subheader>

        <ListTemplate Items="dataSvs.MainProject.Cards">
            <RowTemplate Context="card">

@if (card.Editable == false)
{
                    <div class="p-0 mb-1 " @oncontextmenu:preventDefault="true"
                     @oncontextmenu="@(args => {dataSvs.SelectionCards = new(); CardContextMenuWithContent(args,card);})">
                        <MListItem Link style="background-color:#5e92f3"
                               OnClick="() => SelectCard(card)"
                               Color="white" Class="elevation-4  rounded-3">
                            <MListItemContent>
                                <MListItemTitle>@card.Title</MListItemTitle>
                            </MListItemContent>
                        </MListItem>

                    </div>

}
else
{
                    <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                       placeholder="Card Name" aria-label="Card Name"
                       aria-describedby="basic-addon2" @bind-value="card.Title" @onfocusout="() => SaveCardName(card)">

}


            </RowTemplate>

        </ListTemplate>

        <MListItem Link style="background-color:#5e92f3" Color="white" Class="elevation-4  rounded-3">
            <MListItemContent>
                <MListItemTitle>Single-line item</MListItemTitle>
            </MListItemContent>
        </MListItem>

        <MListItem Link Class="elevation-4 " TwoLine>
            <MListItemContent>
                <MListItemTitle>Two-line item</MListItemTitle>
                <MListItemSubtitle>Secondary text</MListItemSubtitle>
            </MListItemContent>
        </MListItem>

        <MListItem Link Class="elevation-4 " ThreeLine>
            <MListItemContent>
                <MListItemTitle>Three-line item</MListItemTitle>
                <MListItemSubtitle>
                    Secondary line text Lorem ipsum dolor sit amet,
                </MListItemSubtitle>
                <MListItemSubtitle>
                    consectetur adipiscing elit.
                </MListItemSubtitle>
            </MListItemContent>
        </MListItem>
    </MList>


</div>

-->
@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }


    private string cardTitle { get; set; }

    private bool _hover;

    IJSObjectReference _module;

    private Card? ContextMenuCard = null;
    private bool ShowCardContext;
    double X = 0;
    double Y = 0;

    bool dialog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

    }


    private Task GoToMainMenu()
    {

        return BackToMain.InvokeAsync("mainmenu");
    }


    private Task GoToNoteCardsMenu()
    {

        return BackToMain.InvokeAsync("notecards");


    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        /*
        *
        if (colPrjct.Cards == null)
        {

        colPrjct.Cards = new List<Card>();
        colPrjct.Cards.Add(new Card { Title = "Card 1", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 2", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 3", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 4", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 5", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 6", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 7", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 8", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 9", Selected = true });
        colPrjct.Cards.Add(new Card { Title = "Card 10", Selected = true });
         }

         */



    }

    protected override async Task OnInitializedAsync()
    {
        dataSvs.MainProject = await dataSvs.GetProject();
    }




    private async Task SelectCard(Card selectedCard)
    {



        await dataSvs.GetCard(selectedCard);
        if (dataSvs.SelectedCard.NoteCards.Count > 0)
        {

            //NoteCard snoteCard = await dataSvs.GetNoteCard(dataSvs.SelectedCard.NoteCards.OrderBy(no => no.NoteID).FirstOrDefault());
            // NoteCard snoteCard = dataSvs.SelectedCard.NoteCards.FirstOrDefault();
            /*
            foreach (NoteCard noteCard in dataSvs.SelectedCard.NoteCards)
                {
                foreach (NoteImage ncimg in noteCard.Note.Images)
                    {
                    string imgLoc = await StreamToObjectURL(ncimg.ImgURI);

                   ncimg.Location = imgLoc;


            }
            }
            */


            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NoteCards.FirstOrDefault();
           MessageService.SendMessage();
        }



        await BackToMain.InvokeAsync("notecards");
    }

    private void ShowCardContextMenu(MouseEventArgs args, Card card)
    {
        ShowCardContext = false;
        ContextMenuCard = null;
        // await Task.Delay(16);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuCard = card;
        ShowCardContext = true;
    }

    

    private async Task GetSelectionCards(Card chCard)
    {
        dataSvs.SelectionCards = await dataSvs.GetSelectionCards(chCard);
    }

    private async Task SetParentCard(Card parentCard, Card childCard)
    {
        childCard.ParentID = parentCard.CardID;
        childCard.Parent = null;
        childCard.Selected = false;
        await dataSvs.UpdateCard(childCard);

        dataSvs.MainProject = await dataSvs.GetProject();
       
       
    }

    #region Rename Card
    string oldname;
    void RenameCard(Card card)
    {

        dataSvs.MainProject.Cards.Select(ed => { ed.Editable = false; return ed; }).ToList();
        oldname = card.Title;

        card.Editable = true;
      
    }

    private async Task SaveCardName(Card card)
    {
        if (!string.IsNullOrWhiteSpace(card.Title))
        {
            await dataSvs.UpdateCard(card);


        }
        else
        {
            card.Title = oldname;
        }
        card.Editable = false;

    }
    #endregion

    private async Task DeleteCard(Card card)
    {

        await dataSvs.DeleteCard(card);

       
    }
}