@using BlazorApp1.Data
@using System.Collections.ObjectModel

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs

@using BlazorComponent
@using Microsoft.JSInterop
@using ReactiveUI;
@using System.Reactive.Linq;
@inject IJSRuntime JSRuntime

@inject IMessageService MessageService


<MContainer Style="height:calc(100vh - 130px); overflow:auto">

    <MRow Class="mx-0 w-100">

        <MList Subheader>

            @if (!dataSvs.filterPackets)
            {
                <ListTemplate Items="dataSvs.MainProject.Packets">
                    <RowTemplate Context="card">

                        @if (card.Editable == false)
                        {
                            @if (card.Selected)
                            {
                                <div class="p-0 mx-1  mb-1 " @oncontextmenu:preventDefault="true"
                         @oncontextmenu="@(args => {dataSvs.SelectionCards = new(); ShowCardContextMenu(args,card);})">

                                    @if (card.Parent is null)
                                    {
                                        <MListItem Link style="background-color:#1565c0"
                                   OnClick="() => SelectCard(card)"
                                   Color="white" Class="elevation-4  rounded-3">
                                            <MListItemContent>
                                                <MListItemTitle>@card.Title </MListItemTitle>
                                            </MListItemContent>
                                        </MListItem>
                                    }
                                    else

                                    {


                                        <MListItem Link style="background-color:#1565c0"
                                   OnClick="() => SelectCard(card)"
                                   Color="white" Class="elevation-4  rounded-3">
                                            <MListItemContent>
                                                <MListItemTitle>@card.Title </MListItemTitle>

                                                <MListItemSubtitle Class="ms-2" Style="color:white; text-align:end;">@card.Parent.Title</MListItemSubtitle>


                                            </MListItemContent>
                                        </MListItem>


                                    }


                                </div>

                            }

                        }
                        else
                        {
                            <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                           placeholder="Card Name" aria-label="Card Name"
                           aria-describedby="basic-addon2" @bind-value="card.Title" @onfocusout="() => SaveCardName(card)">

                        }


                    </RowTemplate>

                </ListTemplate>

            }
            else
            {
                <ListTemplate Items="dataSvs.FiltredPackets">
                    <RowTemplate Context="card">

                        @if (card.Editable == false)
                        {

                            <div class="p-0 mx-1  mb-1 " @oncontextmenu:preventDefault="true"
                         @oncontextmenu="@(args => {dataSvs.SelectionCards = new(); ShowCardContextMenu(args,card);})">

                                @if (card.Parent is null)
                                {
                                    <MListItem Link style="background-color:#1565c0"
                                        OnClick="() => SelectCard(card)"
                                        Color="white" Class="elevation-4  rounded-3">
                                        <MListItemContent>
                                            <MListItemTitle>@card.Title </MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>
                                }
                                else
                                {


                                    <MListItem Link style="background-color:#1565c0"
                                        OnClick="() => SelectCard(card)"
                                        Color="white" Class="elevation-4  rounded-3">
                                        <MListItemContent>
                                            <MListItemTitle>@card.Title </MListItemTitle>

                                            <MListItemSubtitle Style="color:white; text-align:end;">@card.Parent.Title</MListItemSubtitle>


                                        </MListItemContent>
                                    </MListItem>


                                }

                            </div>

                        }
                        else
                        {
                            <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                           placeholder="Card Name" aria-label="Card Name"
                           aria-describedby="basic-addon2" @bind-value="card.Title" @onfocusout="() => SaveCardName(card)">

                        }


                    </RowTemplate>

                </ListTemplate>

            }



        </MList>

    </MRow>

</MContainer>

@if (ContextMenuCard != null)
{
    <MMenu @bind-Value="ShowCardContext"
       PositionX="X"
       PositionY="Y"
       Absolute
       OffsetY
       CloseOnContentClick>
        <MList Dense Width="200">

            <MListItem OnClick="() => RenameCard(ContextMenuCard)">
                <MListItemIcon>
                    <MIcon>
                        mdi-form-textbox
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>

                    <MListItemTitle>
                        Rename
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            <MListItem OnClick="() =>{dataSvs.showDeletePacketConfirmation = true; dataSvs.ContextMenuCard = ContextMenuCard;}">
                <MListItemIcon>
                    <MIcon>
                        mdi-delete-outline
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        Delete
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            <MListItem OnClick="() => GetSelectionCards(ContextMenuCard)">
                <MListItemIcon>
                    <MIcon>
                        mdi-subdirectory-arrow-right
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>

                    <MListItemTitle>
                        Move To
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            @if (ContextMenuCard.Parent is not null)
            {

                @if (ContextMenuCard.Selected == true)
                {
                    <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-pin-off
                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>

                            <MListItemTitle>
                                UnPin Packet
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>

                    <MListItem OnClick="() => RemoveSubPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-arrow-split-horizontal
                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>
                            <MListItemTitle>
                                Detach
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>



                }
                else
                {

                    <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-pin
                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>

                            <MListItemTitle>
                                Pin Packet
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>

                    <MListItem OnClick="() => RemoveSubPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-arrow-split-horizontal

                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>
                            <MListItemTitle>
                                Detach
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>

                }

            }
        </MList>


    </MMenu>

}



@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }


    private string cardTitle { get; set; }
    private bool _hover;

    private bool showDeletePacketConfirmation = false;

    IJSObjectReference _module;

    private Packet? ContextMenuCard = null;
    private bool ShowCardContext;
    double X = 0;
    double Y = 0;

    //bool dialog;
    bool filterPackets;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

    }


    private Task GoToMainMenu()
    {

        return BackToMain.InvokeAsync("mainmenu");
    }


    private Task GoToNoteCardsMenu()
    {

        return BackToMain.InvokeAsync("notecards");


    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
   
        dataSvs.WhenAnyValue(x => x.FilterPacketsTxt)
      .Throttle(TimeSpan.FromSeconds(1.5))
      .Subscribe(async FilterPacketsTxt =>
      {
          if (string.IsNullOrEmpty(FilterPacketsTxt))
          {
              dataSvs.FiltredPackets.Clear();
          }
          else
          {
              dataSvs.FiltredPackets = await dataSvs.GetCards(FilterPacketsTxt);
             
          }
          StateHasChanged();
      });

    }

    protected override async Task OnInitializedAsync()
    {
        dataSvs.MainProject = await dataSvs.GetProject();
    }


    private async Task SelectCard(Packet selectedCard)
    {

        await dataSvs.GetCard(selectedCard);
        if (dataSvs.SelectedCard.NotePackets.Count > 0)
        {

            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();
            MessageService.SendMessage();
        }


        await BackToMain.InvokeAsync("notecards");
    }

    private void ShowCardContextMenu(MouseEventArgs args, Packet card)
    {
        ShowCardContext = false;
        ContextMenuCard = null;
        // await Task.Delay(16);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuCard = card;
        ShowCardContext = true;
    }

    private async Task GetSelectionCards(Packet chCard)
    {
        dataSvs.ContextMenuCard = chCard;
        dataSvs.filterPackets = false;
        dataSvs.FilterPacketsTxt = "";
        dataSvs.SelectionCards = await dataSvs.GetSelectionCards(chCard);
        dataSvs.moveto_dialog = true;

    }

    #region Rename Card
    string oldname;
    void RenameCard(Packet card)
    {

        dataSvs.MainProject.Packets.Select(ed => { ed.Editable = false; return ed; }).ToList();
        oldname = card.Title;

        card.Editable = true;

    }

    private async Task SaveCardName(Packet card)
    {
        if (!string.IsNullOrWhiteSpace(card.Title))
        {
            await dataSvs.UpdateCard(card);


        }
        else
        {
            card.Title = oldname;
        }
        card.Editable = false;

    }
    #endregion

    private async Task PinPacket(Packet card)
    {
        if (card.Selected == true)
        {
            card.Selected = false;
        }
        else
        {
            card.Selected = true;
        }

        await dataSvs.UpdateCard(card);
        
        ContextMenuCard = null;
    }
    private async Task RemoveSubPacket(Packet card)
    {
        card.Parent = null;
        card.ParentID = null;
        card.Selected = true;
        await dataSvs.UpdateCard(card);
        await dataSvs.GetCard(dataSvs.SelectedCard);

        ContextMenuCard = null;

    }


    private async Task DeleteCard(Packet card)
    {

        await dataSvs.DeleteCard(card);
        showDeletePacketConfirmation = false;

    }
}