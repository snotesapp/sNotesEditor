@using BlazorApp1.Data
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs
@inject ContextMenuService contextMenuService

<!--

<div class="container d-flex justify-content-between py-2">
    <a class="badge  text-wrap " style="width:100%;" href="">Collections</a>
    <button title="Navigation menu" class="btn btn-outline-success ms-1" @onclick="GoToMainMenu">
        <span class="bi bi-arrow-left"></span>
    </button>
</div>
-->

<MContainer Style="height:calc(100vh - 140px); overflow:auto" >
    <MRow Class="mx-0 w-100">
        <MList >
            <ListTemplate Items="dataSvs.MainProject.NotesCollection">
                <RowTemplate Context="coll">

                    <div class="mx-1 mb-1">
                        @if (coll.Editable == false)
                        {

                            @if (coll.Selected == true)
                            {
                                <MListItem Link style="background-color:#1565c0"
                                   @ondblclick="() => SetCollection(coll)"
                                   @oncontextmenu="@(args => { NCContextMenuWithContent(args,coll);})"
                                   __internal_preventDefault_oncontextmenu
                                   Color="white" Class="elevation-4  rounded-3">
                                    <MListItemContent>
                                        <MListItemTitle> @coll.Title </MListItemTitle>
                                    </MListItemContent>
                                </MListItem>
                                <!--


                                <button type="button" class="list-group-item  list-group-item-action  text-white shadow rounded" style="background-color:#5e92f3"
                                @ondblclick="() => SetCollection(coll)"
                                @oncontextmenu="@(args => { NCContextMenuWithContent(args,coll);})" @oncontextmenu:preventDefault="true">
                                @coll.Title
                                </button>
                                              -->
                            }
                            else
                            {

                                <MListItem Link style="background-color:#ffb07e" 
                                   @ondblclick="() => SetCollection(coll)"
                                   @oncontextmenu="@(args => { NCContextMenuWithContent(args,coll);})"
                                   __internal_preventDefault_oncontextmenu
                                   Color="black" Class="elevation-4  rounded-3">
                                    <MListItemContent>
                                        <MListItemTitle> @coll.Title </MListItemTitle>
                                    </MListItemContent>
                                </MListItem>

                                <!--



                                <button type="button" class="list-group-item list-group-item-action shadow rounded" style="background-color:#cbac88"
                                @ondblclick="() => SetCollection(coll)"
                                @oncontextmenu="@(args => { NCContextMenuWithContent(args,coll);})" @oncontextmenu:preventDefault="true">
                                @coll.Title
                                </button>
                                             -->
                            }
                        }
                        else
                        {

                            <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                               placeholder="Collection Name" aria-label="Collection Name"
                               aria-describedby="basic-addon2" @bind-value="coll.Title" @onfocusout="() => SaveCollectionName(coll)">


                        }

                    </div>

                </RowTemplate>

            </ListTemplate>

        </MList>

    </MRow>
</MContainer>




@code {

    IJSObjectReference module;

    [Parameter]
    public EventCallback<string> GoToMenu { get; set; }


    private string editNCTitle { get; set; }

    private Task GoToMainMenu()
    {

        return GoToMenu.InvokeAsync("mainmenu");
    }




    protected override void OnInitialized()
    {
        dataSvs.OnChange += StateHasChanged;

    }



    void NCContextMenuWithContent(MouseEventArgs args, NotesCollection notesCollection) => contextMenuService.Open(args, ds =>

    @<RadzenMenu>

        <RadzenMenuItem Text="Add Notes" Click="() => AddNCNotes(notesCollection)">  </RadzenMenuItem>

        @if (notesCollection.Selected == true)
        {
            <RadzenMenuItem Text="UnSelect" Click="() => SetCollection(notesCollection)"> </RadzenMenuItem>
        }
        else
        {
            <RadzenMenuItem Text="Select" Click="() => SetCollection(notesCollection)"> </RadzenMenuItem>
        }
        <RadzenMenuItem Text="Rename" Click="() => RenameCollection(notesCollection)">  </RadzenMenuItem>
        <RadzenMenuItem Text="Delete" Click="() => DeleteNC(notesCollection)"></RadzenMenuItem>

    </RadzenMenu>
    );


    private async Task SetCollection(NotesCollection nc)
    {
        if (nc.Selected == true)
        {
            nc.Selected = false;
            await dataSvs.UpdateNCollection(nc);
        }
        else
        {
            nc.Selected = true;
            await dataSvs.UpdateNCollection(nc);
        }
        contextMenuService.Close();
        await dataSvs.GetNotes();
    }

    private Task AddNCNotes(NotesCollection notesCollection)
    {
        dataSvs.EditMode = false;

        dataSvs.AddNotesSelectedNC = notesCollection;
        dataSvs.editNote = new Note()
            {

                Images = new List<NoteImage>(),
                NotePaths = new List<NotePath>(),

            };

        contextMenuService.Close();
        return GoToMenu.InvokeAsync("notetools");

    }
    #region Rename Collection
    string oldname;
    void RenameCollection(NotesCollection notesCollection)
    {

        dataSvs.MainProject.NotesCollection.Select(ed => { ed.Editable = false; return ed; }).ToList();
        oldname = notesCollection.Title;

        notesCollection.Editable = true;
        contextMenuService.Close();
    }

    private async Task SaveCollectionName(NotesCollection nc)
    {
        if (!string.IsNullOrWhiteSpace(nc.Title))
        {
            await dataSvs.UpdateNCollection(nc);

        }
        else
        {
            nc.Title = oldname;
        }
        nc.Editable = false;

    }
    #endregion

    private async Task DeleteNC(NotesCollection notesCollection)
    {
        await dataSvs.DeleteNCollection(notesCollection);
        dataSvs.MainProject = await dataSvs.GetProject();
        contextMenuService.Close();

    }

    public void Dispose()
    {
        dataSvs.OnChange -= StateHasChanged;
    }


}