@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using BlazorApp1.ViewModels;
@using SkiaSharp
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM
@inject ProjectViewModel ProjectVM
@inject NotesCollectionViewModel NotesCollectionVM
@inject NoteViewModel NoteVM
@inject IJSRuntime JSRuntime
@inject IMessageService MessageService
@inject SkiaServices skiaSvs


@switch (dataSvs.menustatus)
{
    case "mainmenu":



        <div class="row m-2 ">

            @if (dataSvs.UserAgent is null)
            {

                <b>

                </b>


            }
            else if (dataSvs.UserAgent.Contains("Mobile"))
            {
                <MButton Class="primary" title="Download" OnClick="() => ProjectVM.DownloadProjectFile()"
                    Loading="ProjectVM.Loader"
                    Disabled="ProjectVM.Loader"
                    Height="45">
                    <LoaderContent>
                        <span class="spinner-border spinner-border-sm"></span>
                    </LoaderContent>
                    <ChildContent>
                        <MIcon>
                            mdi-content-save-outline
                        </MIcon>

                    </ChildContent>
                </MButton>
            }
            else if (!(dataSvs.UserAgent.Contains("Firefox")) && !(dataSvs.UserAgent.Contains("Mobile")) )
            {

                <MButton Class="primary" title="Save"
                    OnClick="() =>  ProjectVM.SaveProject()"
                    Loading="ProjectVM.Loader"
                    Disabled="ProjectVM.Loader"
                    Height="45">

                    <LoaderContent>
                        <span class="spinner-border spinner-border-sm"></span>
                    </LoaderContent>
                    <ChildContent>
                        <MIcon>
                            mdi-content-save-outline
                        </MIcon>

                    </ChildContent>


                </MButton>

            }
            else
            {

                <MButton Class="primary" title="Download" OnClick="() => ProjectVM.DownloadProjectFile()"
                    Loading="ProjectVM.Loader"
                    Disabled="ProjectVM.Loader"
                    Height="45">
                    <LoaderContent>
                        <span class="spinner-border spinner-border-sm"></span>
                    </LoaderContent>
                    <ChildContent>
                        <MIcon>
                            mdi-content-save-outline
                        </MIcon>

                    </ChildContent>
                </MButton>
            }

        </div>
        <MDivider Class="mt-0"></MDivider>

        break;
    case "collection":

        <MContainer Class="py-0 mt-3" Style="height:45px">

            @if (_addItem)
            {

                <MRow Class="ps-4 pe-4">

                    <div class="input-group d-flex pe-1 " style="border:solid;border-width:thin;border-radius:3px;background-color:white">
                        <input type="text" @ref="inputTextRef"
                   @onkeypress="@((eventArg) => AddCollection(eventArg) )" @onfocusout="@(() => EnableAddItem())"
                   class="form-control border-0 shadow-none" placeholder="Collection Name" aria-label="Collection Name" aria-describedby="basic-addon2"
                   @bind-value="textValue">

                        <button class="btn btn-outline-primary btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                            <span class="bi bi-x"></span>
                        </button>

                        <button class="btn btn-outline-primary btn-sm ms-1  my-1 rounded-3" type="button" @onclick="AddCollection">
                            <span class="bi bi-plus-circle"></span>
                        </button>

                    </div>
                </MRow>
            }
            else
            {
                <MRow>

                    <div class="d-flex justify-content-between  align-items-center">

                        <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("mainmenu"))">
                            <span class="bi bi-arrow-left"></span>
                        </button>
                        <p class="text-center flex-fill my-1 text-white">
                            Collections

                        </p>

                        <MMenu OffsetY>
                            <ActivatorContent>

                                <button class="btn  btn-outline-primary me-1 my-1 "
                            type="button"
                            @attributes='@context.Attrs'>
                                    <span class="bi bi-caret-down">

                                    </span>

                                </button>
                            </ActivatorContent>

                            <ChildContent>
                                <MList Dense>

                                    <MListItem OnClick="@(() => EnableAddItem())">
                                        <MListItemIcon>
                                            <MIcon>
                                                mdi-plus
                                            </MIcon>
                                        </MListItemIcon>
                                        <MListItemContent>
                                            <MListItemTitle>
                                                Add Collections
                                            </MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>

                                    <MListItem OnClick="@(() => dataSvs.showFilterNotes = true )">
                                        <MListItemIcon>
                                            <MIcon>
                                                mdi-filter-outline
                                            </MIcon>
                                        </MListItemIcon>
                                        <MListItemContent>
                                            <MListItemTitle>
                                                Filter Notes
                                            </MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>

                                </MList>
                            </ChildContent>
                        </MMenu>



                    </div>
                </MRow>

            }

            <MDivider></MDivider>
        </MContainer>

        break;
    case "cards":

        <MContainer Class="py-0 mt-3" Style="height:45px">

            @if (_addItem)
            {

                <MRow Class="ps-4 pe-4">


                    <div class="input-group d-flex pe-1 " style="border:solid;border-width:thin;border-radius:3px;background-color:white">
                        <input type="text" @ref="inputTextRef"
                   @onkeypress="@((eventArg) => AddPacket(eventArg) )" @onfocusout="@(() => EnableAddItem())"
                   class="form-control border-0 shadow-none" placeholder="Packet Name" aria-label="Packet Name" aria-describedby="basic-addon2"
                   @bind-value="textValue">

                        <button class="btn btn-outline-primary btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                            <span class="bi bi-x"></span>
                        </button>
                        <button class="btn btn-outline-primary btn-sm ms-1  my-1 rounded-3" type="button" @onclick="AddPacket">
                            <span class="bi bi-plus-circle"></span>
                        </button>

                    </div>
                </MRow>
            }
            else if (dataSvs.filterPackets)
            {
                <MRow Class="ps-4 pe-4">

                    <div class="input-group d-flex pe-1 " style="border:solid;border-width:thin;border-radius:3px;background-color:white">
                        <input type="text" @onfocusout="@(() => EnableFilterPacket())"
                   @bind-value:event=oninput @bind-value="@dataSvs.FilterPacketsTxt"
                   class="form-control border-0 shadow-none" placeholder="Filter Packets" aria-label="Filter Packets" aria-describedby="basic-addon2">

                        <button class="btn btn-outline-primary btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                            <span class="bi bi-x"></span>
                        </button>


                    </div>
                </MRow>
            }
            else
            {
                <MRow>


                    <div class="d-flex justify-content-between  align-items-center">


                        <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("mainmenu"))">
                            <span class="bi bi-arrow-left"></span>
                        </button>
                        <p class="text-center flex-fill my-1 text-white">
                            Packets

                        </p>


                        <MMenu OffsetY>
                            <ActivatorContent>

                                <button class="btn  btn-outline-primary me-1 my-1 "
                            type="button"
                            @attributes='@context.Attrs'>
                                    <span class="bi bi-caret-down">

                                    </span>

                                </button>
                            </ActivatorContent>

                            <ChildContent>
                                <MList Dense>

                                    <MListItem OnClick="@(() => EnableAddItem())">
                                        <MListItemIcon>
                                            <MIcon>
                                                mdi-plus
                                            </MIcon>
                                        </MListItemIcon>
                                        <MListItemContent>
                                            <MListItemTitle>
                                                Add Packets
                                            </MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>

                                    <MListItem OnClick="@(() => dataSvs.filterPackets = true )">
                                        <MListItemIcon>
                                            <MIcon>
                                                mdi-filter-outline
                                            </MIcon>
                                        </MListItemIcon>
                                        <MListItemContent>
                                            <MListItemTitle>
                                                Filter Packets
                                            </MListItemTitle>
                                        </MListItemContent>
                                    </MListItem>


                                </MList>
                            </ChildContent>
                        </MMenu>

                    </div>
                </MRow>

            }

            <MDivider></MDivider>
        </MContainer>

        break;
    case "notetools":

        <MContainer Class="py-0 mt-3" Style="height:45px">


            <MRow>

                @if (dataSvs.editNote.NoteID == 0)
                {
                    <div class="d-flex justify-content-between  align-items-center">


                        <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick:stopPropagation @onclick="@(() => SwitchMenu("collection"))">
                            <span class="bi bi-arrow-left"></span>
                        </button>

                        <p class="text-center flex-fill my-1 text-white">
                            Note

                        </p>


                        @if (dataSvs.editNote.Text is not null && dataSvs.editNote.Text.Length > 0 && dataSvs.editNote.Text.Length <= 1500)
                        {
                            <button class="btn btn-outline-success  me-1  my-1 rounded-3" type="button" disabled="@(!dataSvs.noteEdited)" @onclick="@(() => SaveNote())">
                                <span class="bi bi-save"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-danger  me-1  my-1 rounded-3" type="button"
                    onclick="document.getElementById('summarypannel').scrollIntoView({behavior:'smooth'})">
                                <span class="bi bi-save"></span>
                            </button>
                        }


                    </div>

                }
                else
                {


                    <div class="d-flex justify-content-between  align-items-center">


                        @if (dataSvs.editNote.Text is not null && dataSvs.editNote.Text.Length > 0 && dataSvs.editNote.Text.Length <= 1500)
                        {
                            <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick:stopPropagation @onclick="@(() => SwitchMenu("collection"))">
                                <span class="bi bi-arrow-left"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-danger  ms-1  my-1 rounded-3" type="button"
                    onclick="document.getElementById('summarypannel').scrollIntoView({behavior:'smooth'})">
                                <span class="bi bi-arrow-left"></span>
                            </button>
                        }

                        <p class="text-center flex-fill my-1 text-white">
                            Note

                        </p>

                    </div>

                }

            </MRow>

            <MDivider></MDivider>
        </MContainer>

        break;
    case "notecards":

        <MContainer Class="py-0 mt-3" Style="height:45px">

            <MRow>

                <div class="d-flex justify-content-between   align-items-center">

                    <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("cards"))">
                        <span class="bi bi-arrow-left"></span>
                    </button>

                    <p class="text-center flex-fill truncate-text ms-1 my-1 text-white" title="@dataSvs.SelectedCard.Title">
                        @dataSvs.SelectedCard.Title

                    </p>


                    @if (dataSvs.SelectedCard.Parent is not null)
                    {


                        <button class="btn btn-outline-primary me-1 my-1 rounded-3" type="button" @onclick="@(()=>SelectSubPacket(dataSvs.SelectedCard.Parent))">
                            <span class="bi bi-arrow-up"></span>
                        </button>
                    }
                </div>
            </MRow>
            <MDivider></MDivider>
        </MContainer>
        break;
    default:
        break;
}

@code {

    [Parameter]
    public EventCallback<string> GoToMenu { get; set; }
    private string textValue { get; set; }
    private bool _addItem { get; set; }

   
    ElementReference inputTextRef;

    IJSObjectReference _module;


    bool download_dialog;


    [CascadingParameter]
    public Error? Error { get; set; }

    protected override void OnInitialized()
    {

        NotesCollectionVM.OnChange += StateHasChanged;
        dataSvs.OnChange += StateHasChanged;
        ProjectVM.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

        }


    }


    protected void OpenCloseDialog(bool dialogState)
    {

        download_dialog = dialogState;

    }

    #region Save Note



    private async Task SwitchMenu(string menu)
    {
        try
        {
            if (menu == "collection")
            {


                if (dataSvs.editNote.NoteID == 0) //New Note
                {

                    if (dataSvs.noteEdited)
                    {
                        dataSvs.savenotedialog = true;


                    }
                    else
                    {
                        await BackToCollections("collection");

                    }



                }
                else //Edit Note
                {
                    if (dataSvs.noteEdited)
                    {

                        skiaSvs.CreateThumbImg(dataSvs.editNote.NotesCollectionFK.ToString());

                        await NoteVM.UpdateNote();

                        await NoteVM.GetNotes();
                        dataSvs.completedPolylines.Clear();

                        dataSvs.noteEdited = false;

                        await GoToMenu.InvokeAsync(menu);

                    }
                    else
                    {
                        dataSvs.completedPolylines.Clear();

                        dataSvs.noteEdited = false;

                        await GoToMenu.InvokeAsync(menu);
                    }

                }

            }
            else if (menu == "cards")
            {
                dataSvs.SelectedNoteCard = null;
                await GoToMenu.InvokeAsync(menu);
            }
            else
            {
                await GoToMenu.InvokeAsync(menu);
            }


        }
        catch (Exception ex)
        {

            Error?.ProcessError(ex);
        }

    }


    public async Task SaveNote()
    {

        skiaSvs.CreateThumbImg(dataSvs.editNote.NotesCollectionFK.ToString());
        if (dataSvs.editNote.NoteID == 0)
        {
            if (dataSvs.noteEdited)
            {
                await NoteVM.SaveNote();
                dataSvs.completedPolylines.Clear();
                dataSvs.skiaView.Invalidate();
                dataSvs.noteEdited = false;

            }

        }
        else
        {
            if (dataSvs.noteEdited)
            {
                await NoteVM.UpdateNote();
                dataSvs.noteEdited = false;

            }
        }


    }




    private async Task BackToCollections(string menu)
    {

        dataSvs.savenotedialog = false;
        dataSvs.noteEdited = false;
        dataSvs.completedPolylines.Clear();
        await NoteVM.GetNotes();
        await GoToMenu.InvokeAsync(menu);
    }

    private async Task SaveNTAndBack(string menu)
    {
        skiaSvs.CreateThumbImg(dataSvs.editNote.NotesCollectionFK.ToString());

        if (dataSvs.editNote.NoteID == 0)
        {
            await NoteVM.SaveNote();
        }
        else
        {
            await NoteVM.UpdateNote();
        }



        dataSvs.savenotedialog = false;
        dataSvs.noteEdited = false;
        dataSvs.completedPolylines.Clear();
        await NoteVM.GetNotes();
        await GoToMenu.InvokeAsync(menu);
    }


    #endregion




    private async Task AddPacket()
    {

        if (!string.IsNullOrWhiteSpace(textValue))
        {

            await PacketVM.AddPacket(new Packet { Title = textValue, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
           
            textValue = "";
            await inputTextRef.FocusAsync();
        }


    }

    private async Task AddPacket(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            await Task.Delay(100);

            if (!string.IsNullOrWhiteSpace(textValue))
            {

                await PacketVM.AddPacket(new Packet { Title = textValue, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
           
                textValue = "";
                _addItem = false;
               
            }
        }

    }


    private async Task AddCollection()
    {
        if (!string.IsNullOrWhiteSpace(textValue))
        {

            await NotesCollectionVM.AddNotesCollection(textValue);

            textValue = "";
           
        }

    }

    private async Task AddCollection(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            await Task.Delay(100);

            if (!string.IsNullOrWhiteSpace(textValue))
            {
                await NotesCollectionVM.AddNotesCollection(textValue);
                textValue = "";
                _addItem = false;
            }

        }

       
    }

    private void ClearText()
    {
        textValue = "";
        dataSvs.FilterPacketsTxt = "";

    }

    private async Task FocusOnSummaryPannel()
    {
        await JSRuntime.InvokeVoidAsync("focusOnSummaryPannel");
        dataSvs.savenotedialog = false;
    }
    private void EnableAddItem()
    {
        if (_addItem == true && textValue == "")
        {
            _addItem = false;
        }
        else
        {

            _addItem = true;
        }


    }

    private async Task EnableFilterPacket()
    {
        if (dataSvs.filterPackets == true && dataSvs.FilterPacketsTxt == "")
        {
            dataSvs.MainProject = await ProjectVM.GetProject();
            dataSvs.filterPackets = false;
        }
        else
        {

            dataSvs.filterPackets = true;
        }


    }


    private async Task SelectSubPacket(Packet subPacket)
    {

        try
        {
            if (dataSvs.ncDragingMode)
        {
            dataSvs.ncDragingMode = false;
        }
            await PacketVM.GetPacket(subPacket);
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }


    }



    public void Dispose()
    {
        NotesCollectionVM.OnChange -= StateHasChanged;
        dataSvs.OnChange -= StateHasChanged;

        ProjectVM.OnChange -= StateHasChanged;
    }


}
