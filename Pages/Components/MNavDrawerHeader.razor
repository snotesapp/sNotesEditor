@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using SkiaSharp
@inject SharedDataService dataSvs


@inject DialogService DialogService

@switch (dataSvs.menustatus)
{
    case "mainmenu":
      
    <MDialog HideOverlay OnOutsideClick="() => download_dialog = false"
        @bind-Value="download_dialog"
        MaxWidth="600">
        <ActivatorContent >
              <div class="row m-2 ">

  
            <MButton title="Download"  @attributes="@context.Attrs" Style="background-image:url(./images/download_icon.png);background-size:contain;background-position: center center" Height="45" >

            </MButton>
            
             </div>       

        <MDivider Class="mt-0"></MDivider>
        </ActivatorContent>

        <ChildContent  >
                        <SaveProjectDialogPage CloseDialoge="OpenCloseDialog">

                        </SaveProjectDialogPage>
        </ChildContent>
    </MDialog>


       

        break;
    case "collection":

        <MContainer Class="py-0 mt-2" Style="height:45px">

            @if (_addItem)
            {

                <MRow Class="ps-4 pe-4">


                    <div class="input-group d-flex pe-1 " style="border:solid;border-width:thin;border-radius:3px;background-color:white">
                        <input type="text" @ref="inputTextRef"
                   @onkeypress="@((eventArg) => AddCollection(eventArg) )" @onfocusout="@(() => EnableAddItem())"
                   class="form-control border-0 shadow-none" placeholder="Packet Name" aria-label="Packet Name" aria-describedby="basic-addon2"
                   @bind-value="textValue">

                        <button class="btn btn-outline-primary btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                            <span class="bi bi-x"></span>
                        </button>
                        <button class="btn btn-outline-primary btn-sm ms-1  my-1 rounded-3" type="button" @onclick="AddCollection">
                            <span class="bi bi-plus-circle"></span>
                        </button>

                    </div>
                </MRow>
            }
            else
            {
                <MRow>


                    <div class="d-flex justify-content-between  align-items-center">


                        <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("mainmenu"))">
                            <span class="bi bi-arrow-left"></span>
                        </button>
                        <p class="text-center flex-fill my-1 text-white">
                            Collections

                        </p>




                        <button class="btn btn-outline-primary  me-1  my-1 rounded-3" type="button" @onclick="@(() => EnableAddItem())">
                            <span class="bi bi-plus-lg"></span>
                        </button>
                    </div>
                </MRow>

            }

            <MDivider></MDivider>
        </MContainer>

        break;
    case "cards":


        <MContainer Class="py-0 mt-2" Style="height:45px">

            @if (_addItem)
            {

                <MRow Class="ps-4 pe-4">


                    <div class="input-group d-flex pe-1 " style="border:solid;border-width:thin;border-radius:3px;background-color:white">
                        <input type="text" @ref="inputTextRef"
                   @onkeypress="@((eventArg) => AddCard(eventArg) )" @onfocusout="@(() => EnableAddItem())"
                   class="form-control border-0 shadow-none" placeholder="Packet Name" aria-label="Packet Name" aria-describedby="basic-addon2"
                   @bind-value="textValue">

                        <button class="btn btn-outline-primary btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                            <span class="bi bi-x"></span>
                        </button>
                        <button class="btn btn-outline-primary btn-sm ms-1  my-1 rounded-3" type="button" @onclick="AddCard">
                            <span class="bi bi-plus-circle"></span>
                        </button>

                    </div>
                </MRow>
            }
            else
            {
                <MRow>


                    <div class="d-flex justify-content-between  align-items-center">


                        <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("mainmenu"))">
                            <span class="bi bi-arrow-left"></span>
                        </button>
                        <p class="text-center flex-fill my-1 text-white">
                            Packets

                        </p>




                        <button class="btn btn-outline-primary  me-1  my-1 rounded-3" type="button" @onclick="@(() => EnableAddItem())">
                            <span class="bi bi-plus-lg"></span>
                        </button>
                    </div>
                </MRow>

            }

            <MDivider></MDivider>
        </MContainer>


        break;
    case "notetools":

        <MContainer Class="py-0 mt-2" Style="height:45px">


            <MRow>


                <div class="d-flex justify-content-between  align-items-center">


                    <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("collection"))">
                        <span class="bi bi-arrow-left"></span>
                    </button>
                    <p class="text-center flex-fill my-1 text-white">
                        Note

                    </p>


                    @if (dataSvs.editNote.Text is not null && dataSvs.editNote.Text.Length > 0 && dataSvs.editNote.Text.Length <= 1500)
                    {
                        <button class="btn btn-outline-success  me-1  my-1 rounded-3" type="button" @onclick="@(() => SaveNote())">
                            <span class="bi bi-save"></span>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-outline-danger  me-1  my-1 rounded-3" type="button"
                    onclick="document.getElementById('summarypannel').scrollIntoView({behavior:'smooth'})">
                            <span class="bi bi-save"></span>
                        </button>
                    }







                </div>
            </MRow>



            <MDivider></MDivider>
        </MContainer>

        <!--


        <div class="row m-2">
            <button title="Collections" class="btn btn-outline-success" @onclick="@(() => SwitchMenu("collection"))">
                <span class="bi bi-arrow-left"></span>
            </button>
        </div>

        <MDivider></MDivider>
                -->
        break;
    case "notecards":
        <!--
                 <div class="row m-2">
                    <button title="Pockets" class="btn btn-outline-success" @onclick="@(() => SwitchMenu("cards"))">
                        <span class="bi bi-arrow-left"></span>
                    </button>
                </div>
        -->

        <MContainer Class="py-0 mt-2" Style="height:45px">


            <MRow>


                <div class="d-flex justify-content-between   align-items-center">


                    <button class="btn btn-outline-primary  ms-1 my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("cards"))">
                        <span class="bi bi-arrow-left"></span>
                    </button>

                    <p class="text-center flex-fill my-1 text-white">
                        @dataSvs.SelectedCard.Title

                    </p>


                    @if (dataSvs.SelectedCard.Parent is not null)
                    {


                        <button class="btn btn-outline-primary me-1 my-1 rounded-3" type="button" @onclick="@(()=>SelectChildCard(dataSvs.SelectedCard.Parent))">
                            <span class="bi bi-arrow-up"></span>
                        </button>
                    }
                </div>
            </MRow>
            <MDivider></MDivider>
        </MContainer>
        break;
    default:
        break;
}


@code {

    [Parameter]
    public EventCallback<string> GoToMenu { get; set; }
    private string textValue { get; set; }
    private bool _addItem { get; set; }
    ElementReference inputTextRef;
    string CollectionId = "0";

    
    bool download_dialog;



    [CascadingParameter]
    public Error? Error { get; set; }

    protected override void OnInitialized()
    {
        if (dataSvs.AddNotesSelectedNC is not null)
        {
            CollectionId = dataSvs.AddNotesSelectedNC.NotesCollectionID.ToString();

        }

        dataSvs.OnChange += StateHasChanged;

    }

    protected void OpenCloseDialog(bool dialogState)
    {

        download_dialog = dialogState;
       
    }

    private async Task DownloadProject()
    {


        await DialogService.OpenAsync<SaveProjectDialogPage>("Save Project", null,
                new DialogOptions() { Width = "700px", Height = "auto", Resizable = false, Draggable = true, ShowClose = true });

        /*


        #region Download file from GDrive as bitArray
        HttpClient httpClient = new HttpClient()
        {
        BaseAddress = new Uri("https://www.googleapis.com/drive/v3/files/")
        };
        byte[] downloadFile = await httpClient.GetByteArrayAsync("12PVVjxsLQnK5zzpHN7IYpR3uWPyW6TkR?key=AIzaSyBl_QdS1lMUgHW2BY6blYTJWejuMeMjnMM&alt=media");
        #endregion
        */
        /*
        await dataSvs.DownloadProjectFile();
        //  var fileName = $"{dataSvs.MainProject.Name} - {DateTime.Now.ToString()}.snotes";
        //'https://www.googleapis.com/drive/v3/files/12PVVjxsLQnK5zzpHN7IYpR3uWPyW6TkR?key=[YOUR_API_KEY]&alt=media'

        #region Get Upload Location Uri

        var gDriveApiclient = ClientFactory.CreateClient("GDriveApi");
        GDriveFileId idContent = await gDriveApiclient.GetFromJsonAsync<GDriveFileId>("files/generateIds?count=1");
        Console.WriteLine(idContent.ids[0].ToString());

        var gDriveApiUploadclient = ClientFactory.CreateClient("GDriveApiUpload");

        var fileName = $"{dataSvs.MainProject.Name} - {DateTime.Now.ToString()}.snotes";
        var metaContent = JsonContent.Create(new { name = fileName, mimeType = "application/zip", id = idContent.ids[0] });
        HttpResponseMessage result = await gDriveApiUploadclient.PostAsync("?uploadType=resumable", metaContent);
            var jsonresult = result.Headers.Location.Query;
            #endregion
            #region Upload File in chunks
            IEnumerable<byte[]> chunksEnum = dataSvs.fileArray.Chunk(256 * 1024);
            foreach (byte[] chunk in chunksEnum){
            Stream stream = new MemoryStream(chunk);
            var streamContent = new StreamContent(stream);
            var uploadresult = await gDriveApiUploadclient.PutAsync(jsonresult, streamContent);
        }
        #endregion
        #region Set File as public
        var permissionContent = JsonContent.Create(new { role = "reader", type = "anyone" });
        var setPermission = await gDriveApiclient.PostAsync($"files/{idContent.ids[0]}/permissions", permissionContent);
        #endregion
        Console.WriteLine($"Upload Finished");

        */
        /*

        #region convert bitArray to zip and download it
        var fileName = $"{dataSvs.MainProject.Name} - {DateTime.Now.ToString()}.snotes";
        await _module.InvokeVoidAsync("blazorDownloadFile1", fileName, "application/zip", downloadFile);
        #endregion

    */
    }

    private async Task SwitchMenu(string menu)
    {
        try
        {
            if (menu == "collection")
            {
                /*
                //Don't Update new note,update existing note.
                if (dataSvs.EditMode == true)
                    {
                    dataSvs.UpdateNote().GetAwaiter().GetResult();

                }
                */
                //dataSvs.UpdateNote().GetAwaiter().GetResult();
                dataSvs.ClearCanvas();
                await dataSvs.GetNotes();
            }
            await GoToMenu.InvokeAsync(menu);

        }
        catch (Exception ex)
        {
            
             Error?.ProcessError(ex);
        }
       
    }

    private async Task AddCard()
    {

        if (!string.IsNullOrWhiteSpace(textValue))
        {
            // dataSvs.MainProject.Cards.Add(new Card { Title = cardTitle, Selected = true , ProjectFK = dataSvs.MainProject.ProjectID });
            // await  dataSvs.UpdateProject();
            await dataSvs.AddCard(new Card { Title = textValue, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
            textValue = "";
            await inputTextRef.FocusAsync();
        }


    }

    private async Task AddCard(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            await Task.Delay(100);

            if (!string.IsNullOrWhiteSpace(textValue))
            {
                // dataSvs.MainProject.Cards.Add(new Card { Title = cardTitle, Selected = true , ProjectFK = dataSvs.MainProject.ProjectID });
                // await  dataSvs.UpdateProject();
                await dataSvs.AddCard(new Card { Title = textValue, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
                textValue = "";
                await inputTextRef.FocusAsync();
            }
        }

    }


    private async Task AddCollection()
    {
        if (!string.IsNullOrWhiteSpace(textValue))
        {
            await dataSvs.AddCollection(new NotesCollection { Title = textValue, Selected = false, ProjectFK = dataSvs.MainProject.ProjectID, Note = new List<Note>() });

            textValue = "";
        }

    }

    private async Task AddCollection(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            await Task.Delay(100);

            if (!string.IsNullOrWhiteSpace(textValue))
            {
                await dataSvs.AddCollection(new NotesCollection { Title = textValue, Selected = false, ProjectFK = dataSvs.MainProject.ProjectID, Note = new List<Note>() });

                textValue = "";
            }

        }

    }
    private void ClearText()
    {
        textValue = "";

    }

    private void EnableAddItem()
    {
        if (_addItem == true && textValue == "")
        {
            _addItem = false;
        }
        else
        {
            _addItem = true;
        }

    }

    private async Task SelectChildCard(Card chCard)
    {
        await dataSvs.GetCard(chCard);

    }

    public async Task SaveNote()
    {

        string bitmapPath;
        if (dataSvs.editNote.MainImg is not null)
        {

            bitmapPath = dataSvs.editNote.MainImg;
            using (SKImage image = SKImage.FromBitmap(dataSvs.saveBitmap))
            {

                SKRectI sKRectI = new SKRectI(0, 0, dataSvs.Wdimension.ThumbWidth, dataSvs.Wdimension.ThumbHeight);
                SKImage subImage = image.Subset(sKRectI);
                SKData data = subImage.Encode();

                //  SKData data = image.Encode();

                FileStream fs = File.Create(bitmapPath);
                data.SaveTo(fs);
                fs.Close();


                // var listfiles =Directory.GetFiles( dataSvs.ProjectPath.FullName + "/" + CollectionId + "/bitmaps/" );

            }

        }
        else
        {
            // Generate a new file to avoid dublicates = (FileName withoutExtension - GUId.extension)

            var fileName = $"bitmap-{Guid.NewGuid().ToString()}.bmp";
            var path = dataSvs.ProjectPath.FullName + "/" + CollectionId + "/bitmaps/" + fileName;

            if (Directory.Exists(dataSvs.ProjectPath.FullName + "/" + CollectionId + "/bitmaps/"))
            {
                bitmapPath = dataSvs.ProjectPath.FullName + "/" + CollectionId + "/bitmaps/" + fileName;

            }
            else
            {
                Directory.CreateDirectory(dataSvs.ProjectPath.FullName + "/" + CollectionId + "/bitmaps/");
                bitmapPath = dataSvs.ProjectPath.FullName + "/" + CollectionId + "/bitmaps/" + fileName;

            }

            //  bitmapPath = $"bitmap-{Guid.NewGuid().ToString()}.bmp";

        }


        using (SKImage image = SKImage.FromBitmap(dataSvs.saveBitmap))
        {

            SKRectI sKRectI = new SKRectI(0, 0, dataSvs.Wdimension.ThumbWidth, dataSvs.Wdimension.ThumbHeight);
            SKImage subImage = image.Subset(sKRectI);
            SKData data = subImage.Encode();

            //  SKData data = image.Encode();
            FileStream fs = File.Create(bitmapPath);
            data.SaveTo(fs);
            fs.Close();

            dataSvs.editNote.MainImg = bitmapPath;
            // var listfiles =Directory.GetFiles( dataSvs.ProjectPath.FullName + "/" + CollectionId + "/bitmaps/" );

        }


        if (dataSvs.editNote.NoteID == 0)
        {
            await dataSvs.SaveNote();
            dataSvs.BitmapDrawed = false;
            dataSvs.ClearCanvas();

        }
        else
        {
            await dataSvs.UpdateNote();
        }



        /*
        using (SKImage image = SKImage.FromBitmap(dataSvs.saveBitmap))
        {
            SKData data = image.Encode();

            SKRectI sKRectI = new SKRectI(0, 0, 500, 281);
            SKImage subImage = image.Subset(sKRectI);
            SKData thdata = subImage.Encode();
            dataSvs.editNote.Thumbnail = "data:image/jpeg;base64," + Convert.ToBase64String(thdata.ToArray());

        }
        */
    }


    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }


}
