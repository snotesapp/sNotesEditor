@page "/"
@using BlazorApp1.Data
@using BlazorApp1.Pages.Components
@using System.Collections.ObjectModel
@inject Project newprjct;

@using BlazorApp1.Helpers
@using System.IO.Compression
@using BlazorApp1.ViewModels;
@using BlazorComponent
@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json
@using System.ComponentModel

@inject SharedDataService dataSvs
@inject NotesCollectionViewModel NotesCollectionVM
@inject PacketViewModel PacketVM
@inject NoteViewModel NoteVM
@inject ProjectViewModel ProjectVM
@inject ILocalStorageService localstorage1
@inject ISessionStorageService sessionStorage

@inject IJSRuntime JSRuntime
@using ReactiveUI
@using System.Reactive.Linq


<PageTitle>@dataSvs.MainProject.Name</PageTitle>

<NavigationLock ConfirmExternalNavigation = "@ProjectVM.ConfirmLeave" >
    
</NavigationLock>

@if (dataSvs.menustatus == "notetools")
{
    <MRow >

        <DropZonePg />
    </MRow>



}
else if (dataSvs.menustatus == "cards")
{
    <MRow>
        <!--


        <NoteCardsPg />
              -->

        <AlertDialog Show="@dataSvs.showDeletePacketConfirmation" DialogType="DialogTypes.DialogType.GeneralSave" Title="Delete Packet"
                 Text="Confirm deleting packet with all sub-packets?" YesEvent="() =>  PacketVM.DeletePacket(dataSvs.ContextMenuCard)" NoEvent="()=> dataSvs.showDeletePacketConfirmation = false">

        </AlertDialog>

        <SNmodal Width="500" Height="250" IsOpen="dataSvs.moveto_dialog">
            <MCard>
                <MCardTitle Class="p-2 gradient-blue">

                    @if (moveto_filterPackets == false)
                    {
                        <p class="m-2 text-h5 ">
                            Select Destination Packet
                        </p>

                    }
                    else
                    {
                        <div class="input-group mx-1 shadow">
                            <input type="text" class="form-control " placeholder="Filter Packets"
                           @bind-value:event=oninput @bind-value="@dataSvs.FilterPacketsTxt"
                           aria-describedby="filterpktbtnGroup">


                        </div>
                    }
                </MCardTitle>

                <MList MaxHeight="250" Class="mx-1" Style="overflow:auto">

                    <ListTemplate Items="@(moveto_filterPackets ? dataSvs.SelectionCards.Where(sm => sm.Title.ToLower().Contains(dataSvs.FilterPacketsTxt.Trim().ToLower()) ).ToList() : dataSvs.SelectionCards)">
                        <RowTemplate Context="packet">
                            @if (packet.Parent is null)
                            {
                                <MListItem Link style="background-color:#1565c0"
                                       OnClick="@(() => { PacketVM.SetParentPacket(packet,dataSvs.ContextMenuCard).GetAwaiter().GetResult(); dataSvs.moveto_dialog = false;})"
                                       Color="white" Class="m-1 elevation-4 rounded-3 truncate-text">
                                <MListItemContent>
                                    <MListItemTitle>@packet.Title </MListItemTitle>
                                </MListItemContent>
                            </MListItem>
                            }
                            else
                            {


                                <MListItem Link style="background-color:#1565c0"
                                       OnClick="@(() => { PacketVM.SetParentPacket(packet,dataSvs.ContextMenuCard).GetAwaiter().GetResult(); dataSvs.moveto_dialog = false;})"
                                       Color="white" Class="m-1 elevation-4 rounded-3 truncate-text">
                                <MListItemContent>
                                    <MListItemTitle>@packet.Title </MListItemTitle>

                                    <MListItemSubtitle Style="color:white; text-align:end;">@packet.Parent.Title</MListItemSubtitle>


                                </MListItemContent>
                            </MListItem>


                            }
                           

                        </RowTemplate>

                    </ListTemplate>

                </MList>

                <MDivider></MDivider>

                <MCardActions>
                    <MCheckbox TValue="bool" OnClick='()=> {moveto_filterPackets = !moveto_filterPackets;dataSvs.FilterPacketsTxt = "";}' OnIcon="mdi-filter-off-outline" OffIcon="mdi-filter-outline">

                    </MCheckbox>
                    <MSpacer></MSpacer>
                    <MButton Color="primary"
                         Text
                         OnClick="() => {dataSvs.moveto_dialog = false; moveto_filterPackets = false;}">
                        Close
                    </MButton>
                </MCardActions>
            </MCard>
        </SNmodal>

    </MRow>



}
else if (dataSvs.menustatus == "notecards")
{

    <MRow>
        <NoteCardsPg />

    </MRow>


}
else
{


    <div class="mx-auto mb-2 w-75" style="display:@(dataSvs.showFilterNotes ? "block" : "none")">
        <MTextField Dense Solo Placeholder="Search Notes" TValue="string"
                @bind-value:event=oninput @bind-value="@dataSvs.SearchTerm"
                ClearIcon="mdi-close-circle"
                Clearable
                OnClearClick="@(() => dataSvs.SearchTerm = "")"
                AppendOuterIcon="mdi-close"
                OnAppendOuterClick="@(() => {dataSvs.showFilterNotes = false;dataSvs.SearchTerm = "";NoteVM.GetNotes().GetAwaiter().GetResult();})"
                SingleLine
                HideDetails=true></MTextField>

    </div>


    <div class="overflow-auto  d-flex flex-row justify-content-evenly flex-wrap   bd-highlight mb-3" @ref="_mainPg">

        <NotesTemplate Items="@(dataSvs.selectedNCNotes)">
            <NoteTemplate Context="note">
                @if (note.Selected)
                {

                   <MCard Elevation="6" Class="m-1" Style="background-image: linear-gradient(to left top, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e )"
                   Dark
                   OnClick="() => NoteVM.StyleSelectNote(note)"
                   @oncontextmenu="@(args => { ShowNoteContextMenu(args,note);})" __internal_preventDefault_oncontextmenu>

                        <MImage Width="350" Height="197" Class="align-end" Src="@note.Thumbnail">
                            <MCardText Class="lh-sm text-body" 
                               Style="overflow: hidden; text-overflow: ellipsis;white-space:pre-wrap;max-height:100px; ">
                                @note.Text
                            </MCardText>

                        </MImage>



                    </MCard>

                }
                else
                {
                    <MCard Elevation="6" Class="m-1" Style="background-image: linear-gradient(to left top, #5e92f3,#97aaf6,#c0c4f8,#e2e1fb,#ffffff )"
                   Dark
                   OnClick="() => NoteVM.StyleSelectNote(note)"
                   @oncontextmenu="@(args => { ShowNoteContextMenu(args,note);})" __internal_preventDefault_oncontextmenu>

                        <MImage Width="350" Height="197" Class="align-end" Src="@note.Thumbnail">
                            <MCardText Class="lh-sm text-body"
                                   Style="overflow: hidden; text-overflow: ellipsis;white-space:pre-wrap;max-height:100px;">
                                @note.Text
                            </MCardText>

                        </MImage>



                    </MCard>

                }


            </NoteTemplate>
        </NotesTemplate>

        @if ((dataSvs.selectedNCNotes.Count == 20 || _hasMore) && dataSvs.showFilterNotes is false)
        {
            <MButton class="position-fixed bottom-0 start-50 translate-middle-x my-6 mx-3 "
             OnClick='() => LoadMoreNotes()'
             title="Add To Packet"
             Fab
             Dark
             Color="#1565c0">
                <MIcon>mdi-playlist-plus </MIcon>
            </MButton>
        }

    </div>


   
  

    @if (dataSvs.MainProject.ProjectID == 0)
    {
        <SNmodal Width="700" Height="300" IsOpen="@dataSvs.newProjectDialog">
            <NewProjectModal CloseDialoge="OpenCloseDialog">

            </NewProjectModal>
        </SNmodal>

    }

 

    @if (ContextMenuNote != null)
    {
        <MMenu @bind-Value="ShowNoteContext"
       PositionX="X"
       PositionY="Y"
       Absolute
       OffsetY
       CloseOnContentClick>
            <MList Dense Width="200">

                <MListItem OnClick="() => EditNote(ContextMenuNote)">
                    <MListItemIcon>
                        <MIcon>
                            mdi-pencil-outline
                        </MIcon>
                    </MListItemIcon>
                    <MListItemContent>
                        <MListItemTitle>
                            Edit
                        </MListItemTitle>
                    </MListItemContent>
                </MListItem>

                <MListItem OnClick="() => DeleteNote(ContextMenuNote)">
                    <MListItemIcon>
                        <MIcon>
                            mdi-delete-outline
                        </MIcon>
                    </MListItemIcon>
                    <MListItemContent>

                        <MListItemTitle>
                            Delete
                        </MListItemTitle>
                    </MListItemContent>
                </MListItem>

            </MList>
        </MMenu>

    }


    @if (dataSvs.selectedNCNotes.Exists(nt => nt.Selected == true))
    {

        <MButton class="position-fixed bottom-0 end-0 my-6 mx-3 "
         OnClick='() => {addcard_dialog = true;filterPackets=false;dataSvs.FilterPacketsTxt="";PacketVM.NotesToPackeList=PacketVM.GetPackets(Pinned:true).GetAwaiter().GetResult(); }'
         title="Add To Packet"
         Fab
         Dark
         Color="#1565c0">
            <MIcon>mdi-plus-box-multiple </MIcon>
        </MButton>

        <SNmodal Width="500" Height="250" IsOpen="addcard_dialog">
            <MCard>
                <MCardTitle Class="p-2 gradient-blue ">
                    @if (filterPackets == false)
                    {
                        <div class="input-group shadow">
                            <input type="text" class="form-control" placeholder="Add Packets" @bind-value="cardTitle" @onkeypress="((eventArg) => AddPacket(eventArg)) " aria-describedby="addpktbtnGroup">
                            <button class="btn btn-primary" id="addpktbtnGroup" @onclick="AddPacket">
                                Add
                            </button>

                        </div>
                    }
                    else
                    {
                        <div class="input-group shadow">
                            <input type="text" class="form-control" placeholder="Filter Packets"
                       @bind-value:event=oninput @bind-value="@dataSvs.FilterPacketsTxt"
                       aria-describedby="filterpktbtnGroup">


                        </div>
                    }


                </MCardTitle>

                     <MList MaxHeight="250" Class="mx-1" Style="overflow:auto">

                    <ListTemplate Items="@(filterPackets ? dataSvs.FiltredPackets : PacketVM.NotesToPackeList)">
                        <RowTemplate Context="packet">

                        @if (packet.Parent is null)
                        {
                            <MListItem Link style="background-color:#1565c0"
                            OnClick="@(() => {AddUserSelectedNotes(packet).GetAwaiter().GetResult(); addcard_dialog=false; })"
                                   Color="white" Class="m-1 elevation-4 rounded-3 truncate-text">
                            <MListItemContent>
                                <MListItemTitle>@packet.Title </MListItemTitle>
                            </MListItemContent>
                        </MListItem>
                        }
                        else
                        {

                           <MListItem Link style="background-color:#1565c0"
                                   OnClick ="@(() => {AddUserSelectedNotes(packet).GetAwaiter().GetResult(); addcard_dialog=false; })"
                                   Color="white" Class="m-1 elevation-4 rounded-3 truncate-text">
                            <MListItemContent>
                                <MListItemTitle>@packet.Title </MListItemTitle>

                                <MListItemSubtitle Style="color:white; text-align:end;">@packet.Parent.Title</MListItemSubtitle>

                            </MListItemContent>
                        </MListItem>

                        }

                        </RowTemplate>

                    </ListTemplate>

                </MList>

             

               
                <MDivider Class="my-1"></MDivider>

                <MCardActions>

                    <MCheckbox TValue="bool" OnClick='()=> {filterPackets = !filterPackets;dataSvs.FilterPacketsTxt = "";}' OnIcon="mdi-filter-off-outline" OffIcon="mdi-filter-outline">

                    </MCheckbox>
                    <MSpacer></MSpacer>
                    <MButton Color="primary"
                     Text
                     OnClick="() =>{ addcard_dialog = false; filterPackets = false;}">
                        Close
                    </MButton>
                </MCardActions>
            </MCard>


        </SNmodal>


    }


    <AlertDialog Show="@dataSvs.showDeleteNCConfirmation" DialogType="DialogTypes.DialogType.GeneralSave" Title="Delete Collection"
             Text="Confirm deleting collection with all notes inside?" YesEvent="() => NotesCollectionVM.DeleteNotesCollection(dataSvs.ContextMenuNotesCollection)" NoEvent="()=> dataSvs.showDeleteNCConfirmation = false">

    </AlertDialog>

}



@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }


    IJSObjectReference _module;
    IJSObjectReference _dropZoneJS;

   

    private ElementReference _mainPg;
    private bool _hasMore;

    [CascadingParameter]
    public Error? Error { get; set; }

    bool addcard_dialog;
    bool filterPackets;


    bool moveto_filterPackets;

    private Note? ContextMenuNote = null;
    private bool ShowNoteContext;
    double X = 0;
    double Y = 0;

    private string? filterNotes;

    protected override void OnInitialized()
    {
        dataSvs.WhenAnyValue(x => x.SearchTerm)
       .Throttle(TimeSpan.FromSeconds(1.5))
       .Subscribe(async searchTerm =>
       {
           if (string.IsNullOrEmpty(searchTerm))
           {
               dataSvs.selectedNCNotes = dataSvs.selectedNCNotes;
           }
           else
           {
               dataSvs.selectedNCNotes = await NoteVM.GetNotes(searchTerm);

           }
           StateHasChanged();
       });

        dataSvs.WhenAnyValue(x => x.FilterPacketsTxt)
       .Throttle(TimeSpan.FromSeconds(1.5))
       .Subscribe(async FilterPacketsTxt =>
       {
           if (string.IsNullOrEmpty(FilterPacketsTxt))
           {
               dataSvs.FiltredPackets.Clear();
           }
           else
           {
               dataSvs.FiltredPackets = await PacketVM.GetPackets(FilterPacketsTxt);

           }
           StateHasChanged();
       });

        ProjectVM.OnChange += StateHasChanged;
        dataSvs.OnChange += StateHasChanged;
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");
            _dropZoneJS = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/dropZone.js");
            dataSvs.Wdimension = await _dropZoneJS.InvokeAsync<WindowDimension>("getWindowDimensions");

            if (dataSvs.MainProject.ProjectID == 0)
            {
                //await ProjectVM.newProjectModal?.ShowAsync();
                 dataSvs.newProjectDialog = true;
                 
         
            }

        }

    }


    public void Dispose()
    {
        ProjectVM.OnChange -= StateHasChanged;
        dataSvs.OnChange -= StateHasChanged;
    }

    private void ShowNoteContextMenu(MouseEventArgs args, Note note)
    {
        ShowNoteContext = false;
        ContextMenuNote = null;
        // await Task.Delay(16);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuNote = note;
        ShowNoteContext = true;
    }


    public async Task AddUserSelectedNotes(Packet packet)
    {
        List<Note> UserSelectedNotes = dataSvs.selectedNCNotes.Where(sl => sl.Selected == true).ToList();
        await dataSvs.AddRangNoteCard(packet, UserSelectedNotes);

        UserSelectedNotes.Select(nts => { nts.Selected = false; return nts; }).ToList();
    }

    private async Task AddNoteCard(Packet card, Note note)
    {

        await dataSvs.NewNoteCard(card, note);

    }

    private async Task DeleteNote(Note note)
    {

        await NoteVM.DeleteNoteImgFiles(note, false);
        await NoteVM.DeleteNote(note);
        await NoteVM.GetNotes();

    }

    private async Task EditNote(Note note)
    {

        dataSvs.editNote = await NoteVM.GetNote(note);

        dataSvs.BitmapDrawed = false;
        dataSvs.SwitchMenus("notetools");

    }

    private string cardTitle { get; set; }

    private async Task AddPacket()
    {
        if (!string.IsNullOrWhiteSpace(cardTitle))
        {
            Packet newPacket = new Packet { Title = cardTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID };
            await PacketVM.AddPacket(newPacket);
            PacketVM.NotesToPackeList.Add(newPacket);
            cardTitle = "";
        }

    }

    private async Task AddPacket(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {
            await Task.Delay(100);
            if (!string.IsNullOrWhiteSpace(cardTitle))
            {

                Packet newPacket = new Packet { Title = cardTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID };
                await PacketVM.AddPacket(newPacket);
                PacketVM.NotesToPackeList.Add(newPacket);
                cardTitle = "";


            }
        }

    }

    private void OpenCloseDialog(bool dialogState)
    {
        // await ProjectVM.newProjectModal?.HideAsync();
        dataSvs.newProjectDialog = dialogState;

    }


    private async Task LoadMoreNotes()
    {
        List<Note> append = await NoteVM.GetNotes(dataSvs.selectedNCNotes.Count, 20);
        dataSvs.selectedNCNotes.AddRange(append) ;
        
        _hasMore = append.Count > 0;
    }



}