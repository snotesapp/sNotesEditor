@page "/"
@using BlazorApp1.Data
@using BlazorApp1.Pages.Components
@using System.Collections.ObjectModel


@inject Project newprjct;

@using BlazorApp1.Helpers
@using System.IO.Compression
@using BlazorComponent
@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json
@using System.ComponentModel

@inject SharedDataService dataSvs

@inject ILocalStorageService localstorage1
@inject ISessionStorageService sessionStorage

@inject IJSRuntime JSRuntime
@using ReactiveUI
@using System.Reactive.Linq


<PageTitle>@dataSvs.MainProject.Name</PageTitle>
<!--
<h4>
    Current page: @dataSvs.menustatus

</h4>
<button class="btn btn-primary" @onclick="TestSomthing">
    Test
</button>
-->
@if (dataSvs.menustatus == "notetools")
{
    <MRow>

        <DropZonePg />
    </MRow>



}
else if (dataSvs.menustatus == "cards")
{
    <MRow>
        <!--


        <NoteCardsPg />
              -->
    </MRow>
}
else if (dataSvs.menustatus == "notecards")
{

    <MRow>
        <NoteCardsPg  />

    </MRow>


}
else
{
    <div class="mx-auto mb-2 w-75" style="display:@(dataSvs.showFilterNotes ? "block" : "none")">
        <MTextField Dense Solo Placeholder="Filter Notes" TValue="string"
                @bind-value:event=oninput @bind-value="@dataSvs.SearchTerm"
                ClearIcon="mdi-close-circle"
                Clearable
                OnClearClick="@(() => dataSvs.SearchTerm = "")"
                AppendOuterIcon="mdi-close"
                OnAppendOuterClick="@(() => {dataSvs.showFilterNotes = false;dataSvs.SearchTerm = "";dataSvs.GetNotes().GetAwaiter().GetResult();})"
                SingleLine
                HideDetails=true
                ></MTextField>

       </div>

    


    <NotesTemplate Items="@(dataSvs.selectedNCNotes)">
        <NoteTemplate Context="note">
            @if (note.Selected)
            {
                <!--


                   <div class="card p-2 bd-highlight border-3 border-primary" style="width: 30rem; margin:4px;"
                @oncontextmenu="@(args => { NoteContextMenuWithContent(args,note);})" @oncontextmenu:preventDefault="true"
                @onclick="() => dataSvs.StyleSelectNote(note)">

                       <div class="d-flex flex-row">

                           <img src="@note.Thumbnail"  class="card-img-top" style="height:150px;width:150px" alt="...">
                           <div class="card-body">
                               <h5 class="card-title">Card title </h5>
                               <p class="card-text">@note.Text</p>
                               <a class="btn btn-primary">Add To Card</a>
                           </div>

                       </div>



                   </div>
                       -->
                <MCard Elevation="6" Class="m-1" Style="background-image: linear-gradient(to left top, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e )"
               Dark
               OnClick="() => dataSvs.StyleSelectNote(note)"
               @oncontextmenu="@(args => { ShowNoteContextMenu(args,note);})" __internal_preventDefault_oncontextmenu>

                    <MImage Width="350" Height="197" Class="align-end" Src="@note.Thumbnail">
                        <MCardText Class="lh-sm text-body"
                           Style="overflow: hidden; text-overflow: ellipsis;white-space:pre-wrap;">
                            @note.Text
                        </MCardText>

                    </MImage>



                </MCard>

            }
            else
            {
                <MCard Elevation="6" Class="m-1" Style="background-image: linear-gradient(to left top, #5e92f3,#97aaf6,#c0c4f8,#e2e1fb,#ffffff )"
               Dark
               OnClick="() => dataSvs.StyleSelectNote(note)"
               @oncontextmenu="@(args => { ShowNoteContextMenu(args,note);})" __internal_preventDefault_oncontextmenu>

                    <MImage Width="350" Height="197" Class="align-end" Src="@note.Thumbnail">
                        <MCardText Class="lh-sm text-body"
                           Style="overflow: hidden; text-overflow: ellipsis;white-space:pre-wrap;">
                            @note.Text
                        </MCardText>

                    </MImage>



                </MCard>
                <!--
                <div class="card p-2 bd-highlight " style="width: 30rem; margin:4px;"
                @oncontextmenu="@(args => { NoteContextMenuWithContent(args,note);})" @oncontextmenu:preventDefault="true"
                @onclick="() => dataSvs.StyleSelectNote(note)">
                                   <div class="d-flex flex-row shadow rounded p-0">
                @if (@note.Thumbnail is not null)
                {
                                           <img src="@note.Thumbnail" class="card-img-top" style="height:150px;width:150px" alt="...">

                }
                                       <div class="card-body">
                                           <h5 class="card-title">Card title </h5>
                                           <p class="card-text">@note.Text</p>
                                           <a class="btn btn-primary">Add To Card</a>
                                       </div>

                                   </div>
                               </div>
                -->
            }

            
        </NoteTemplate>
    </NotesTemplate>


    <MDialog @bind-Value="@dataSvs.newProjectDialog"
         HideOverlay MaxWidth="600">
        <NewPrjctWizard CloseDialoge="OpenCloseDialog">

        </NewPrjctWizard>
    </MDialog>

@if(ContextMenuNote != null){
        <MMenu @bind-Value="ShowNoteContext"
       PositionX="X"
       PositionY="Y"
       Absolute
       OffsetY
       CloseOnContentClick>
            <MList Dense Width="200">

                <MListItem OnClick="() => EditNote(ContextMenuNote)">
                    <MListItemIcon>
                        <MIcon>
                            mdi-pencil-outline
                        </MIcon>
                    </MListItemIcon>
                    <MListItemContent>
                        <MListItemTitle>
                            Edit
                        </MListItemTitle>
                    </MListItemContent>
                </MListItem>

                <MListItem OnClick="() => DeleteNote(ContextMenuNote)">
                    <MListItemIcon>
                        <MIcon>
                            mdi-delete-outline
                        </MIcon>
                    </MListItemIcon>
                    <MListItemContent>

                        <MListItemTitle>
                            Delete
                        </MListItemTitle>
                    </MListItemContent>
                </MListItem>

            </MList>
        </MMenu>

}


    @if (dataSvs.selectedNCNotes.Exists(nt => nt.Selected == true))
    {

       
        <div class="text-center">
            <MDialog @bind-Value="addcard_dialog" HideOverlay
             Width="500">
                <ActivatorContent  >
                   
       <MButton class="position-fixed bottom-0 end-0 my-6 mx-3 " @attributes="@context.Attrs" OnClick="() => addcard_dialog = true"
         title="Add To Packet"
         Fab
         Dark
         Color="#1565c0">
            <MIcon>mdi-plus-box-multiple </MIcon>
        </MButton>
       </ActivatorContent>

                <ChildContent>
                    <MCard >
                        <MCardTitle Class=" p-2 gradient-blue ">
                            <div class="input-group shadow">
                                <input type="text" class="form-control" placeholder="Add Packets" @bind-value="cardTitle" @onkeypress="((eventArg) => AddCard(eventArg)) " aria-describedby="addpktbtnGroup">
                                <button class="btn btn-primary" id="addpktbtnGroup" @onclick="AddCard">
                                    Add
                                </button>

                            </div>
                       
                        </MCardTitle>
                      
                       

             <MList MaxHeight="250" Class="mx-1" Style="overflow:auto">
                            
                            <ListTemplate Items="dataSvs.MainProject.Cards">
                                <RowTemplate Context="card">

                                    <button type="button" class="list-group-item list-group-item-action mb-1 shadow rounded" style="background-color:#5e92f3"
                                    @onclick="@(() => {AddUserSelectedNotes(card).GetAwaiter().GetResult(); addcard_dialog=false; })">
                                        @card.Title
                                    </button>

                                </RowTemplate>

                            </ListTemplate>

            </MList>

         
      
                        <MDivider Class="my-1"></MDivider>

                        <MCardActions>
                            <MSpacer></MSpacer>
                            <MButton Color="primary"
                             Text
                             OnClick="() => addcard_dialog = false">
                                Close
                            </MButton>
                        </MCardActions>
                    </MCard>


                </ChildContent>
            </MDialog>
        </div>
    }

   
}





@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }


    IJSObjectReference _module;
    IJSObjectReference _dropZoneJS;

    bool addcard_dialog;

    private Note? ContextMenuNote= null;
    private bool ShowNoteContext;
    double X = 0;
    double Y = 0;

    private string? filterNotes;



    protected override void OnInitialized()
    {
        dataSvs.WhenAnyValue(x => x.SearchTerm)
       .Throttle(TimeSpan.FromSeconds(1.5))
       .Subscribe(async searchTerm =>
       {
           if (string.IsNullOrEmpty(searchTerm))
           {
               dataSvs.selectedNCNotes = dataSvs.selectedNCNotes;
           }
           else
           {
               dataSvs.selectedNCNotes = await dataSvs.GetNotes(searchTerm);
               //dataSvs.selectedNCNotes = dataSvs.selectedNCNotes.Where(n => n.Text.Contains(searchTerm)).ToList();
           }
           StateHasChanged();
       });


        dataSvs.OnChange += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        dataSvs.newProjectDialog = true;

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");
            _dropZoneJS = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/dropZone.js");
            dataSvs.Wdimension = await _dropZoneJS.InvokeAsync<WindowDimension>("getWindowDimensions");

        }


    }


   
    public void Dispose()
    {
     
        dataSvs.OnChange -= StateHasChanged;
    }

    private void ShowNoteContextMenu(MouseEventArgs args,Note note)
    {
        ShowNoteContext = false;
        ContextMenuNote = null;
        // await Task.Delay(16);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuNote = note;
        ShowNoteContext = true;
    }


    public async Task AddUserSelectedNotes(Card card)
    {
        List<Note> UserSelectedNotes = dataSvs.selectedNCNotes.Where(sl => sl.Selected == true).ToList();
        await dataSvs.AddRangNoteCard(card, UserSelectedNotes);

        UserSelectedNotes.Select(nts => { nts.Selected = false; return nts; }).ToList();
    }

    private async Task AddNoteCard(Card card, Note note)
    {

        await dataSvs.NewNoteCard(card, note);

    }

    private async Task DeleteNote(Note note)
    {

        await dataSvs.DeleteNote(note);
        await dataSvs.GetNotes();
       
    }

    private async Task EditNote(Note note)
    {

        dataSvs.editNote = await dataSvs.GetNote(note);


        // await BackToMain.InvokeAsync("notetools");
        dataSvs.BitmapDrawed = false;
        //dataSvs.EditMode = true;
        dataSvs.SwitchMenus("notetools");

       

    }

    private string cardTitle { get; set; }

    private async Task AddCard()
    {
        if (!string.IsNullOrWhiteSpace(cardTitle))
        {
            // dataSvs.MainProject.Cards.Add(new Card { Title = cardTitle, Selected = true , ProjectFK = dataSvs.MainProject.ProjectID });
            // await  dataSvs.UpdateProject();
            await dataSvs.AddCard(new Card { Title = cardTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
            cardTitle = "";
        }

        //  await dataSvs.GetCards();


    }

    private async Task AddCard(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter"){
            await Task.Delay(100);
            if (!string.IsNullOrWhiteSpace(cardTitle))
            {
               
                // dataSvs.MainProject.Cards.Add(new Card { Title = cardTitle, Selected = true , ProjectFK = dataSvs.MainProject.ProjectID });
                // await  dataSvs.UpdateProject();
                await dataSvs.AddCard(new Card { Title = cardTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
                cardTitle = "";


            }
        }
        
    }

    protected void OpenCloseDialog(bool dialogState)
    {


        dataSvs.newProjectDialog = dialogState;
      
    }


    @inject HttpClient Http

    private async Task<Stream> GetImageStreamAsync()
    {
        return await Http.GetStreamAsync(
            "https://avatars.githubusercontent.com/u/9141961");
    }


    private async Task TestSomthing()
    {

        // GDriveFilesDto result = await Http.GetFromJsonAsync<GDriveFilesDto>("files");
        // await localstorage.SetItemAsync("testStorage", "local storage data");
        /*
        *
        await sessionStorage.RemoveItemAsync("testStorage");
        string getlsData = await sessionStorage.GetItemAsync<string>("testStorage");
        */
        /*
         String imgBase64 = await _module.InvokeAsync<String>("pasteImage");
         byte[] bitArrayImg = Convert.FromBase64String(imgBase64.Substring(imgBase64.LastIndexOf(',') + 1));
         await File.WriteAllBytesAsync("path", bitArrayImg);
         */


        Stream imageStream = await GetImageStreamAsync();
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        var urlstrng = await _module.InvokeAsync<string>("imgStreamToSrc", dotnetImageStream);


    }

}