@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using BlazorApp1.Pages.Components
@using BlazorApp1.ViewModels; 
@using Blazored.LocalStorage
@inject IMessageService MessageService

@inherits LayoutComponentBase
@inject SharedDataService dataSvs
@inject ProjectViewModel ProjectVM

@inject ILocalStorageService localstorage

<div class="layout-container" >
    <!-- Side Section -->
    @if (dataSvs.MainProject.ProjectID != 0)
    {
    <div class="side-section font-class font-n1" style="width:@(SNSideSectionWidth)px;">
        <div class="brand-section">
            @* Brand Section *@
            <div style="display: grid; grid-template-columns: auto 1fr auto; align-items: center;">
                <img @onclick="ExpandCollapse" src="./images/sNotes_icon.png" />
                @if(!ProjectVM.Mini){
                @if (renameproject == false)
                {
                   <p  @ondblclick="EnableRenameProject" title="@dataSvs.MainProject.Name" class="text-center my-1 text-truncate text-white pe-1" >@(dataSvs.MainProject.Name)</p>

                }
                else
                {

                    <input type="text" class="mb-1 p-1 shadow rounded" style="background-color:white"
                   placeholder="Project Name" aria-label="Project Name"
                   aria-describedby="basic-addon2" @bind-value="dataSvs.MainProject.Name" @onkeypress="@((eventArg) => RenameProject(eventArg) )" @onfocusout="RenameProject">
                }
                <CircleIcon BackgroundColor="transparent" CircleRadius="30" Icon="mdi mdi-chevron-left" IconColor="black" IconSize="25" OnClick="ExpandCollapse" />
                }
            </div>
        </div>

    @if(!ProjectVM.Mini){

        <div class="navigation-section">
            @* Navigation Section *@

               <MNavDrawerHeader GoToMenu="@(dataSvs.SwitchMenus)" />

              
            
        </div>

        <div class="menu-section" style="width: inherit;@(dataSvs.menustatus =="notecards" ? "overflow: hidden;":"")" >
            @* Menu Section *@
             @switch (dataSvs.menustatus)
                {
                    case "mainmenu":
                        <SNNavMenu GoToMenu="@(dataSvs.SwitchMenus)" />

                        break;
                    case "collection":
                        

                            <CollectionsMenu GoToMenu="@(dataSvs.SwitchMenus)" />
                       
                        break;
                    case "cards":

                       
                            <CardsMenu BackToMain="@(dataSvs.SwitchMenus)" />

                        break;
                    case "notetools":
                        <NoteTools BackToMain="@(dataSvs.SwitchMenus)" />
                        break;
                    case "notecards":
                        <NoteCardsMenu BackToMain="@(dataSvs.SwitchMenus)" />

                        break;
                    default:

                        <SNNavMenu GoToMenu="@(dataSvs.SwitchMenus)" />
                        break;
                }

        </div>
    }    
    </div>
    }
    <!-- Main Section -->
    <div class="main-section p-1  container-fluid" style='width: 100%; '>
        
        @Body
    </div>
</div>

@code {

    //private bool _drawer = true;
    //private bool _mini = true;

    private bool renameproject;
    private int SNSideSectionWidth = 56;

    protected override void OnInitialized()
    {

        dataSvs.OnChange += StateHasChanged;

        MessageService.OnMessage += MessageHandler;
        ProjectVM.Mini = true;

    }

    protected override async Task OnInitializedAsync()
    {
        //await ProjectVM.SqliteEnsureDeletedAsync();
        await ProjectVM.RemoveSqliteCacheAsync();
    }

    private string tempName;
    private void EnableRenameProject()
    {
        renameproject = true;

        tempName = dataSvs.MainProject.Name;

    }

    private async Task RenameProject()
    {

        if (!string.IsNullOrWhiteSpace(dataSvs.MainProject.Name))
        {
            await ProjectVM.UpdateProject();

        }
        else
        {
            dataSvs.MainProject.Name = tempName;
            await ProjectVM.UpdateProject();
        }
        renameproject = false;
    }

    private async Task RenameProject(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            if (!string.IsNullOrWhiteSpace(dataSvs.MainProject.Name))
            {
                await ProjectVM.UpdateProject();

            }
            else
            {
                dataSvs.MainProject.Name = tempName;
                await ProjectVM.UpdateProject();
            }
            renameproject = false;
        }
    }

private async Task ExpandCollapse()
    {

        if (!ProjectVM.Mini)
        {
            SNSideSectionWidth = 56;

        }
        else
        {
            SNSideSectionWidth = 270;
            

        }
        ProjectVM.Mini = !ProjectVM.Mini;
        StateHasChanged();
        
    }



    public void CloseDialog(dynamic result)
    {
        StateHasChanged();
    }

    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }


    private void MessageHandler()
    {
        StateHasChanged();
    }


    private void OnCollapse()
    {
        StateHasChanged();
    }


}