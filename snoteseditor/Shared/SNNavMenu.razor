@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using System.Net.Http.Headers
@using System.Net.Mime
@using BlazorApp1.Pages.Components
@using BlazorApp1.ViewModels;
@using Blazored.SessionStorage

@inject SharedDataService dataSvs
@inject ProjectViewModel ProjectVM
@inject NoteViewModel NoteVM
@inject IJSRuntime JSRuntime

@inject ISessionStorageService sessionStorage

<div class=" w-100 px-2 mt-3  " >
<div class="mb-2 " >
    <SNSideIconButton BtnIcon="mdi mdi-image" OnClick="@NavMenuGoToColl" Title="Collections" Width="100%" Height="40px" HoverColor="#5e92f3" /> 
    
</div>
<div class=" mb-1 " >
    <SNSideIconButton BtnIcon="mdi mdi-tray-full" OnClick="@NavMenuGoToCards" Title="Packets" Width="100%" Height="40px" HoverColor="#5e92f3"  /> 
    
</div>
</div>


<div class="ms-2 mb-2 lh-sm position-absolute bottom-0 start-50 translate-middle-x w-100">
    <a style="display:block;" class="text-dark fs-6" href="TermsAndConditions">Terms and Conditions</a>

    <a style="display:block;" class="text-dark fs-6" href="PrivacyPolicy">Privacy Policy</a>

</div>


@code {
    private bool collsexpandSubNav;
    private bool cardsexpandSubNav;

    private bool renameproject;

    [Parameter]
    public EventCallback<string> GoToMenu { get; set; }

    protected override void OnInitialized()
    {

        dataSvs.OnChange += StateHasChanged;
    }

    IJSObjectReference _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

        }


    }


    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }

    private async Task NavMenuGoToColl()
    {
        await GoToMenu.InvokeAsync("collection");
        if (dataSvs.selectedNCNotes is null || dataSvs.selectedNCNotes.Count == 0)
        {
            await NoteVM.GetNotesAsync();
        }
        
       
    }

    


    private Task NavMenuGoToCards()
    {
        return GoToMenu.InvokeAsync("cards");
    }

    private Task NavMenuGoToNoteTools()
    {
        return GoToMenu.InvokeAsync("notetools");
    }

    private Task NavMenuGoToNoteCards()
    {
        return GoToMenu.InvokeAsync("notecards");
    }

    private string tempName;
    private void EnableRenameProject()
    {
        renameproject = true;

        tempName = dataSvs.MainProject.Name;

    }

    private async Task RenameProject()
    {

        if (!string.IsNullOrWhiteSpace(dataSvs.MainProject.Name))
        {
            await ProjectVM.UpdateProject();

        }
        else
        {
            dataSvs.MainProject.Name = tempName;
            await ProjectVM.UpdateProject();
        }
        renameproject = false;
    }


}

