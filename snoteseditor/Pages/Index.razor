@page "/"
@using BlazorApp1.Data
@using BlazorApp1.Pages.Components
@using System.Collections.ObjectModel
@inject Project newprjct;

@using BlazorApp1.Helpers
@using System.IO.Compression
@using BlazorApp1.ViewModels; 
@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json
@using System.ComponentModel
@using ReactiveUI
@using System.Reactive.Linq

@inject SharedDataService dataSvs
@inject NotesCollectionViewModel NotesCollectionVM
@inject PacketViewModel PacketVM
@inject NoteViewModel NoteVM
@inject ProjectViewModel ProjectVM
@inject ILocalStorageService localstorage1
@inject ISessionStorageService sessionStorage


@inject IJSRuntime JSRuntime




<PageTitle>@dataSvs.MainProject.Name</PageTitle>

<NavigationLock ConfirmExternalNavigation="@ProjectVM.ConfirmLeave">

</NavigationLock>

    @if (dataSvs.MainProject.ProjectID == 0 && dataSvs.UserAgent is not null)
    {
        <WelcomeScreen />

    }else{
        
@if (dataSvs.menustatus == "notetools")
{
   
   <NoteEditorView />
    
    
}
else if (dataSvs.menustatus == "cards")
{

    <ConfirmDialog @ref="PacketVM.deletePacketDialog" />

    <Modal @ref="PacketVM.movePacketTo_Modal" ShowCloseButton="false" HeaderCssClass="font-class gradient-blue"
        BodyCssClass="p-1" FooterCssClass="font-class" IsVerticallyCentered="true">
        <HeaderTemplate>
            @if (moveto_filterPackets == false)
            {
                <p class="m-2 text-h5 ">
                    Select Destination Packet
                </p>
            }
            else
            {
                <div class="input-group mx-1 shadow">
                    <input type="text" class="form-control " placeholder="Filter Packets" @bind-value:event=oninput
                        @bind-value="@dataSvs.FilterPacketsTxt" aria-describedby="filterpktbtnGroup">
                </div>
            }

        </HeaderTemplate>
        <BodyTemplate>
            <ul class="py-0 px-1 m-0 " style="max-height: 250px; width: 100%; list-style: none; overflow:auto ">
                <ListTemplate
                    Items="@(moveto_filterPackets ? dataSvs.SelectionCards.Where(sm => sm.Title.ToLower().Contains(dataSvs.FilterPacketsTxt.Trim().ToLower()) ).ToList() : dataSvs.SelectionCards)">
                    <RowTemplate Context="packet">
                        <SNPacketListItem Packet="@packet"
                            OnClick="() => PacketVM.SetParentPacket(packet,dataSvs.ContextMenuCard)" />

                    </RowTemplate>
                </ListTemplate>

            </ul>
        </BodyTemplate>
        <FooterTemplate>
            <div style=" display: flex; justify-content: space-between; width: 100%; ">
                <CircleIcon Icon="@(moveto_filterPackets ? "mdi mdi-filter-off-outline" : "mdi mdi-filter-outline")"
                    CircleRadius="35" IconSize="20"
                    OnClick='()=> {moveto_filterPackets = !moveto_filterPackets;dataSvs.FilterPacketsTxt = "";}' />
                <Button style="background-color: #1565c0; color: #e2e1fb;"
                    @onclick="OnHideMovePacketModalClick">Close</Button>
            </div>
        </FooterTemplate>
    </Modal>

}
else if (dataSvs.menustatus == "notecards")
{
    <NotePacketView />
}
else
{
<div  style="width: 100%;  " >

    
    <div
        style="display:@(dataSvs.showFilterNotes ? "flex" : "none"); justify-content: center; align-items: center;  height: 50px;">
        <SNSearchTextField OnClearClick="@(() => dataSvs.SearchTerm = "")" OnCloseClick="CloseSearch" />
    </div>

    <div style="background-color: transparent; max-width: 100%; height: 100vh; overflow-y: auto;"
     class="d-flex flex-row justify-content-evenly flex-wrap bd-highlight "
             @ref="_mainPg">


        <NotesTemplate Items="@(dataSvs.selectedNCNotes)">
            <NoteTemplate Context="note">
                    <div class="p-0 me-1 mb-1" @oncontextmenu:preventDefault="true"
                        @oncontextmenu="@( (args) => ShowNoteContextMenu(args,note))">
                        <SNoteCard  Note="@note" OnClick="() => NoteVM.StyleSelectNote(note)" Text="@note.Text"
                            ImageUrl="@note.Thumbnail" />
                    </div>
                
            </NoteTemplate>
        </NotesTemplate>

        @if (NoteVM.LastPageReached == false && dataSvs.showFilterNotes is false)
        {
            <div class="position-fixed bottom-0 start-50 translate-middle-x mb-2 p-0 ">

                <CircleIcon CircleRadius="40" Icon="mdi mdi-playlist-plus" IconSize="22" OnClick="LoadMoreNotes" />

            </div>

        }

    
    
    @if (dataSvs.selectedNCNotes.Exists(nt => nt.Selected == true))
    {
        <div class="p-0 " style="position:fixed; right: 24px;
    bottom: 8px;">
            <CircleIcon CircleRadius="40" Icon="mdi mdi-plus-box-multiple" IconSize="20" OnClick="AddToPacketGetPackets" />
        </div>
       
    }

 <Modal @ref="PacketVM.addNoteToPacket_Modal" ShowCloseButton="false" HeaderCssClass="font-class gradient-blue"
          
            BodyCssClass="p-1" FooterCssClass="font-class" IsVerticallyCentered="true">
            <HeaderTemplate>
                @if (filterPackets == false)
                {
                    <div class="input-group shadow">
                        <input type="text" class="form-control" placeholder="Add Packets" @bind-value="cardTitle"
                            @onkeypress="((eventArg) => AddPacket(eventArg)) " aria-describedby="addpktbtnGroup">
                        <button class="btn btn-primary" id="addpktbtnGroup" @onclick="AddPacket">
                            Add
                        </button>

                    </div>
                }
                else
                {
                    <div class="input-group shadow">
                        <input type="text" class="form-control" placeholder="Filter Packets" @bind-value:event=oninput
                            @bind-value="@dataSvs.FilterPacketsTxt" aria-describedby="filterpktbtnGroup">


                    </div>
                }


            </HeaderTemplate>
            <BodyTemplate>
                <ul class="py-0 px-1 m-0 " style="max-height: 250px; width: 100%; list-style: none; overflow:auto ">
                    <ListTemplate Items="@(filterPackets ? dataSvs.FiltredPackets : PacketVM.NotesToPackeList)">
                        <RowTemplate Context="packet">
                            <SNPacketListItem Packet="@packet" OnClick="() => AddUserSelectedNotes(packet)" />

                        </RowTemplate>

                    </ListTemplate>

                </ul>
            </BodyTemplate>
            <FooterTemplate>
                <div style=" display: flex; justify-content: space-between; width: 100%; ">
                    <CircleIcon Icon="@(filterPackets ? "mdi mdi-filter-off-outline" : "mdi mdi-filter-outline")"
                        CircleRadius="35" IconSize="20"
                        OnClick='()=> {filterPackets = !filterPackets;dataSvs.FilterPacketsTxt = "";}' />
                    <Button style="background-color: #1565c0; color: #e2e1fb;"
                        @onclick="OnHideNoteToPacketModalClick">Close</Button>

                </div>
            </FooterTemplate>
        </Modal>



    </div>
</div>

    }

    @if (ContextMenuNote != null)
    {
        <SNContextMenu @ref="snContextMenuNote" OnOutsideClick="HideContextMenu" Width="240">
            <SNListItem BtnIcon="mdi mdi-pencil-outline" Height="42" Title="Edit" OnClick="() => EditNote(ContextMenuNote)" Style="color:#2b2b2b;" Class="mb-1" />
            <SNListItem BtnIcon="mdi mdi-delete-outline" Height="42" Title="Delete" Style="color:#2b2b2b;" Class="mb-1"
                OnClick="() => DeleteNote(ContextMenuNote) " />

        </SNContextMenu>
    }


    <ConfirmDialog @ref="NotesCollectionVM.deleteNCDialog" />

  



}



@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }

    IJSObjectReference _module;
    IJSObjectReference _dropZoneJS;

    private ElementReference _mainPg;
    private bool _hasMore;

    [CascadingParameter]
    public Error? Error { get; set; }

    bool filterPackets;
    bool moveto_filterPackets;

    private Note? ContextMenuNote = null;
    double X = 0;
    double Y = 0;

    private string? filterNotes;

    protected override void OnInitialized()
    {

        dataSvs.WhenAnyValue(x => x.FilterPacketsTxt)
        .Throttle(TimeSpan.FromSeconds(1.5))
        .Subscribe(async FilterPacketsTxt =>
        {
            if (string.IsNullOrEmpty(FilterPacketsTxt))
            {
                dataSvs.FiltredPackets.Clear();
            }
            else
            {
                dataSvs.FiltredPackets = await PacketVM.GetPackets(FilterPacketsTxt);

            }
            StateHasChanged();
        });


        ProjectVM.OnChange += StateHasChanged;
        dataSvs.OnChange += StateHasChanged;
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");
            _dropZoneJS = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/dropZone.js");
            
            dataSvs.Wdimension = await _dropZoneJS.InvokeAsync<WindowDimension>("getWindowDimensions");
            dataSvs.Wdimension.Width = Math.Max(dataSvs.Wdimension.Width, 1024);
            Console.WriteLine($"the width of this windows is: {dataSvs.Wdimension.Width}");

            if (dataSvs.MainProject.ProjectID == 0)
            {
                dataSvs.UserAgent = await _module.InvokeAsync<string>("getBrowserName");

                //await ProjectVM.newProjectModal?.ShowAsync();

            }

        }

    }


    public void Dispose()
    {
        ProjectVM.OnChange -= StateHasChanged;
        dataSvs.OnChange -= StateHasChanged;
    }



    public async Task AddUserSelectedNotes(Packet packet)
    {
        List<Note> UserSelectedNotes = dataSvs.selectedNCNotes.Where(sl => sl.Selected == true).ToList();
        await dataSvs.AddRangNoteCard(packet, UserSelectedNotes);

        UserSelectedNotes.Select(nts => { nts.Selected = false; return nts; }).ToList();
         await OnHideNoteToPacketModalClick();
       

    }

    private async Task AddNoteCard(Packet card, Note note)
    {
        await dataSvs.NewNoteCard(card, note);
    }

    private async Task DeleteNote(Note note)
    {
        await HideContextMenu();
        await NoteVM.DeleteNoteImgFiles(note, false);
        await NoteVM.DeleteNote(note);
        dataSvs.selectedNCNotes.Remove(note);
    }

    private async Task EditNote(Note note)
    {
        await HideContextMenu();
        PacketVM.editNotePacketNote = false;
        dataSvs.editNote = await NoteVM.GetNote(note);
        dataSvs.SwitchMenus("notetools");

    }

    private string cardTitle { get; set; }

    private async Task AddPacket()
    {
        if (!string.IsNullOrWhiteSpace(cardTitle))
        {
            Packet newPacket = new Packet { Title = cardTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID };
            await PacketVM.AddPacket(newPacket);
            PacketVM.NotesToPackeList.Add(newPacket);
            cardTitle = "";
        }

    }

    private async Task AddPacket(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {
            await Task.Delay(100);
            if (!string.IsNullOrWhiteSpace(cardTitle))
            {

                Packet newPacket = new Packet { Title = cardTitle, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID };
                await PacketVM.AddPacket(newPacket);
                PacketVM.NotesToPackeList.Add(newPacket);
                cardTitle = "";


            }
        }

    }

    private async Task AddToPacketGetPackets()
    {
        filterPackets = false;
        dataSvs.FilterPacketsTxt = "";
        PacketVM.NotesToPackeList = await PacketVM.GetPackets(Pinned: true);
        await PacketVM.addNoteToPacket_Modal.ShowAsync();

    }

    void HaseMore()
    {
        //_hasMore = false;
        NoteVM.LastPageReached = true;
        StateHasChanged();
    }

    private async Task LoadMoreNotes()
    {
        /*
        List<Note> append = await NoteVM.GetNotes(dataSvs.selectedNCNotes.Count, 20);
        dataSvs.selectedNCNotes.AddRange(append) ;
        */
        await NoteVM.GetNotesAsync(dataSvs.selectedNCNotes.Count, 20, HaseMore);
        //_hasMore = append.Count > 0;
    }


    private async Task CloseSearch()
    {
        dataSvs.showFilterNotes = false;
        dataSvs.SearchTerm = "";
        await NoteVM.GetNotesAsync();
    }


    #region ContextMenuNote
    private SNContextMenu snContextMenuNote;

    private async Task ShowNoteContextMenu(MouseEventArgs e, Note note)
    {
        ContextMenuNote = note;
        await Task.Delay(10);
        //await snContextMenuNote.HideAsync();
        if(e.ClientY < dataSvs.Wdimension.Height - 98){
        await snContextMenuNote.ShowAsync(e.ClientX, e.ClientY); // Use ClientX and ClientY for correct positioning
        }else{
        await snContextMenuNote.ShowAsync(e.ClientX, e.ClientY-98); // Use ClientX and ClientY for correct positioning
       }
         dataSvs.SelectionCards = new();

    }

    private async Task HideContextMenu()
    {
        await snContextMenuNote.HideAsync();
    }

    #endregion

    private async Task OnHideMovePacketModalClick()
    {
        await PacketVM.movePacketTo_Modal.HideAsync();
    }

    private async Task OnHideNoteToPacketModalClick()
    {
        await PacketVM.addNoteToPacket_Modal.HideAsync();

    }

}