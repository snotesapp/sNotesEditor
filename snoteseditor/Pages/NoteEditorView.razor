@page "/noteditorview"
@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using BlazorApp1.ViewModels;
@using Microsoft.JSInterop
@using ReactiveUI
@using System.Reactive.Linq
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@using System.IO;
@using SkiaSharp
@using System.Text.Json
@using System.Globalization
@using System.Drawing
@using SkiaSharp.Views.Blazor
@inject SkiaServices skiaSvs
@inject NoteViewModel NoteVM
@inject SharedDataService dataSvs
@inject ProjectViewModel ProjectVM




<div class="mb-4" style="position: relative ;
   height:100% ;  border-radius: 5px; overflow:auto;">

            
            <div  @ref="dropZoneElement" 
                
                 style="position: absolute;top: 0;left: 50; 
                        width: @(dataSvs.editNote.MainImgWidth)px;
                        height:@(dataSvs.editNote.MainImgHeight)px;
                        touch-action:none;
                        background-color:@dataSvs.editNote.BackgroundColor;
                       z-index: 0   ;
                        "
                    @oncontextmenu="(args) => ShowCanvasContextMenu(args)"
                    @oncontextmenu:preventDefault="true"
                    @onpointermove="((de) => ImgDragOver(de))"
                 >


                @if (dataSvs.editNote.Images != null)
                {
                    <NoteCardsTemplate Items="dataSvs.editNote.Images">
                        <ImgTemplate Context="ncimg">
                            @if (ncimg.Selected == false)
                            {
                                <div class="position-absolute" style="left:@(ncimg.X)px;
                                                                     top:@(ncimg.Y)px; height:@(ncimg.Height)px;width:@(ncimg.Width)px "
                             @oncontextmenu="@(args => ShowImgContextMenu(args,ncimg))"
                             @oncontextmenu:preventDefault="true"
                                @oncontextmenu:stopPropagation>

                                    <img id="ncimage_@ncimg.NoteImageID" title="image_@(ncimg.NoteImageID)"
                                 @onclick="(() => SelectImage(ncimg))"
                                         class="rounded mx-auto d-block  "
                                         width="@ncimg.Width" height="@ncimg.Height"
                                         style="
                                        border:2px none gray;
                                        border-radius:6px"
                                         draggable="false"
                                         src="@ncimg.Location">

                                </div>

                            }
                            else
                            {
                                <div class="position-absolute" style="left:@(ncimg.X)px;
                                                                     top:@(ncimg.Y)px; height:@(ncimg.Height)px;width:@(ncimg.Width)px "
                             @oncontextmenu="@(args =>  ShowImgContextMenu(args,ncimg))"
                             @oncontextmenu:preventDefault="true"
                                @oncontextmenu:stopPropagation>


                                    <img id="ncimage_@ncimg.NoteImageID" @onclick="(() => UnSelectImage(ncimg))" title="image_@(ncimg.NoteImageID)"
                                 @onpointerdown="((de) => ImgDragStart(de,ncimg))"
                                 @onpointerup="((de) => ImgDragEnd(de,ncimg))"
                                         class="rounded mx-auto d-block  "
                                         width="@ncimg.Width" height="@ncimg.Height"
                                         style="

                                        border:2px dotted gray;
                                        border-radius:6px"
                                         draggable="false"
                                         src="@ncimg.Location">

                                    <div class="position-absolute top-100 start-100 translate-middle" draggable="true"
                                         style="cursor:nwse-resize;border-style:none solid solid none;width:15px;height:15px"
                                 @ondragstart="((re) => ResizeStart(re,ncimg))"
                                 @ondrag="((re) => ResizeMove(re,ncimg))"
                                 @ondragend="((re) => ResizeEnd(re,ncimg))">
                                    </div>


                                </div>
                            }


                        </ImgTemplate>

                    </NoteCardsTemplate>


                }

                
            </div>

            <SKCanvasView  
                    @ref="dataSvs.skiaView"  
                    OnPaintSurface="OnPaintSurface" 
                    IgnorePixelScaling="true"
                    AdditionalAttributes="@(new Dictionary<string, object> 
                    {
                        { "id", "noteeditcanvas" },
                        { "style", $"position: absolute; touch-action: none; pointer-events:{dataSvs.PointerEvent}; width:{dataSvs.editNote.MainImgWidth}px; height:{dataSvs.editNote.MainImgHeight}px; position: absolute;top: 0;left: 50;background-color:transparent;" },
                        { "onpointerdown", EventCallback.Factory.Create<PointerEventArgs>(this, OnPointerDown) },
                        { "onpointermove", EventCallback.Factory.Create<PointerEventArgs>(this, OnPointerMove) },
                        { "onpointerup", EventCallback.Factory.Create<PointerEventArgs>(this, OnPointerUp) },
                        { "onpointercancel", EventCallback.Factory.Create<PointerEventArgs>(this, OnPointerCancel) }
                    })">
            </SKCanvasView>


 <SNNoteSummary ReadOnly = "false" ShowOrHide="ExpandCollapseNoteSummary"/>

   
@if (ContextImg != null)
{

<SNContextMenu @ref="snImgcontextMenu" OnOutsideClick="HideImgContextMenu" Width="240" >
    <SNListItem BtnIcon="mdi mdi-magnify-plus-outline" Height="42" Title="ZoomIn" OnClick="() =>  ImgZoomIn(ContextImg)" Style="color:#2b2b2b;" Class="mb-1" />
    <SNListItem BtnIcon="mdi mdi-magnify-minus-outline" Height="42" Title="ZoomOut" OnClick="() => ImgZoomOut(ContextImg) " Style="color:#2b2b2b;" Class="mb-1" />
    <SNListItem BtnIcon="mdi mdi-image-remove" Height="42" Title="Remove" OnClick="() => RemoveNoteImg(ContextImg)" Style="color:#2b2b2b;" Class="mb-1" />          
                                         
</SNContextMenu>

}


<SNContextMenu @ref="snCanvasContext" OnOutsideClick="HideCanvasContextMenu" Width="240" >
    <SNListItem BtnIcon="mdi mdi-image-plus" Height="42" Title="Past Image" OnClick="() => PastClipboardImg()" Style="color:#2b2b2b;" Class="mb-1" />                               
</SNContextMenu>



<div @ref="@inputFileContainer">
    <InputFile style=" width: 0; height: 0; position:absolute; bottom:0px; overflow: hidden;" OnChange="@OnChange" multiple />
</div>


</div>








<ConfirmDialog @ref="NoteVM.saveNoteDialog" />

  

       



@code {

    ElementReference dropZoneElement;
    ElementReference inputFileContainer;

    IJSObjectReference _dropZoneJS;
    IJSObjectReference _dropzoneInstance;
    IJSObjectReference _module;

    [CascadingParameter]
    public Error? Error { get; set; }

    FilesAndDirectories filesAndDirectories;

    //New Image from Clipboard Properties
    string imgsrc;

    //Zoom and Drag Properties
    private int pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
    NoteImage dragedNoteImage;
    bool dragstarted = false;

    int thumbWidth, thumbHeight;

    SKPoint? touchLocation;

    bool show = true;


    private NoteImage? ContextImg = null;
    private bool ShowImgContext;
    double X = 0;
    double Y = 0;
    

    protected override void OnInitialized()
    {
      
        filesAndDirectories = new FilesAndDirectories(dataSvs);
        ProjectVM.ConfirmLeave = true;
        dataSvs.OnChange += StateHasChanged;
        NoteVM.OnChange += StateHasChanged;

    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            //for load JS File
            _dropZoneJS = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/dropZone.js");
            // For Initialize the Drop Zone
            _dropzoneInstance = await _dropZoneJS.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFileContainer);
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

            //dataSvs.Wdimension = await _dropZoneJS.InvokeAsync<WindowDimension>("getWindowDimensions");

            dataSvs.editNote.MainImgWidth = Math.Max(dataSvs.Wdimension.Width,dataSvs.editNote.MainImgWidth);
            dataSvs.editNote.MainImgHeight = Math.Max(dataSvs.Wdimension.Height,dataSvs.editNote.MainImgHeight);

            dataSvs.saveBitmap = new SKBitmap(dataSvs.Wdimension.Width, dataSvs.Wdimension.Height);

            foreach (NotePath notePath in dataSvs.editNote.NotePaths)
            {

                dataSvs.completedPolylines.Add(new FingerPaintPolyline()
                    {
                        Path = SKPath.ParseSvgPathData(notePath.SvgPath),
                        StrokeBlendMode = Enum.Parse<SKBlendMode>(notePath.StrokeBlendMode),
                        StrokeColor = SKColor.Parse(notePath.StrokeColor),
                        StrokeWidth = notePath.StrokeWidth

                    });


                //  dataSvs.saveBitmap = SKBitmap.Decode(dataSvs.editNote.MainImg);
            }


            /*
            *
            else
            {
            dataSvs.editNote.MainImgWidth = dataSvs.Wdimension.Width;
            dataSvs.editNote.MainImgHeight = dataSvs.Wdimension.Height;

            dataSvs.saveBitmap = new SKBitmap(dataSvs.Wdimension.Width, dataSvs.Wdimension.Height);

         }
         *
         */

            StateHasChanged();

        }


    }

    // Unregister the drop zone events
    public async ValueTask DisposeAsync()
    {
        if (_dropzoneInstance != null)
        {
            await _dropzoneInstance.InvokeVoidAsync("dispose");
            await _dropzoneInstance.DisposeAsync();

        }
        if (_dropZoneJS != null)
        {
            await _dropZoneJS.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }


    #region Images

    private bool resizing;
    private int startOffsetX;
    private int startOffsetY;
    private void ResizeStart(DragEventArgs re, NoteImage _noteImage)
    {
        resizing = true;

        re.DataTransfer.DropEffect = "move";
        startOffsetX = (int)re.OffsetX;
        startOffsetY = (int)re.OffsetY;


    }
    private void ResizeMove(DragEventArgs re, NoteImage _noteImage)
    {

        if (resizing)
        {
            _noteImage.Width += (int)re.OffsetX;
            _noteImage.Height += (int)re.OffsetY;

        }


    }
    private void ResizeEnd(DragEventArgs re, NoteImage _noteImage)
    {

        resizing = false;

    }
    private void ImgDragStart(PointerEventArgs de, NoteImage _noteImage)
    {

        dragstarted = true;

        dragedNoteImage = _noteImage;

        // get the mouse cursor position at startup:
        pos3 = Convert.ToInt16(de.ClientX);
        pos4 = Convert.ToInt16(de.ClientY);

    }
    private void ImgDragEnd(PointerEventArgs de, NoteImage _noteImage)
    {
        dragstarted = false;
        _noteImage.X = dragedNoteImage.X;
        _noteImage.Y = dragedNoteImage.Y;


    }
    private void ImgDragOver(PointerEventArgs de)
    {

        if (dragstarted)
        {

            pos1 = pos3 - Convert.ToInt16(de.ClientX);
            pos2 = pos4 - Convert.ToInt16(de.ClientY);
            pos3 = Convert.ToInt16(de.ClientX);
            pos4 = Convert.ToInt16(de.ClientY);
            // set the element's new position:
            if ((dragedNoteImage.X - pos1) >= 0 && (dragedNoteImage.Y - pos2) >= 0 && (dragedNoteImage.X - pos1) <= (dataSvs.Wdimension.Width - dragedNoteImage.Width) && (dragedNoteImage.Y - pos2) <= (dataSvs.Wdimension.Height - dragedNoteImage.Height))
            {
                dragedNoteImage.X = dragedNoteImage.X - pos1;
                dragedNoteImage.Y = dragedNoteImage.Y - pos2;

            }


        }



    }
    private void ImgZoomIn(NoteImage _noteImage)
    {
        if ((_noteImage.X + _noteImage.Width) < dataSvs.Wdimension.Width && (_noteImage.Y + _noteImage.Height) < dataSvs.Wdimension.Height)
        {

            _noteImage.Width += (_noteImage.Width * 2 / 100);
            _noteImage.Height += (_noteImage.Height * 2 / 100);

        }

    }
    private void ImgZoomOut(NoteImage _noteImage)
    {
        _noteImage.Width -= (_noteImage.Width * 2 / 100); ;
        _noteImage.Height -= (_noteImage.Height * 2 / 100); ;


    }
    private void SelectImage(NoteImage _noteImage)
    {

        dataSvs.editNote.Images.Where(s => s.Selected).Select(s => { s.Selected = false; return s; }).ToList();
        _noteImage.Selected = true;


    }
    private void UnSelectImage(NoteImage _noteImage)
    {

        _noteImage.Selected = false;
        skiaSvs.UpdateBitmap();

    }
    #endregion

    #region Drawing

    SKPaint paint = new SKPaint
        {
            Style = SKPaintStyle.Stroke,
            IsAntialias = true,
            StrokeCap = SKStrokeCap.Round,
            StrokeJoin = SKStrokeJoin.Round,
            FilterQuality = SKFilterQuality.High,
            BlendMode = SKBlendMode.SrcOver,

            //   Color = SKColors.Red,
            //   StrokeWidth = 8

            PathEffect = SKPathEffect.CreateCorner(45)

        };



    void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {

        SKImageInfo info = args.Info;
        SKSurface surface = args.Surface;
        SKCanvas canvas = args.Surface.Canvas;

        canvas.Clear(SKColors.Transparent);


        foreach (FingerPaintPolyline polyline in dataSvs.completedPolylines)
        {

            paint.Color = polyline.StrokeColor;
            paint.StrokeWidth = polyline.StrokeWidth;
            paint.BlendMode = polyline.StrokeBlendMode;

            canvas.DrawPath(polyline.Path, paint);


        }

        foreach (FingerPaintPolyline polyline in dataSvs.inProgressPolylines.Values)
        {

            paint.Color = polyline.StrokeColor;
            paint.StrokeWidth = polyline.StrokeWidth;
            paint.BlendMode = polyline.StrokeBlendMode;

            canvas.DrawPath(polyline.Path, paint);

        }
        dataSvs.paintSKCanvas = canvas;

    }

    bool ereaseEnabled = false;
    void OnPointerDown(PointerEventArgs e)
    {

        switch (dataSvs.paintMode)
        {
            case PaintMode.Drag:
                break;
            case PaintMode.Pen:
                if (!dataSvs.inProgressPolylines.ContainsKey(e.PointerId))
                {
                    SKColor strokeColor = dataSvs.selectedColor;

                    FingerPaintPolyline polyline = new FingerPaintPolyline
                        {
                            StrokeColor = strokeColor,
                            StrokeWidth = dataSvs.strokeWidth,
                            StrokeBlendMode = SKBlendMode.SrcOver,

                        };

                    polyline.Path.MoveTo(new SKPoint((float)e.OffsetX, (float)e.OffsetY));
                    dataSvs.inProgressPolylines.Add(e.PointerId, polyline);
                    dataSvs.skiaView.Invalidate();
                }

                break;
            case PaintMode.Eraser:
                ereaseEnabled = true;
                break;
            default:
                break;
        }

    }


    void OnPointerMove(PointerEventArgs e)
    {

        try
        {
            switch (dataSvs.paintMode)
            {
                case PaintMode.Drag:
                    break;
                case PaintMode.Pen:
                    if (dataSvs.inProgressPolylines.ContainsKey(e.PointerId))
                    {
                        FingerPaintPolyline polyline = dataSvs.inProgressPolylines[e.PointerId];
                        polyline.Path.LineTo(new SKPoint((float)e.OffsetX, (float)e.OffsetY));
                        dataSvs.skiaView.Invalidate();
                    }
                    break;
                case PaintMode.Eraser:
                    if (ereaseEnabled && dataSvs.completedPolylines.Count > 0)
                    {

                        FingerPaintPolyline? deletePath = dataSvs.completedPolylines.Find(p => paint.GetFillPath(p.Path).Contains((float)e.OffsetX, (float)e.OffsetY));


                        if (deletePath is not null)
                        {

                            dataSvs.completedPolylines.Remove(deletePath);
                            NotePath notePath = dataSvs.editNote.NotePaths.Where(pth => pth.SvgPath == deletePath.Path.ToSvgPathData()).FirstOrDefault();
                            if (notePath.PathID == 0)
                            {
                                dataSvs.editNote.NotePaths.Remove(notePath);
                            }
                            else
                            {
                                NoteVM.DeleteNotePath(notePath).GetAwaiter().GetResult();
                            }


                            dataSvs.skiaView.Invalidate();
                        }


                    }

                    break;
                default:
                    break;
            }

        }
        catch (Exception ex)
        {

            Error?.ProcessError(ex);
        }



    }

    void OnPointerUp(PointerEventArgs e)
    {
        switch (dataSvs.paintMode)
        {
            case PaintMode.Drag:
                break;
            case PaintMode.Pen:
                if (dataSvs.inProgressPolylines.ContainsKey(e.PointerId))
                {

                    dataSvs.completedPolylines.Add(dataSvs.inProgressPolylines[e.PointerId]);

                    NotePath notePath = new NotePath()
                        {
                            SvgPath = dataSvs.inProgressPolylines[e.PointerId].Path.ToSvgPathData(),
                            StrokeBlendMode = dataSvs.inProgressPolylines[e.PointerId].StrokeBlendMode.ToString(),
                            StrokeColor = dataSvs.inProgressPolylines[e.PointerId].StrokeColor.ToString(),
                            StrokeWidth = (int)dataSvs.inProgressPolylines[e.PointerId].StrokeWidth
                        };

                    dataSvs.editNote.NotePaths.Add(notePath);

                    dataSvs.inProgressPolylines.Remove(e.PointerId);

                    skiaSvs.UpdateBitmap();

                }





                break;
            case PaintMode.Eraser:

                ereaseEnabled = false;
                break;
            default:
                break;
        }

        skiaSvs.UpdateBitmap();
    }

    void OnPointerCancel(PointerEventArgs e)
    {
        switch (dataSvs.paintMode)
        {
            case PaintMode.Drag:
                break;
            case PaintMode.Pen:
                if (dataSvs.inProgressPolylines.ContainsKey(e.PointerId))
                {
                    dataSvs.inProgressPolylines.Remove(e.PointerId);
                    dataSvs.skiaView.Invalidate();
                }
                break;
            case PaintMode.Eraser:
                ereaseEnabled = false;
                break;
            default:
                break;
        }



    }


    #endregion

    



    private async Task RemoveNoteImg(NoteImage noteImage)
    {
        try
        {
            if (File.Exists(noteImage.ImgURI))
            {
                using (FileStream stream = File.Open(noteImage.ImgURI, FileMode.Open))
                {
                    stream.Close();
                    File.Delete(noteImage.ImgURI);
                }
            }
            if (noteImage.NoteImageID == 0)
            {
                dataSvs.editNote.Images.Remove(noteImage);
            }
            else
            {
                await NoteVM.DeleteNoteImg(noteImage);
            }
        }
        catch (IOException ex)
        {
            Error?.ProcessError(ex);
        }
        finally
        {
            ContextImg = null;
           
        }
    }


    #region add Image


    async Task OnChange(InputFileChangeEventArgs e)
    {
        if (dragstarted == false)
        {
            long maxFileSize = 1024 * 1024 * 15;
            var files = e.GetMultipleFiles();

            foreach (var file in files)
            {
                using Stream stream = file.OpenReadStream(maxFileSize);

                // Get the file name
                var fileName = file.Name;
                // var fileName = Guid.NewGuid().ToString();
                string fPath = filesAndDirectories.CreateImagePath(dataSvs.editNote.NotesCollectionFK.ToString(), fileName);
                await filesAndDirectories.SaveImageLocaly(fPath, stream);

                SaveImage(fPath, file.ContentType);
                skiaSvs.UpdateBitmap();
                await stream.DisposeAsync();
            }

        }


    }


    async Task PastClipboardImg()
    {

        try
        {
            String imgBase64 = await _module.InvokeAsync<String>("pasteImage");
            byte[] bitArrayImg = Convert.FromBase64String(imgBase64.Substring(imgBase64.LastIndexOf(',') + 1));

            string collId = dataSvs.editNote.NotesCollectionFK.ToString();
            string fPath = filesAndDirectories.CreateImagePath(collId, "clipedimage");
            await filesAndDirectories.SaveImageLocaly(fPath, bitArrayImg);

            Stream stream = new MemoryStream(bitArrayImg);
            var dotnetImageStream = new DotNetStreamReference(stream);

            var imageUrl = await _module.InvokeAsync<string>("imgStreamToSrc", dotnetImageStream);

            SaveImage(fPath, "image/png");
           


        }
        catch (Exception ex)
        {
            
            Error?.ProcessError(ex);
        }
        
        await HideCanvasContextMenu();
           
            

    }

    private void SaveImage(string fPath, string ContentType)
    {
        SKBitmap sKBitmapImg = SKBitmap.Decode(fPath);

        dataSvs.editNote.Images.Add(new NoteImage()
            {
                ImgLocationType = ImgLocationType.Local,
                X = 10,
                Y = 10,
                ImgContentType = ContentType,
                ImgURI = fPath,
                Width = sKBitmapImg.Width,
                Height = sKBitmapImg.Height

            });


        skiaSvs.UpdateBitmap();

        StateHasChanged();
        dataSvs.EnableHand();
    }
    #endregion



#region CanvasContextMenu
private SNContextMenu snCanvasContext;


private async Task ShowCanvasContextMenu(MouseEventArgs e)
{
    try
    {
        if (snImgcontextMenu is not null)
        {
            await HideImgContextMenu();
        }

        // Get the bounding rectangle of the div 
        var containerRect = await  JSRuntime.InvokeAsync<BoundClientRect>("getBoundClientRect", dropZoneElement );
        await Task.Delay(10);
        // Adjust ClientX and ClientY to be relative to the container
        var relativeX = e.ClientX - containerRect.Left;
        var relativeY = e.ClientY - containerRect.Top;

        if(e.ClientY < dataSvs.Wdimension.Height - 52){
            await snCanvasContext.ShowAsync(relativeX, relativeY); // Use adjusted values for correct positioning
        }else{
            await snCanvasContext.ShowAsync(relativeX, relativeY-52); // Use adjusted values for correct positioning
        }
    
        
    }
    catch (Exception ex)
    {
        Error?.ProcessError(ex);
    }
}

    private async Task HideCanvasContextMenu()
    {
        try
        {
            await snCanvasContext.HideAsync();
        }
        catch (Exception ex)
        {
            
            Error?.ProcessError(ex);
        }
        
    }

#endregion
  

#region ImgContextMenu
    private SNContextMenu snImgcontextMenu;

private async Task ShowImgContextMenu(MouseEventArgs e, NoteImage noteImage)
    {
        try
        {
            if(snCanvasContext is not null){
            await HideCanvasContextMenu();
            }

            ContextImg = noteImage; 
            
            // Get the bounding rectangle of the div
            var containerRect = await  JSRuntime.InvokeAsync<BoundClientRect>("getBoundClientRect", dropZoneElement );
            await Task.Delay(10);
            // Adjust ClientX and ClientY to be relative to the container
            var relativeX = e.ClientX - containerRect.Left;
            var relativeY = e.ClientY - containerRect.Top;

            if(e.ClientY < dataSvs.Wdimension.Height - 150){
            await snImgcontextMenu.ShowAsync(relativeX, relativeY); // Use adjusted values for correct positioning
            }else{
            await snImgcontextMenu.ShowAsync(relativeX, relativeY-144); // Use adjusted values for correct positioning
            }
            
        }
        catch (Exception ex)
        {
            
            Error?.ProcessError(ex);
        }    
    }

    private async Task HideImgContextMenu()
    {
        try
        {
            skiaSvs.UpdateBitmap();
            await snImgcontextMenu.HideAsync();
        }
        catch (Exception ex)
        {
            
            Error?.ProcessError(ex);
        }
        
    }

private void ExpandCollapseNoteSummary(){
    NoteVM.showNoteSummary = ! NoteVM.showNoteSummary;
    StateHasChanged();
}

#endregion
  


    public void Dispose()
    {
        dataSvs.OnChange -= StateHasChanged;
        NoteVM.OnChange -= StateHasChanged;
    }


public struct BoundClientRect
{
    public double Top { get; set; }
    public double Left { get; set; }
}

}

