@using BlazorApp1.Data
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

@using BlazorApp1.Helpers
@using BlazorApp1.ViewModels;
@inject SharedDataService dataSvs
@inject NotesCollectionViewModel NotesCollectionVM
@inject NoteViewModel NoteVM


<div class="w-100 px-2 my-2 " style="height:100%;" >
    <ListTemplate Items="dataSvs.MainProject.NotesCollection">
        <RowTemplate Context="coll">

            @if (coll.Editable == false)
            {
                <div class=" mb-1 " @oncontextmenu:preventDefault="true"
                    @oncontextmenu="@(args => ShowNCContextMenu(args,coll))">
                    <SNCollectionListItem NotesCollection="@coll" OndblClick="() => SetCollection(coll)" />

                </div>

            }
            else
            {

                <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                    placeholder="Collection Name" aria-label="Collection Name" aria-describedby="basic-addon2"
                    @bind-value="coll.Title" @onfocusout="() => SaveCollectionName(coll)">

            }

        </RowTemplate>

    </ListTemplate>

</div>




@if (ContextMenuNotesCollection != null)
{
    <SNContextMenu @ref="snNCContextMenu" OnOutsideClick="HideContextMenu" Width="240">
        <SNListItem BtnIcon="mdi mdi-shape-rectangle-plus" Height="42" Title="Add Notes" Style="color:#2b2b2b;" Class="mb-1"
            OnClick="() => AddNCNotes(ContextMenuNotesCollection)" />
        @if (ContextMenuNotesCollection.Selected == true)
        {
            <SNListItem BtnIcon="mdi mdi-checkbox-blank-outline" Height="42" Title="UnSelect" Style="color:#2b2b2b;" Class="mb-1"
                OnClick="() => SetCollection(ContextMenuNotesCollection)" />
        }
        else
        {
            <SNListItem BtnIcon="mdi mdi-checkbox-marked-outline" Height="42" Title="Select" Style="color:#2b2b2b;" Class="mb-1"
                OnClick="() => SetCollection(ContextMenuNotesCollection)" />
        }
        <SNListItem BtnIcon="mdi mdi-form-textbox" Height="42" Title="Rename" Style="color:#2b2b2b;" Class="mb-1"
            OnClick="() => RenameCollection(ContextMenuNotesCollection) " />
        <SNListItem BtnIcon="mdi mdi-delete-outline" Height="42" Title="Delete" OnClick="ShowDeleteNCDialog" Style="color:#2b2b2b;" Class="mb-1" />




    </SNContextMenu>
}




@code {

    IJSObjectReference module;

    [Parameter]
    public EventCallback<string> GoToMenu { get; set; }

    private string editNCTitle { get; set; }

    private NotesCollection? ContextMenuNotesCollection = null;

    double X = 0;
    double Y = 0;

    private Task GoToMainMenu()
    {

        return GoToMenu.InvokeAsync("mainmenu");
    }

    protected override void OnInitialized()
    {
        dataSvs.OnChange += StateHasChanged;
        NotesCollectionVM.OnChange += StateHasChanged;
    }

    private bool GetNoteIsRunning;
    private async Task SetCollection(NotesCollection nc)
    {
        if (GetNoteIsRunning == false)
        {

            GetNoteIsRunning = true;

            if (nc.Selected == true)
            {
                nc.Selected = false;
                await NotesCollectionVM.UpdateNotesCollection(nc);
            }
            else
            {
                nc.Selected = true;
                await NotesCollectionVM.UpdateNotesCollection(nc);
            }


            await NoteVM.GetNotesAsync();
            GetNoteIsRunning = false;
        }
    }

    private Task AddNCNotes(NotesCollection notesCollection)
    {

        dataSvs.AddNotesSelectedNC = notesCollection;
        dataSvs.editNote = new Note()
            {
                NotesCollectionFK = notesCollection.NotesCollectionID,
                Images = new List<NoteImage>(),
                NotePaths = new List<NotePath>(),
                BackgroundColor = dataSvs.noteBackgroundColor,
            };



        return GoToMenu.InvokeAsync("notetools");

    }

    #region Rename Collection
    string oldname;
    async Task RenameCollection(NotesCollection notesCollection)
    {
        await snNCContextMenu.HideAsync();
        dataSvs.MainProject.NotesCollection.Select(ed => { ed.Editable = false; return ed; }).ToList();
        oldname = notesCollection.Title;

        notesCollection.Editable = true;

    }
    async Task ShowDeleteNCDialog()
    {
        await snNCContextMenu.HideAsync();
        //dataSvs.showDeleteNCConfirmation = true;
        dataSvs.ContextMenuNotesCollection = ContextMenuNotesCollection;
         var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                NoButtonColor = ButtonColor.Primary,
                YesButtonColor = ButtonColor.Primary,
                HeaderCssClass = "headeralertdialog",
                DialogCssClass = "sn-dialog"
            };
        var confirmation = await NotesCollectionVM.deleteNCDialog.ShowAsync(
        title: "Delete Collection",
        message1: "Confirm deleting collection with all notes inside?",
        confirmDialogOptions: options);

        if (confirmation)
        {
            await NotesCollectionVM.DeleteNotesCollection(dataSvs.ContextMenuNotesCollection);
        }
        else
        {
            // do something
        }
    }

    private async Task SaveCollectionName(NotesCollection nc)
    {
        if (!string.IsNullOrWhiteSpace(nc.Title))
        {
            await NotesCollectionVM.UpdateNotesCollection(nc);

        }
        else
        {
            nc.Title = oldname;
        }
        nc.Editable = false;

    }
    #endregion


    public void Dispose()
    {
        dataSvs.OnChange -= StateHasChanged;
        NotesCollectionVM.OnChange -= StateHasChanged;


    }


    #region ContextMenu
    private SNContextMenu snNCContextMenu;




    private async Task ShowNCContextMenu(MouseEventArgs e, NotesCollection notesCollection)
    {
        ContextMenuNotesCollection = notesCollection;
        await Task.Delay(10);
        await snNCContextMenu.HideAsync();
        dataSvs.SelectionCards = new();
        //184 is the hight of the contextmenu
        if(e.ClientY < dataSvs.Wdimension.Height - 184){
        await snNCContextMenu.ShowAsync(e.ClientX, e.ClientY); // Use ClientX and ClientY for correct positioning
        }else{
        await snNCContextMenu.ShowAsync(e.ClientX, e.ClientY-184); // Use ClientX and ClientY for correct positioning
        }




    }


    private async Task HideContextMenu()
    {
        await snNCContextMenu.HideAsync();
    }

    #endregion


}