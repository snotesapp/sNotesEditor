@using BlazorApp1.Data
@using System.Collections.ObjectModel
@inject IJSRuntime JSRuntime

@using BlazorApp1.Helpers
@using BlazorApp1.ViewModels;
@inject SharedDataService dataSvs
@inject NotesCollectionViewModel NotesCollectionVM
@inject NoteViewModel NoteVM


<MContainer Style="height:calc(100vh - 140px); overflow:auto"  class="px-2">
 
        <MList>
            <ListTemplate Items="dataSvs.MainProject.NotesCollection">
                <RowTemplate Context="coll">

                    <div class=" mb-1">
                        @if (coll.Editable == false)
                        {

                            @if (coll.Selected == true)
                            {
                                <MListItem Link style="background-color:#1565c0" title="@coll.Title"
                                   @ondblclick="() => SetCollection(coll)"
                                   @oncontextmenu="@(args => { ShowNCContextMenu(args,coll);})"
                                   __internal_preventDefault_oncontextmenu
                                   Color="white" Class="elevation-4  rounded-3">
                                    <MListItemContent>
                                        <MListItemTitle> @coll.Title </MListItemTitle>
                                    </MListItemContent>
                                </MListItem>


                            }
                            else
                            {

                                <MListItem Link style="background-color:#ffb07e" title="@coll.Title"
                                   @ondblclick="() => SetCollection(coll)"
                                   @oncontextmenu="@(args => { ShowNCContextMenu(args,coll);})"
                                   __internal_preventDefault_oncontextmenu
                                   Color="black" Class="elevation-4  rounded-3">
                                    <MListItemContent>
                                        <MListItemTitle> @coll.Title </MListItemTitle>
                                    </MListItemContent>
                                </MListItem>

                            }
                        }
                        else
                        {

                            <input type="text" class="list-group-item list-group-item-action mb-1 shadow rounded"
                               placeholder="Collection Name" aria-label="Collection Name"
                               aria-describedby="basic-addon2" @bind-value="coll.Title" @onfocusout="() => SaveCollectionName(coll)">

                        }

                    </div>


                </RowTemplate>

            </ListTemplate>

        </MList>

   



</MContainer>


@if (ContextMenuNotesCollection != null)
{
    <MMenu @bind-Value="ShowNCContext"
       PositionX="X"
       PositionY="Y"
       Absolute
       OffsetY
       CloseOnContentClick>
       <MList Dense Width="200">

            <MListItem OnClick="() => AddNCNotes(ContextMenuNotesCollection)">
                <MListItemIcon>
                    <MIcon>
                        mdi-shape-rectangle-plus
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        Add Notes
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            @if (ContextMenuNotesCollection.Selected == true)
            {
                <MListItem OnClick="() => SetCollection(ContextMenuNotesCollection)">
                    <MListItemIcon>
                        <MIcon>
                            mdi-checkbox-blank-outline
                        </MIcon>
                    </MListItemIcon>
                    <MListItemContent>
                        <MListItemTitle>
                            UnSelect
                        </MListItemTitle>
                    </MListItemContent>
                </MListItem>


            }
            else
            {
                <MListItem OnClick="() => SetCollection(ContextMenuNotesCollection)" >
                    <MListItemIcon>
                        <MIcon>
                            mdi-checkbox-marked-outline
                        </MIcon>
                    </MListItemIcon>
                    <MListItemContent>
                        <MListItemTitle>
                            Select
                        </MListItemTitle>
                    </MListItemContent>
                </MListItem>

            }

            <MListItem OnClick="() => RenameCollection(ContextMenuNotesCollection)">
                <MListItemIcon>
                    <MIcon>
                        mdi-form-textbox
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>

                    <MListItemTitle>
                        Rename
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            <MListItem OnClick="() =>{dataSvs.showDeleteNCConfirmation = true; dataSvs.ContextMenuNotesCollection = ContextMenuNotesCollection;}">
                <MListItemIcon>
                    <MIcon>
                        mdi-delete-outline
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>

                    <MListItemTitle>
                        Delete
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>


        </MList>
    </MMenu>


}



@code {

    IJSObjectReference module;

    [Parameter]
    public EventCallback<string> GoToMenu { get; set; }

    private string editNCTitle { get; set; }

    private NotesCollection? ContextMenuNotesCollection = null;
    private bool ShowNCContext;
    double X = 0;
    double Y = 0;

    private Task GoToMainMenu()
    {

        return GoToMenu.InvokeAsync("mainmenu");
    }

    protected override void OnInitialized()
    {
        dataSvs.OnChange += StateHasChanged;
        NotesCollectionVM.OnChange += StateHasChanged;
    }

    private async Task ShowNCContextMenu(MouseEventArgs args, NotesCollection notesCollection)
    {
        ContextMenuNotesCollection = null;
        ShowNCContext = false;
        await Task.Delay(1);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuNotesCollection = notesCollection;
        ShowNCContext = true;
        StateHasChanged();
    }

    private bool GetNoteIsRunning;
    private async Task SetCollection(NotesCollection nc)
    {
        if(GetNoteIsRunning == false)
        {

        GetNoteIsRunning = true;
        
        if (nc.Selected == true)
        {
            nc.Selected = false;
            await NotesCollectionVM.UpdateNotesCollection(nc);
        }
        else
        {
            nc.Selected = true;
            await NotesCollectionVM.UpdateNotesCollection(nc);
        }


        await NoteVM.GetNotesAsync();
        GetNoteIsRunning = false;
        }
    }

    private Task AddNCNotes(NotesCollection notesCollection)
    {

        dataSvs.AddNotesSelectedNC = notesCollection;
        dataSvs.editNote = new Note()
            {
                NotesCollectionFK = notesCollection.NotesCollectionID,
                Images = new List<NoteImage>(),
                NotePaths = new List<NotePath>(),
                BackgroundColor = dataSvs.noteBackgroundColor,
            };

           

        return GoToMenu.InvokeAsync("notetools");

    }

    #region Rename Collection
    string oldname;
    void RenameCollection(NotesCollection notesCollection)
    {

        dataSvs.MainProject.NotesCollection.Select(ed => { ed.Editable = false; return ed; }).ToList();
        oldname = notesCollection.Title;

        notesCollection.Editable = true;

    }

    private async Task SaveCollectionName(NotesCollection nc)
    {
        if (!string.IsNullOrWhiteSpace(nc.Title))
        {
            await NotesCollectionVM.UpdateNotesCollection(nc);

        }
        else
        {
            nc.Title = oldname;
        }
        nc.Editable = false;

    }
    #endregion


    public void Dispose()
    {
        dataSvs.OnChange -= StateHasChanged;
        NotesCollectionVM.OnChange -= StateHasChanged;


    }


}