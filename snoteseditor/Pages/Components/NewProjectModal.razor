@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using System.IO.Compression
@using System.Text.Json
@using BlazorApp1.ViewModels;
@using BlazorBootstrap;
@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using SkiaSharp;

@inject SharedDataService dataSvs
@inject NotesCollectionViewModel NotesCollectionVM
@inject NoteViewModel NoteVM
@inject ProjectViewModel ProjectVM
@inject NavigationManager navigation

@inject ILocalStorageService localstorage1
@inject ISessionStorageService sessionStorage

@inject IJSRuntime JSRuntime



<MCard Class="p-0  h-100 w-100">
   
     <MCardTitle Class="text-h5 gradient-blue">
                Create Project
    </MCardTitle>
    <MCard Flat Class="mx-3 py-4">

        <div class="input-group elevation-2 rounded-3 shadow mb-3">
            <span class="input-group-text" id="basic-addon1">
                <MIcon>
                    mdi-plus
                </MIcon>
            </span>
            <input type="text" class="form-control" placeholder="Project Name" @bind-value="projectname" aria-label="Project Name">
            <MButton Class="primary" aria-label="Create SNotes Project" title="Create SNotes Project"
                     OnClick="CreateProject">
                <MIcon>
                    mdi-play
                </MIcon>
            </MButton>

        </div>
        <MDivider />

       

        @if (dataSvs.UserAgent is null)
        {

             <b>

            </b>


        }
        else if (dataSvs.UserAgent.Contains("Mobile"))
        {
             <div class="mb-3 elevation-2 rounded-3 shadow">
              
                <InputFile class="form-control" title="Import SNotes File" type="file" accept=".snotes" id="sNotesFilePicker" OnChange="HandleFileSelected" />


            </div>


           

        }  
        else if (!(dataSvs.UserAgent.Contains("Firefox")) && !(dataSvs.UserAgent.Contains("Mobile")))
        {
            <MButton Class="primary elevation-2 rounded-3 shadow w-100 "
                 Loading="ProjectVM.Loader"
                 Disabled="ProjectVM.Loader"
                 OnClick="() => OpenZipFile()">

                <LoaderContent>
                    <span class="spinner-border spinner-border-sm"></span>
                </LoaderContent>
                <ChildContent>
                    <MIcon>
                        mdi-folder-open-outline
                    </MIcon>

                </ChildContent>

            </MButton>
        }
        else
        {

          
            <div class="mb-3 elevation-2 rounded-3 shadow">

                <InputFile class="form-control" title="Import SNotes File" type="file" accept=".snotes" id="sNotesFilePicker"
                           OnChange="HandleFileSelected" />


            </div>

           
        }




    </MCard>


    <MCardActions>

        <span class="w-100 text-dark" style="font-size:16px">
            By using this app, you are accepting the
            <a class="text-dark " href="TermsAndConditions">Terms and Conditions</a> and
            the <a class="text-dark " href="PrivacyPolicy">Privacy Policy</a>.

        </span>

    </MCardActions>
</MCard>






@code {
    IJSObjectReference _module;

    private GetProjectFileJS _getProjectFileJS;


    private string projectname { get; set; } = $"Project {DateTime.Now.ToString("dd'_'MM'_'yyyy'_'HH'_'mm")}";
    private string collectionname { get; set; } = "Default Collection";


    [Parameter]
    public EventCallback<bool> CloseDialoge { get; set; }



    protected override void OnInitialized()
    {
        _getProjectFileJS = new GetProjectFileJS(dataSvs, ProjectVM);
        ProjectVM.OnChange += StateHasChanged;
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");
            await _module.InvokeVoidAsync("registeGetProjectFileJSInstance", DotNetObjectReference.Create(_getProjectFileJS));

            dataSvs.UserAgent = await _module.InvokeAsync<string>("getBrowserName");
        }


    }

    private async Task HandleOnChange(IBrowserFile file)
    {
      

        await ProjectVM.OpenProject(file);
      

        StateHasChanged();
        

    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        await ProjectVM.OpenProject(e.File);


        StateHasChanged();

       
    }


    private async Task OpenZipFile()
    {

       
        await ProjectVM.OpenProject();
        
        StateHasChanged();

     

    }

    private async Task CreateProject()
    {


        dataSvs.MainProject.Name = projectname;

        dataSvs.ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");

        Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections/0/bitmaps");
        DirectoryInfo imagespth = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections/0/images");

        using (var bitmap = new SkiaSharp.SKBitmap(600, 400))
        {
            bitmap.Erase(SKColor.Parse("#FF7F50"));
            using (var canvas = new SkiaSharp.SKCanvas(bitmap))
            {
                var paint = new SkiaSharp.SKPaint()
                    {
                        Color = SKColors.Black,
                        TextSize = 20,
                        IsAntialias = true,
                        Typeface = SKTypeface.FromFamilyName("Arial")
                    };
                canvas.DrawText("Copyright © 2023 sNotes. All rights reserved.", 20, 100, paint);

            }
            using (var image = SkiaSharp.SKImage.FromBitmap(bitmap))
            using (var data = image.Encode(SkiaSharp.SKEncodedImageFormat.Jpeg, 100))
            {
                using (var stream = File.OpenWrite(imagespth.FullName + "/blanc.jpeg"))
                {
                    data.SaveTo(stream);
                }
            }
        }

       
        await ProjectVM.SqliteEnsureDeletedAsync();
        await ProjectVM.RemoveSqliteCacheAsync();      
        await ProjectVM.SqliteEnsureCreatedAsync();

        await ProjectVM.InsertProject(dataSvs.MainProject);
      
        NotesCollection defaultNC = new NotesCollection()
            {
                ProjectFK = dataSvs.MainProject.ProjectID,
                Title = collectionname,
                Selected = true,
                Note = new List<Note>()
            };

        await NotesCollectionVM.AddNotesCollection(defaultNC);
        NoteVM.AddNCNotes(defaultNC);
        
        await CloseDialoge.InvokeAsync(false);

        //await ProjectVM.newProjectModal.HideAsync();
    }

    public void Dispose()
    {

        ProjectVM.OnChange -= StateHasChanged;
    }


}
