@using BlazorApp1.Data
@using System.Collections.ObjectModel

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM
@inject ProjectViewModel ProjectVM
@using BlazorApp1.ViewModels;
@using BlazorComponent
@using Microsoft.JSInterop
@using ReactiveUI;
@using System.Reactive.Linq;
@inject IJSRuntime JSRuntime

@inject IMessageService MessageService


<MContainer Style="height:calc(100vh - 130px); overflow:auto" class="px-2">

   
        <div class="w-100 h-100 ">

            @if (!dataSvs.filterPackets)
            {
                <ListTemplate Items="dataSvs.MainProject.Packets">
                    <RowTemplate Context="packet">

                        @if (packet.Editable == false)
                        {
                            @if (packet.Selected)
                            { 
                                    <SNPacketListItem Packet ="@packet" OnClick="() => OpenPacket(packet)"  OnContextMenu="(args) => ShowCardContextMenu(args,packet)" />
                            }

                        }
                        else
                        {
                            <input  type="text" class="fs-6 lh-lg list-group-item list-group-item-action my-3 shadow rounded"
                                 style="text-indent: 10px;"
                                placeholder="Packet Name" aria-label="Packet Name"
                                aria-describedby="basic-addon2" @bind-value="packet.Title" @onfocusout="() => SavePacketName(packet)">
                            
                        }

                    </RowTemplate>

                </ListTemplate>

            }
            else
            {
                <ListTemplate Items="dataSvs.FiltredPackets">
                    <RowTemplate Context="packet">

                        @if (packet.Editable == false)
                        {
                            
                           <SNPacketListItem Packet ="@packet" OnClick="() => OpenPacket(packet)" OnContextMenu="(args) => ShowCardContextMenu(args,packet)" />

                        }
                        else
                        {
                            <input type="text" class="fs-6 lh-lg list-group-item list-group-item-action my-3  shadow rounded"
                            style="text-indent: 10px;"
                           placeholder="Packet Name" aria-label="Packet Name"
                           aria-describedby="basic-addon2" @bind-value="packet.Title" @onfocusout="() => SavePacketName(packet)">

                        }


                    </RowTemplate>

                </ListTemplate>

            }

        </div>

       

    

</MContainer>

@if (ContextMenuCard != null)
{
    <MMenu @bind-Value="ShowCardContext"
       PositionX="X"
       PositionY="Y"
       Absolute
       OffsetY
       CloseOnContentClick>
        <MList Dense Width="200">

            <MListItem OnClick="() => RenameCard(ContextMenuCard)">
                <MListItemIcon>
                    <MIcon>
                        mdi-form-textbox
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>

                    <MListItemTitle>
                        Rename
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            <MListItem OnClick="() =>{dataSvs.showDeletePacketConfirmation = true; dataSvs.ContextMenuCard = ContextMenuCard;}">
                <MListItemIcon>
                    <MIcon>
                        mdi-delete-outline
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        Delete
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            <MListItem OnClick="() => GetSelectionPackets(ContextMenuCard)">
                <MListItemIcon>
                    <MIcon>
                        mdi-subdirectory-arrow-right
                    </MIcon>
                </MListItemIcon>
                <MListItemContent>

                    <MListItemTitle>
                        Move To
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>

            @if (ContextMenuCard.Parent is not null)
            {

                @if (ContextMenuCard.Selected == true)
                {
                    <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-pin-off
                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>

                            <MListItemTitle>
                                UnPin Packet
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>

                    <MListItem OnClick="() => DetachSubPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-arrow-split-horizontal
                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>
                            <MListItemTitle>
                                Detach
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>



                }
                else
                {

                    <MListItem OnClick="() => PinPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-pin
                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>

                            <MListItemTitle>
                                Pin Packet
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>

                    <MListItem OnClick="() => DetachSubPacket(ContextMenuCard)">
                        <MListItemIcon>
                            <MIcon>
                                mdi-arrow-split-horizontal

                            </MIcon>
                        </MListItemIcon>
                        <MListItemContent>
                            <MListItemTitle>
                                Detach
                            </MListItemTitle>
                        </MListItemContent>
                    </MListItem>

                }

            }
        </MList>


    </MMenu>

}



@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }


    private string cardTitle { get; set; }
    private bool _hover;

    private bool showDeletePacketConfirmation = false;

    IJSObjectReference _module;

    private Packet? ContextMenuCard = null;
    private bool ShowCardContext;
    double X = 0;
    double Y = 0;

    //bool dialog;
    bool filterPackets;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

    }


    private Task GoToMainMenu()
    {

        return BackToMain.InvokeAsync("mainmenu");
    }


    private Task GoToNoteCardsMenu()
    {

        return BackToMain.InvokeAsync("notecards");


    }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        dataSvs.WhenAnyValue(x => x.FilterPacketsTxt)
      .Throttle(TimeSpan.FromSeconds(1.5))
      .Subscribe(async FilterPacketsTxt =>
      {
          if (string.IsNullOrEmpty(FilterPacketsTxt))
          {
              dataSvs.FiltredPackets.Clear();
          }
          else
          {
              dataSvs.FiltredPackets = await PacketVM.GetPackets(FilterPacketsTxt);

          }
          StateHasChanged();
      });

    }

    protected override async Task OnInitializedAsync()
    {

        dataSvs.MainProject = await ProjectVM.GetProject();
        
        
    }


    private async Task OpenPacket(Packet selectedPacket)
    {
        PacketVM.GetPrevOrNextPackets(selectedPacket, true);
        await PacketVM.GetPacket(selectedPacket);
        //await dataSvs.GetCard(selectedCard);
        if (dataSvs.SelectedCard.NotePackets.Count > 0)
        {

            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();
            MessageService.SendMessage();
        }
       

        await BackToMain.InvokeAsync("notecards");
    }

    private async Task ShowCardContextMenu(MouseEventArgs args, Packet card)
    {
        dataSvs.SelectionCards = new();

        ShowCardContext = false;
        ContextMenuCard = null;
        await Task.Delay(1);

        X = args.ClientX;
        Y = args.ClientY;
        ContextMenuCard = card;
        ShowCardContext = true;
        StateHasChanged();
    }

    private async Task GetSelectionPackets(Packet chPacket)
    {
        dataSvs.ContextMenuCard = chPacket;
        dataSvs.filterPackets = false;
        dataSvs.FilterPacketsTxt = "";
        dataSvs.SelectionCards = await PacketVM.GetSelectionPackets(chPacket);
        dataSvs.moveto_dialog = true;

    }

    #region Rename Card
    string oldname;
    void RenameCard(Packet card)
    {

        dataSvs.MainProject.Packets.Select(ed => { ed.Editable = false; return ed; }).ToList();
        oldname = card.Title;

        card.Editable = true;

    }

    private async Task SavePacketName(Packet packet )
    {
        if (!string.IsNullOrWhiteSpace(packet.Title))
        {
            await PacketVM.UpdatePacket(packet);


        }
        else
        {
            packet.Title = oldname;
        }
        packet.Editable = false;

    }
    #endregion

    private async Task PinPacket(Packet packet)
    {
        packet.Selected = !packet.Selected ; 

        await PacketVM.UpdatePacket(packet);

        ContextMenuCard = null;
    }

    private async Task DetachSubPacket(Packet packet)
    {
        packet.Parent = null;
        packet.ParentID = null;
        packet.Selected = true;
        await PacketVM.UpdatePacket(packet);
        // await dataSvs.GetCard(dataSvs.SelectedCard);
        await PacketVM.GetPacket(dataSvs.SelectedCard);
        ContextMenuCard = null;

    }


   
}