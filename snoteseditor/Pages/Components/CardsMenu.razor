@using BlazorApp1.Data
@using System.Collections.ObjectModel

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM
@inject ProjectViewModel ProjectVM
@using BlazorApp1.ViewModels;
@using Microsoft.JSInterop
@using ReactiveUI;
@using System.Reactive.Linq;
@inject IJSRuntime JSRuntime

@inject IMessageService MessageService

<div class=" w-100 px-2 my-2 " style="height:inherit; " >

    @if (!dataSvs.filterPackets)
    {
        <ListTemplate Items="dataSvs.MainProject.Packets">
            <RowTemplate Context="packet">

                @if (packet.Editable == false)
                {
                    @if (packet.Selected)
                    {
                        <div class=" mb-1 " @oncontextmenu:preventDefault="true"
                            @oncontextmenu="@(args => ShowCardContextMenu(args, packet))">

                            <SNPacketListItem Packet="@packet" OnClick="() => OpenPacket(packet)" />

                        </div>
                    }

                }
                else
                {
                    <input type="text" class="fs-6 lh-lg list-group-item list-group-item-action my-3 shadow rounded"
                        style="text-indent: 10px;" placeholder="Packet Name" aria-label="Packet Name"
                        aria-describedby="basic-addon2" @bind-value="packet.Title" @onfocusout="() => SavePacketName(packet)">

                }

            </RowTemplate>

        </ListTemplate>

    }
    else
    {
        <ListTemplate Items="dataSvs.FiltredPackets">
            <RowTemplate Context="packet">

                @if (packet.Editable == false)
                {

                    <div class=" mb-1 " @oncontextmenu:preventDefault="true"
                        @oncontextmenu="@(args => ShowCardContextMenu(args, packet))">

                        <SNPacketListItem Packet="@packet" OnClick="() => OpenPacket(packet)" />
                    </div>
                }
                else
                {
                    <input type="text" class="fs-6 lh-lg list-group-item list-group-item-action my-3  shadow rounded"
                        style="text-indent: 10px;" placeholder="Packet Name" aria-label="Packet Name"
                        aria-describedby="basic-addon2" @bind-value="packet.Title" @onfocusout="() => SavePacketName(packet)">

                }


            </RowTemplate>

        </ListTemplate>

    }

</div>




@if (ContextMenuCard != null)
{

    <SNContextMenu @ref="sncontextMenu" OnOutsideClick="HideContextMenu" Width="240">
        <SNListItem BtnIcon="mdi mdi-form-textbox" Height="42" Title="Rename" OnClick="() => RenameCard(ContextMenuCard)" Style="color:#2b2b2b;" Class="mb-1"/>
        <SNListItem BtnIcon="mdi mdi-delete-outline" Height="42" Title="Delete" OnClick="() => ShowDeleteDialog() " Style="color:#2b2b2b;" Class="mb-1" />
        <SNListItem BtnIcon="mdi mdi-subdirectory-arrow-right" Height="42" Title="Move To" Style="color:#2b2b2b;" Class="mb-1"
            OnClick="() => GetSelectionPackets(ContextMenuCard)" />
        @if (ContextMenuCard.Parent is not null)
        {
            @if (ContextMenuCard.Selected == true)
            {
                <SNListItem BtnIcon="mdi mdi-pin-off" Height="42" Title="UnPin Packet" OnClick="() => PinPacket(ContextMenuCard)" Style="color:#2b2b2b;" Class="mb-1" />
                <SNListItem BtnIcon="mdi mdi-arrow-split-horizontal" Height="42" Title="Detach" Style="color:#2b2b2b;" Class="mb-1"
                    OnClick="() => DetachSubPacket(ContextMenuCard)" />
            }
            else
            {

                <SNListItem BtnIcon="mdi mdi-pin" Height="42" Title="Pin Packet" OnClick="() => PinPacket(ContextMenuCard)" Style="color:#2b2b2b;" Class="mb-1" />
                <SNListItem BtnIcon="mdi mdi-arrow-split-horizontal" Height="42" Title="Detach" Style="color:#2b2b2b;" Class="mb-1"
                    OnClick="() => DetachSubPacket(ContextMenuCard)" />

            }
        }

    </SNContextMenu>

}


@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }


    private string cardTitle { get; set; }
    private bool _hover;

    private bool showDeletePacketConfirmation = false;

    IJSObjectReference _module;

    private Packet? ContextMenuCard = null;

    double X = 0;
    double Y = 0;

    //bool dialog;
    bool filterPackets;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

    }


    private Task GoToMainMenu()
    {

        return BackToMain.InvokeAsync("mainmenu");
    }


    private Task GoToNoteCardsMenu()
    {

        return BackToMain.InvokeAsync("notecards");


    }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        dataSvs.WhenAnyValue(x => x.FilterPacketsTxt)
        .Throttle(TimeSpan.FromSeconds(1.5))
        .Subscribe(async FilterPacketsTxt =>
        {
            if (string.IsNullOrEmpty(FilterPacketsTxt))
            {
                dataSvs.FiltredPackets.Clear();
            }
            else
            {
                dataSvs.FiltredPackets = await PacketVM.GetPackets(FilterPacketsTxt);

            }
            StateHasChanged();
        });

    }

    protected override async Task OnInitializedAsync()
    {

        dataSvs.MainProject = await ProjectVM.GetProject();
        PacketVM.OnChange += StateHasChanged;
        ProjectVM.OnChange += StateHasChanged;
        dataSvs.OnChange += StateHasChanged;

    }


    private async Task OpenPacket(Packet selectedPacket)
    {
        PacketVM.GetPrevOrNextPackets(selectedPacket, true);
        await PacketVM.GetPacket(selectedPacket);
        //await dataSvs.GetCard(selectedCard);
        if (dataSvs.SelectedCard.NotePackets.Count > 0)
        {

            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();
            MessageService.SendMessage();
        }


        await BackToMain.InvokeAsync("notecards");
    }


    private async Task GetSelectionPackets(Packet chPacket)
    {
        await HideContextMenu();
        dataSvs.ContextMenuCard = chPacket;
        dataSvs.filterPackets = false;
        dataSvs.FilterPacketsTxt = "";
        dataSvs.SelectionCards = await PacketVM.GetSelectionPackets(chPacket);
        await PacketVM.movePacketTo_Modal.ShowAsync();


        /*
        dataSvs.moveto_dialog = true;
        await HideContextMenu();
        */

    }

    #region Rename Card
    string oldname;
    async Task RenameCard(Packet card)
    {

        dataSvs.MainProject.Packets.Select(ed => { ed.Editable = false; return ed; }).ToList();
        oldname = card.Title;

        card.Editable = true;
        await HideContextMenu();

    }

    private async Task SavePacketName(Packet packet)
    {
        if (!string.IsNullOrWhiteSpace(packet.Title))
        {
            await PacketVM.UpdatePacket(packet);


        }
        else
        {
            packet.Title = oldname;
        }
        packet.Editable = false;

    }
    #endregion

    private async Task PinPacket(Packet packet)
    {
        packet.Selected = !packet.Selected;

        await PacketVM.UpdatePacket(packet);
        await HideContextMenu();
        ContextMenuCard = null;

    }

    private async Task DetachSubPacket(Packet packet)
    {
        packet.Parent = null;
        packet.ParentID = null;
        packet.Selected = true;
        await PacketVM.UpdatePacket(packet);
        // await dataSvs.GetCard(dataSvs.SelectedCard);
        await PacketVM.GetPacket(dataSvs.SelectedCard);
        await HideContextMenu();
        ContextMenuCard = null;


    }

    private async Task ShowDeleteDialog()
    {
        await HideContextMenu();
        dataSvs.ContextMenuCard = ContextMenuCard;

        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                NoButtonColor = ButtonColor.Primary,
                YesButtonColor = ButtonColor.Primary,
                HeaderCssClass = "headeralertdialog",
                DialogCssClass = "sn-dialog"
            };
        var confirmation = await PacketVM.deletePacketDialog.ShowAsync(
        title: "Delete Packet",
        message1: "This will delete this packet and all sub-packets",
        confirmDialogOptions: options);

        if (confirmation)
        {
            await PacketVM.DeletePacket(dataSvs.ContextMenuCard);
        }
        else
        {
            // do something
        }

        /*
        await HideContextMenu();
        dataSvs.showDeletePacketConfirmation = true;
        dataSvs.ContextMenuCard = ContextMenuCard;
        */
    }


    #region ContextMenu
    private SNContextMenu sncontextMenu;



    private async Task ShowCardContextMenu(MouseEventArgs e, Packet packet)
    {
        int crdcontextmenuhieght;
        if(packet.Parent is null){
            crdcontextmenuhieght = 144;
        }else{
            crdcontextmenuhieght = 236;
        }
        ContextMenuCard = packet;
        await Task.Delay(10);
        await sncontextMenu.HideAsync();
        dataSvs.SelectionCards = new();
        if(e.ClientY < dataSvs.Wdimension.Height - crdcontextmenuhieght){
        await sncontextMenu.ShowAsync(e.ClientX, e.ClientY); // Use ClientX and ClientY for correct positioning
        }else{
        await sncontextMenu.ShowAsync(e.ClientX, e.ClientY-crdcontextmenuhieght); // Use ClientX and ClientY for correct positioning
        }
        
    }

    private async Task HideContextMenu()
    {
        await sncontextMenu.HideAsync();
    }

    #endregion



    public void Dispose()
    {
        PacketVM.OnChange -= StateHasChanged;
        ProjectVM.OnChange -= StateHasChanged;
        dataSvs.OnChange -= StateHasChanged;
    }

}