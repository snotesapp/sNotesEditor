@using BlazorApp1.Data
@using System.Collections.ObjectModel

@using BlazorApp1.ViewModels;
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@using BlazorApp1.Helpers
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM
@inject ProjectViewModel ProjectVM
@inject NoteViewModel NoteVM
@inject IMessageService MessageService

<div class="mb-1" style="display: flex;
    flex-direction: column;   
    height: 100%; " >



<div class="w-100 px-2 mt-2 "  style="flex: 1; overflow: auto;">

    @if (PacketVM.NotesMenuSelected)
    {
        @if (dataSvs.ncDragingMode)
        {
            <SortableList   TItem="NotePacket"  Data="dataSvs.SelectedCard.NotePackets" Context="notecard"
                OnUpdate="@OnNoteCardListUpdate">
                <ItemTemplate >
                    
                    <div class="p-0 mb " @oncontextmenu:preventDefault="true"
                        @oncontextmenu="@( (args) => ShowNotePacketContextMenu(args,notecard))">
                        <SNoteCard Note="@notecard.Note"  Text="@notecard.Note.Text" Width="242"
                            ImageUrl="@notecard.Note.Thumbnail" />
                    </div>
                
                   
                </ItemTemplate>
            </SortableList>


            @if (ContextMenuNoteCard != null)
            {
                <SNContextMenu @ref="snNotePacketcontextMenu" OnOutsideClick="HideNPContextMenu" Width="240">

                    <SNListItem BtnIcon="mdi mdi-arrow-vertical-lock" Height="42" Title="Disable Sorting Mode" Style="color:#2b2b2b;" Class="mb-1"
                        OnClick="() => SetDragMode()" />
                </SNContextMenu>
            }

        }
        else
        {


            <ListTemplate Items="dataSvs.SelectedCard.NotePackets">
                <RowTemplate Context="notecard">

                    <div class="p-0 mb-1" @oncontextmenu:preventDefault="true"
                        @oncontextmenu="@( (args) => ShowNotePacketContextMenu(args,notecard))">
                        <SNoteCard Note="@notecard.Note"  Text="@notecard.Note.Text"
                            Width="242"
                            ImageUrl="@notecard.Note.Thumbnail" OnClick="()=> SelectNoteCard(notecard)" />
                    </div>
                

                </RowTemplate>

            </ListTemplate>

            @if (ContextMenuNoteCard != null)
            {
                <SNContextMenu @ref="snNotePacketcontextMenu" OnOutsideClick="HideNPContextMenu" Width="240">

                    <SNListItem BtnIcon="mdi mdi-swap-vertical" Height="42" Title="Enable Sorting Mode" Style="color:#2b2b2b;" Class="mb-1"
                        OnClick="() => SetDragMode()" />
                    <SNListItem BtnIcon="mdi mdi-pencil-outline" Height="42" Title="Edit" Style="color:#2b2b2b;" Class="mb-1"
                        OnClick="() => EditNCNote(ContextMenuNoteCard)" />
                    <SNListItem BtnIcon="mdi mdi-close" Height="42" Title="Remove" OnClick="() => DeleteNP(ContextMenuNoteCard)" Style="color:#2b2b2b;" Class="mb-1" />
                    <SNListItem BtnIcon="mdi mdi-transfer-down" Height="42" Title="Move Down To" Style="color:#2b2b2b;" Class="mb-1"
                        OnClick="() => MoveDownNP(ContextMenuNoteCard)" />



                </SNContextMenu>
            }



        }


    }
    else
    {

        
            @if (dataSvs.CurrentPacketsSet.Count > 0)
            {


                <ListTemplate Items="dataSvs.CurrentPacketsSet">

                    <RowTemplate Context="packet">
                        <div class=" mb-1 " @oncontextmenu:preventDefault="true"
                            @oncontextmenu="@(args => ShowCardContextMenu(args, packet))">

                            <SNPacketListItem Packet="@packet" OnClick="() => SelectChildPacket(packet)" />
                        </div>
                    </RowTemplate>

                </ListTemplate>


            }

        

        @if (ContextMenuCard != null)
        {
            <SNContextMenu @ref="snPacketcontextMenu" OnOutsideClick="HideContextMenu" Width="240">

                @if (ContextMenuCard.Selected == true)
                {
                    <SNListItem BtnIcon="mdi mdi-pin-off" Height="42" Title="UnPin Packet" Style="color:#2b2b2b;" Class="mb-1"
                        OnClick="() => PinPacket(ContextMenuCard)" />
                    <SNListItem BtnIcon="mdi mdi-arrow-split-horizontal" Height="42" Title="Detach" Style="color:#2b2b2b;" Class="mb-1"
                        OnClick="() => DetachSubPacket(ContextMenuCard)" />
                }
                else
                {

                    <SNListItem BtnIcon="mdi mdi-pin" Height="42" Title="Pin Packet" OnClick="() => PinPacket(ContextMenuCard)" Style="color:#2b2b2b;" Class="mb-1"/>
                    <SNListItem BtnIcon="mdi mdi-arrow-split-horizontal" Height="42" Title="Detach" Style="color:#2b2b2b;" Class="mb-1"
                        OnClick="() => DetachSubPacket(ContextMenuCard)" />

                }


            </SNContextMenu>
        }


    }

</div>

<div class=" py-2  d-inline-flex justify-content-evenly border-top border-secondary  align-items-center w-100"
    style="height:40px; line-height: 15px; ">

    @if (PacketVM.NotesMenuSelected)
    {
        <button class="btn btn-primary  p-1 shadow text-white rounded-3"
            style="background-color:#1565c0;height:30px;width:120px;" type="button"
            @onclick="(() => PacketVM.NotesMenuSelected = true)">
            Notes
        </button>
        <button class="btn btn-outline-primary shadow  p-1  rounded-3" style="height:30px;width:120px" type="button"
            @onclick="(() => PacketVM.NotesMenuSelected = false)">
            Sub-Packets
        </button>
    }
    else
    {
        <button class="btn btn-outline-primary shadow-sm p-1 rounded-3" style="height:30px;width:120px" type="button"
            @onclick="(() => PacketVM.NotesMenuSelected = true)">
            Notes
        </button>
        <button class="btn btn-primary shadow-sm text-white  p-1  rounded-3"
            style="background-color:#1565c0;height:30px;width:120px" type="button"
            @onclick="(() => PacketVM.NotesMenuSelected = false)">
            Sub-Packets
        </button>
    }



</div>

</div>


@code {

    [Parameter]
    public EventCallback<string> BackToMain { get; set; }
    [CascadingParameter]
    public Error? Error { get; set; }

    IJSObjectReference _module;

    private Packet? ContextMenuCard = null;
    private NotePacket? ContextMenuNoteCard = null;
    double X = 0;
    double Y = 0;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");


    }

    private Task GoToMainMenu()
    {

        return BackToMain.InvokeAsync("cards");
    }


    protected override void OnInitialized()
    {

        dataSvs.OnChange += StateHasChanged;
    }

    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }


    private async Task DeleteNP(NotePacket notePacket)
    {
        await snNotePacketcontextMenu.HideAsync();

        await PacketVM.DeleteNotePacket(notePacket);


        MessageService.SendMessage();
        StateHasChanged();

    }

    private async Task MoveDownNP(NotePacket notePacket)
    {
       await snNotePacketcontextMenu.HideAsync();

       // PacketVM.ShowMoveDownPacketModal = true;
       
        PacketVM.NotePacketToDel = notePacket;
        await PacketVM.movedownPacketTo_Modal.ShowAsync();
        MessageService.SendMessage();
        StateHasChanged();

    }


    private async Task EditNCNote(NotePacket noteCard)
    {
        if (noteCard.Note != null)
        {

            PacketVM.editNotePacketNote = true;
            dataSvs.editNote = await NoteVM.GetNote(noteCard.Note);

            dataSvs.SwitchMenus("notetools");

            dataSvs.SelectedNoteCard = noteCard;
            MessageService.SendMessage();
            StateHasChanged();
        }


    }


    private async Task SelectNoteCard(NotePacket noteCard)
    {


        dataSvs.SelectedNoteCard = noteCard;
        MessageService.SendMessage();
        StateHasChanged();

    }


    private async void OnNoteCardListUpdate(SortableListEventArgs sorttableEventArgs)
    {

        NotePacket movedNoteCard = dataSvs.SelectedCard.NotePackets[sorttableEventArgs.OldIndex];
        dataSvs.SelectedCard.NotePackets.RemoveAt(sorttableEventArgs.OldIndex);
        dataSvs.SelectedCard.NotePackets.Insert(sorttableEventArgs.NewIndex, movedNoteCard);

        //Update notecards Order
        dataSvs.SelectedCard.NotePackets.Select(dx =>
        {
            dx.Order = dataSvs.SelectedCard.NotePackets.IndexOf(dx); return dx;
        }).ToList();
        await PacketVM.UpdatePacket(dataSvs.SelectedCard);

    }

    private async Task SelectChildPacket(Packet chPacket)
    {
        try
        {
            PacketVM.GetPrevOrNextPackets(chPacket, false);

            await PacketVM.GetPacket(chPacket);
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();

            MessageService.SendMessage();
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }

    }

    private async Task PinPacket(Packet packet)
    {

        packet.Selected = !packet.Selected;

        await PacketVM.UpdatePacket(packet);

        ContextMenuCard = null;
    }
    private async Task DetachSubPacket(Packet packet)
    {
        packet.Parent = null;
        packet.ParentID = null;
        packet.Selected = true;
        await PacketVM.UpdatePacket(packet);
        await PacketVM.GetPacket(dataSvs.SelectedCard);

        ContextMenuCard = null;

    }


    private void SetDragMode()
    {
        if (dataSvs.ncDragingMode)
        {
            dataSvs.ncDragingMode = false;
        }
        else
        {
            ProjectVM.ConfirmLeave = true;
            dataSvs.ncDragingMode = true;
        }
        StateHasChanged();


    }




    #region snPacketcontextMenu
    private SNContextMenu snPacketcontextMenu;


    private async Task ShowCardContextMenu(MouseEventArgs e, Packet chPacket)
    {
        // ContextMenuCard = null;
        ContextMenuCard = chPacket;

        await Task.Delay(10);
        await snPacketcontextMenu.HideAsync();
        if(e.ClientY < dataSvs.Wdimension.Height - 98){
            await snPacketcontextMenu.ShowAsync(e.ClientX, e.ClientY); // Use ClientX and ClientY for correct positioning
        }else{
             await snPacketcontextMenu.ShowAsync(e.ClientX, e.ClientY-98); // Use ClientX and ClientY for correct positioning
        }
       
    }

    private async Task HideContextMenu()
    {
        await snPacketcontextMenu.HideAsync();
    }

    #endregion


    #region snNotePacketcontextMenu
    private SNContextMenu snNotePacketcontextMenu;

    private async Task ShowNotePacketContextMenu(MouseEventArgs e, NotePacket notePacket)
    {
        int npcontentmenuhight ;
        if(dataSvs.ncDragingMode == false){
            npcontentmenuhight = 190;
        }else{
            npcontentmenuhight = 52;
        }

        ContextMenuNoteCard = notePacket;
        await Task.Delay(10);
         if(e.ClientY < dataSvs.Wdimension.Height - npcontentmenuhight){
            await snNotePacketcontextMenu.ShowAsync(e.ClientX, e.ClientY); // Use ClientX and ClientY for correct positioning
        }else{
             await snNotePacketcontextMenu.ShowAsync(e.ClientX, e.ClientY-npcontentmenuhight); // Use ClientX and ClientY for correct positioning
        }

       
    }



    private async Task HideNPContextMenu()
    {
        await snNotePacketcontextMenu.HideAsync();
    }

    #endregion



}
