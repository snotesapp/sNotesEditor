@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using BlazorApp1.ViewModels;
@using SkiaSharp
@inject SharedDataService dataSvs
@inject PacketViewModel PacketVM
@inject ProjectViewModel ProjectVM
@inject NotesCollectionViewModel NotesCollectionVM
@inject NoteViewModel NoteVM
@inject IJSRuntime JSRuntime
@inject IMessageService MessageService
@inject SkiaServices skiaSvs


<div class="w-100 border-bottom border-info-subtle px-2" style="height: 52px;">


@switch (dataSvs.menustatus)
{
    case "mainmenu":

        <div class="row my-1 shadow   w-100" >

            @if (!(dataSvs.UserAgent.Contains("Firefox")) && !(dataSvs.UserAgent.Contains("Mobile")) )
            {

                
                
                <SNButton Style ="mt-1" BtnIcon="mdi mdi-content-save-outline"  Height="40" Width="245" 
                     TextLineHight="20"
                    OnClick="() =>  ProjectVM.SaveProject()" 
                    Spinner="@ProjectVM.Loader"/>
               
            }
            else
            {
                 <SNButton Style ="mt-1" BtnIcon="mdi mdi-content-save-outline"  Height="40" Width="245" 
                     TextLineHight="20"
                    OnClick="() => ProjectVM.DownloadProjectFile()" 
                    Spinner="@ProjectVM.Loader"/> 
            }

        </div>
        
        break;
    case "collection":
        @if (_addItem)
            {
                <div class="input-group d-flex my-1 pe-1 " style="border:solid;border-width:thin;border-radius:3px;background-color:white;">
                    <input type="text" @ref="inputTextRef"
                            @onkeypress="@((eventArg) => AddCollection(eventArg) )" @onfocusout="@(() => EnableAddItem())"
                            class="form-control border-0 shadow-none" placeholder="Collection Name" aria-label="Collection Name" aria-describedby="basic-addon2"
                            @bind-value="textValue">

                    <button class="btn btn-outline-primary shadow  btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                         <span class="bi bi-x"></span>
                    </button>

                    <button class="btn btn-outline-primary shadow  btn-sm ms-1  my-1 rounded-3" type="button" @onclick="AddCollection">
                        <span class="bi bi-plus-circle"></span>
                    </button>

                </div>
               
            }
            else
            {
         
            <div class="mx-0" style="display: grid; grid-template-columns: auto 1fr auto; align-items: center;">
                 <button class="btn btn-outline-primary  shadow  my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("mainmenu"))">
                            <span class="bi bi-arrow-left"></span>
                </button>
                <p  class="text-center  my-1 text-white"  >Collections</p>
                  
                <div class="p-0 my-1 shadow ">
                    <SNDropdownMenu isDropdownOpen = "@isCollDropdownMenuOpen" >
                       <SNSideIconButton BtnIcon="mdi mdi-plus" Width="250px" Height="35px" Title="Add Collections" OnClick="@(() => EnableAddItem())" BackgroundColor="#dbdbdb" TextColor="#2b2b2b" ClickEffect="false" />
                       <SNSideIconButton BtnIcon="mdi mdi-filter-outline" Width="250px" Height="35px" Title="Filter Notes" OnClick="@(() => { dataSvs.showFilterNotes = true; isCollDropdownMenuOpen = false; })" BackgroundColor="#dbdbdb" TextColor="#2b2b2b" ClickEffect="false" />
                    </SNDropdownMenu>
                </div>
                  
            </div>

                 
            }

        break;
    case "cards":

            @if (_addItem)
            {

                    <div class="input-group  d-flex my-1 pe-1   " style="border:solid;border-width:thin;border-radius:3px;background-color:white">
                        <input type="text" @ref="inputTextRef"
                            @onkeypress="@((eventArg) => AddPacket(eventArg) )" @onfocusout="@(() => EnableAddItem())"
                            class="form-control border-0 shadow-none" placeholder="Packet Name" aria-label="Packet Name" aria-describedby="basic-addon2"
                            @bind-value="textValue">

                        <button class="btn btn-outline-primary shadow  btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                            <span class="bi bi-x"></span>
                        </button>
                        <button class="btn btn-outline-primary shadow  btn-sm ms-1  my-1 rounded-3" type="button" @onclick="AddPacket">
                            <span class="bi bi-plus-circle"></span>
                        </button>

                    </div>
                
            }
            else if (dataSvs.filterPackets)
            {
                
                    <div class="input-group d-flex my-1 pe-1  " style="border:solid;border-width:thin;border-radius:3px;background-color:white">
                        <input type="text" @onfocusout="@(() => EnableFilterPacket())"
                   @bind-value:event=oninput @bind-value="@dataSvs.FilterPacketsTxt"
                   class="form-control border-0 shadow-none" placeholder="Filter Packets" aria-label="Filter Packets" aria-describedby="basic-addon2">

                        <button class="btn btn-outline-primary shadow  btn-sm ms-1 my-1 rounded-3" type="button" @onclick="ClearText">
                            <span class="bi bi-x"></span>
                        </button>


                    </div>
                
            }
            else
            {

            <div class="mx-0" style="display: grid; grid-template-columns: auto 1fr auto; align-items: center;">
                  <button class="btn btn-outline-primary shadow  my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("mainmenu"))">
                            <span class="bi bi-arrow-left"></span>
                </button>
                
                <p  class="text-center  my-1 text-white" >Packets</p>
                    <div class="p-0 shadow  my-1">
                        <SNDropdownMenu isDropdownOpen = "@isPacketDropdownMenuOpen" >
                        <SNSideIconButton BtnIcon="mdi mdi-plus" Width="250px" Height="35px" Title="Add Packets" OnClick="@(() => EnableAddItem())" BackgroundColor="#dbdbdb" TextColor="#2b2b2b" ClickEffect="false" />
                        <SNSideIconButton BtnIcon="mdi mdi-filter-outline" Width="250px" Height="35px" Title="Filter Packets" OnClick="@(() => {  dataSvs.filterPackets = true; isPacketDropdownMenuOpen = false; })" BackgroundColor="#dbdbdb" TextColor="#2b2b2b" ClickEffect="false" />
                        </SNDropdownMenu>
                    </div>
                    
            </div>

              

                   
            }

        
        break;
    case "notetools":

    

            

                @if (dataSvs.editNote.NoteID == 0)
                {
                    <div class="mx-0" style="display: grid; grid-template-columns: auto 1fr auto; align-items: center;">


                        <button class="btn btn-outline-primary shadow  my-1 rounded-3" type="button" @onclick:stopPropagation @onclick="@(() => NoteEditSwitchMenu())">
                            <span class="bi bi-arrow-left"></span>
                        </button>

                        <p class="text-center flex-fill my-1 text-white">
                            Note

                        </p>


                        @if (!string.IsNullOrWhiteSpace(dataSvs.editNote.Text) && dataSvs.editNote.Text.Length <= 1500)
                        {
                            <button class="btn btn-outline-success shadow   my-1 rounded-3" type="button" @onpointerenter = "(()=> {StateHasChanged();})" disabled="@(!dataSvs.noteEdited)" @onclick="@(() => SaveNote())">
                                <span class="bi bi-save"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-danger  shadow   my-1 rounded-3" type="button" @onpointerenter = "(()=> {StateHasChanged(); })"
                                @onclick="NoteVM.ScrollToSummaryPanel">
                                
                                <span class="bi bi-save"></span>
                            </button>
                        }


                    </div>

                }
                else
                {


                    <div class="mx-0" style="display: grid; grid-template-columns: auto 1fr ; align-items: center;">


                        @if (!string.IsNullOrWhiteSpace(dataSvs.editNote.Text) && dataSvs.editNote.Text.Length <= 1500)
                        {
                            <button class="btn btn-outline-primary shadow  my-1 rounded-3" type="button" @onclick:stopPropagation @onclick="@(() => NoteEditSwitchMenu())">
                                <span class="bi bi-arrow-left"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-danger  shadow   my-1 rounded-3" type="button"
                    @onclick="NoteVM.ScrollToSummaryPanel">
                                <span class="bi bi-arrow-left"></span>
                            </button>
                        }

                        <p class="text-center me-3 my-1 text-white">
                            Note

                        </p>

                    </div>

                }

           

          
        break;
    case "notecards":

       
           

                <div class="mx-0" style="display: grid; grid-template-columns: auto 1fr auto ; align-items: center;">

                    <button class="btn btn-outline-primary shadow my-1 rounded-3" type="button" @onclick="@(() => SwitchMenu("cards"))">
                        <span class="bi bi-arrow-left"></span>
                    </button>

                    <p class="text-center flex-fill truncate-text ms-1 my-1 text-white" title="@dataSvs.SelectedCard.Title">
                        @dataSvs.SelectedCard.Title

                    </p>


                    @if (dataSvs.SelectedCard.Parent is not null)
                    {


                        <button class="btn btn-outline-primary shadow  my-1 rounded-3" type="button" @onclick="@(()=>SelectSubPacket(dataSvs.SelectedCard.Parent))">
                            <span class="bi bi-arrow-up"></span>
                        </button>
                    }
                </div>
           
          
        break;
    default:
        break;
}


</div>

@code {

    [Parameter]
    public EventCallback<string> GoToMenu { get; set; }
    private string textValue { get; set; }
    private bool _addItem { get; set; }
    private bool isCollDropdownMenuOpen { get; set; } 
    private bool isPacketDropdownMenuOpen { get; set; } 
   
    ElementReference inputTextRef;

    IJSObjectReference _module;


    bool download_dialog;


    [CascadingParameter]
    public Error? Error { get; set; }





    protected override void OnInitialized()
    {
        
        

        NotesCollectionVM.OnChange += StateHasChanged;
        dataSvs.OnChange += StateHasChanged;
        ProjectVM.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            //for load JS File
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");

        }


    }


    protected void OpenCloseDialog(bool dialogState)
    {

        download_dialog = dialogState;

    }

    #region Save Note


    private async Task NoteEditSwitchMenu(){
        if(PacketVM.editNotePacketNote == true){

            await SwitchMenu("notecards");

        }else{
           await SwitchMenu("collection"); 
        }
    }
    private async Task SwitchMenu(string menu)
    {
        try
        {
           
            if (menu == "collection")
            {


                if (dataSvs.editNote.NoteID == 0) //New Note
                {

                    if (dataSvs.noteEdited)
                    {
                       // dataSvs.savenotedialog = true; 
                        await ShowSaveNoteDialog();


                    }
                    else
                    {
                        await BackToCollections("collection");

                    }

                }
                else //Edit Note
                {
                    // If note was edited, perform necessary updates
                    if (dataSvs.noteEdited && PacketVM.editNotePacketNote == false)
                    {
                        await HandleNoteEdit(menu);
                    }
                    else
                    {
                        dataSvs.completedPolylines.Clear();
                        dataSvs.noteEdited = false;
                        await GoToMenu.InvokeAsync(menu);

                        
                    }

                    

                }

            }else if (menu == "notecards"){

                if (dataSvs.noteEdited)
                {
                    // Handle packet note editing if needed
                    
                    await HandlePacketNoteEdit(menu);
                }
                else
                {
                    dataSvs.completedPolylines.Clear();
                    dataSvs.noteEdited = false;
                    await GoToMenu.InvokeAsync(menu);

                        
                }

            }
            else if (menu == "cards")
            {
                dataSvs.SelectedNoteCard = null;
                await GoToMenu.InvokeAsync(menu);
            }
            else
            {
                await GoToMenu.InvokeAsync(menu);
            }


        }
        catch (Exception ex)
        {

            Error?.ProcessError(ex);
        }

    }



 private async Task ShowSaveNoteDialog()
    {
       

        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                NoButtonColor = ButtonColor.Primary,
                YesButtonColor = ButtonColor.Primary,
                HeaderCssClass = "headerdialog",
                DialogCssClass = "sn-dialog"
            };
        var confirmation = await NoteVM.saveNoteDialog.ShowAsync(
        title: "Save Note",
        message1: " Would you like to save note?",
        confirmDialogOptions: options);

        if (confirmation)
        {
            @if (dataSvs.editNote.Text is not null && dataSvs.editNote.Text.Length > 0 && dataSvs.editNote.Text.Length <= 1500)
                    {
                       await SaveNTAndBack("collection");
                    }
                    else
                    {
                       await FocusOnSummaryPannel();
                    }

        }
        else
        {
            await BackToCollections("collection");
        }

        
    }


    public async Task SaveNote()
    {
        
        skiaSvs.CreateThumbImg(dataSvs.editNote.NotesCollectionFK.ToString());
        if (dataSvs.editNote.NoteID == 0)
        {
            if (dataSvs.noteEdited)
            {
                await NoteVM.SaveNote();
                dataSvs.completedPolylines.Clear();
                dataSvs.skiaView.Invalidate();
                dataSvs.noteEdited = false;

            }

        }
        else
        {
            if (dataSvs.noteEdited)
            {
                await NoteVM.UpdateNote();
                dataSvs.noteEdited = false;

            }
        }


    }


    private async Task BackToCollections(string menu)
    {
        await NoteVM.DeleteNoteImgFiles(dataSvs.editNote, true);

        dataSvs.savenotedialog = false;
        dataSvs.noteEdited = false;
        dataSvs.completedPolylines.Clear();
        await GoToMenu.InvokeAsync(menu);
         await NoteVM.GetNotesAsync() ;
    }

    private async Task SaveNTAndBack(string menu)
    {
        skiaSvs.CreateThumbImg(dataSvs.editNote.NotesCollectionFK.ToString());

        if (dataSvs.editNote.NoteID == 0)
        {
            await NoteVM.SaveNote();
        }
        else
        {
            await NoteVM.UpdateNote();
        }



        dataSvs.savenotedialog = false;
        dataSvs.noteEdited = false;
        dataSvs.completedPolylines.Clear();
        await GoToMenu.InvokeAsync(menu);
        await NoteVM.GetNotesAsync();
        
    }



private async Task RefreshEditedNote(){
    skiaSvs.CreateThumbImg(dataSvs.editNote.NotesCollectionFK.ToString());
    await NoteVM.UpdateNote();
    dataSvs.completedPolylines.Clear();
    dataSvs.noteEdited = false;
        
}
// Handles the logic for when a note is edited
private async Task HandleNoteEdit(string menu)
{
        await RefreshEditedNote();
        await GoToMenu.InvokeAsync(menu);
        await NoteVM.GetNotesAsync();
   
}

// Handles the logic for when a packet note is edited
private async Task HandlePacketNoteEdit(string menu)
{
    

    await RefreshEditedNote();
    await PacketVM.GetPacket(dataSvs.SelectedCard);
    await PacketVM.GetPrevOrNextPackets(dataSvs.SelectedCard, false);

    dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets
        .Find(nt => nt.NoteID == dataSvs.SelectedNoteCard.NoteID);
    
    PacketVM.NotesMenuSelected = true;
    MessageService.SendMessage();

    PacketVM.editNotePacketNote = false;
    await GoToMenu.InvokeAsync(menu);

}
    #endregion




    private async Task AddPacket()
    {

        if (!string.IsNullOrWhiteSpace(textValue))
        {

            await PacketVM.AddPacket(new Packet { Title = textValue, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
           
            textValue = "";
            await inputTextRef.FocusAsync();
        }


    }

    private async Task AddPacket(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            await Task.Delay(100);

            if (!string.IsNullOrWhiteSpace(textValue))
            {

                await PacketVM.AddPacket(new Packet { Title = textValue, Selected = true, ProjectFK = dataSvs.MainProject.ProjectID });
           
                textValue = "";
                _addItem = false;
               
            }
            StateHasChanged();
        }

    }


    private async Task AddCollection()
    {
        if (!string.IsNullOrWhiteSpace(textValue))
        {

            await NotesCollectionVM.AddNotesCollection(textValue);

            textValue = "";
           
        }

    }

    private async Task AddCollection(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            await Task.Delay(100);

            if (!string.IsNullOrWhiteSpace(textValue))
            {
                await NotesCollectionVM.AddNotesCollection(textValue);
                textValue = "";
                _addItem = false;
            }

        }

       
    }

    private void ClearText()
    {
        textValue = "";
        dataSvs.FilterPacketsTxt = "";

    }

    private async Task FocusOnSummaryPannel()
    {
        await NoteVM.ScrollToSummaryPanel();
        dataSvs.savenotedialog = false;
    }
    private void EnableAddItem()
    {
        isPacketDropdownMenuOpen = false;
        if (_addItem == true && textValue == "")
        {
            _addItem = false;
        }
        else
        {

            _addItem = true;
        }


    }

    private async Task EnableFilterPacket()
    {
        if (dataSvs.filterPackets == true && dataSvs.FilterPacketsTxt == "")
        {
            dataSvs.MainProject = await ProjectVM.GetProject();
            dataSvs.filterPackets = false;
        }
        else
        {

            dataSvs.filterPackets = true;
        }


    }


    private async Task SelectSubPacket(Packet subPacket)
    {

        try
        {
            if (dataSvs.ncDragingMode)
        {
            dataSvs.ncDragingMode = false;
        }
            await PacketVM.GetPacket(subPacket);
            dataSvs.SelectedNoteCard = dataSvs.SelectedCard.NotePackets.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }


    }


    
  

    public void Dispose()
    {
        NotesCollectionVM.OnChange -= StateHasChanged;
        dataSvs.OnChange -= StateHasChanged;

        ProjectVM.OnChange -= StateHasChanged;
    }


}
