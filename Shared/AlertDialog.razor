@using BlazorApp1.Helpers;
@using BlazorApp1.ViewModels;
@using SkiaSharp;
@inject SharedDataService dataSvs
@inject SkiaServices skiaSvs
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject NoteViewModel NoteVM

@switch (DialogType)
{
    case DialogTypes.DialogType.SaveNote:

        <SNmodal Width="400" Height="300" IsOpen="Show">
            <MCard>
                <MCardTitle Class="text-h5 gradient-blue">
                    Save Note
                </MCardTitle>

                <MCardText Class="text-h6  text-dark">
                    Would you like to save note?
                </MCardText>

                <MCardActions>
                    <MSpacer></MSpacer>

                    @if (dataSvs.editNote.Text is not null && dataSvs.editNote.Text.Length > 0 && dataSvs.editNote.Text.Length <= 1500)
                    {
                        <MButton Color="primary darken-1"
                     Text
                     OnClick='()=> SaveNTAndBack("collection") '>
                            Yes
                        </MButton>
                    }
                    else
                    {
                        <MButton Color="primary darken-1"
                     Text
                     OnClick='()=> FocusOnSummaryPannel()  '>
                            Yes
                        </MButton>
                    }


                    <MButton Color="primary darken-1"
                     Text
                     OnClick='()=> BackToCollections("collection")'>
                        No
                    </MButton>
                </MCardActions>
            </MCard>
        </SNmodal>



        break;
    case DialogTypes.DialogType.GeneralSave:

        <SNmodal Width="400" Height="300" IsOpen="Show">
            <MCard>
                <MCardTitle Class="text-h5  gradient-danger">
                    <MIcon Large Left Class="text-danger">
                        mdi-alert-outline
                    </MIcon>
                    @Title
                </MCardTitle>

                <MCardText Class="text-h6  text-dark">
                    @Text
                </MCardText>

                <MCardActions>
                    <MSpacer></MSpacer>
                    <MButton Color="primary darken-1" @onclick="YesEvent"
                     Text>
                        Yes
                    </MButton>

                    <MButton Color="primary darken-1" @onclick="NoEvent"
                     Text>
                        No
                    </MButton>
                </MCardActions>
            </MCard>
        </SNmodal>


        break;

}


@code {



    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public DialogTypes.DialogType DialogType { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public EventCallback YesEvent { get; set; }
    [Parameter]
    public EventCallback NoEvent { get; set; }


    // bool savenotedialog = false;
    string CollectionId = "0";
    IJSObjectReference _module;

    protected override void OnInitialized()
    {
        if (dataSvs.AddNotesSelectedNC is not null)
        {
            CollectionId = dataSvs.AddNotesSelectedNC.NotesCollectionID.ToString();

        }


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./myjs/BootstrapModalInterop.js");



        }


    }


    private async Task BackToCollections(string menu)
    {

        await NoteVM.DeleteNoteImgFiles(dataSvs.editNote, true);
        dataSvs.savenotedialog = false;
        dataSvs.noteEdited = false;
        dataSvs.completedPolylines.Clear();
        dataSvs.SwitchMenus(menu);
        await NoteVM.GetNotesAsync();

    }

    private async Task SaveNTAndBack(string menu)
    {
        skiaSvs.CreateThumbImg(CollectionId);
        if (dataSvs.editNote.NoteID == 0)
        {
            await NoteVM.SaveNote();
        }
        else
        {
            await NoteVM.UpdateNote();
        }

        dataSvs.savenotedialog = false;
        dataSvs.noteEdited = false;
        dataSvs.completedPolylines.Clear();
        dataSvs.SwitchMenus(menu);
        await NoteVM.GetNotesAsync();
    }

    private async Task FocusOnSummaryPannel()
    {

        await _module.InvokeVoidAsync("focusOnSummaryPannel");

        Show = false;
        dataSvs.savenotedialog = false;
    }


    public async ValueTask DisposeAsync()
    {

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }


}





