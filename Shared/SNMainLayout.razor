@using BlazorApp1.Data
@using BlazorApp1.Helpers
@using BlazorApp1.Pages.Components
@using BlazorComponent
@using Blazored.LocalStorage
@inject IMessageService MessageService

@inherits LayoutComponentBase
@inject SharedDataService dataSvs
@inject ILocalStorageService localstorage


<MApp Style="background-image: linear-gradient(to right bottom, #ff7f50,#ff8c5a,#ff9965,#ffa571,#ffb07e)">

    @if (dataSvs.MainProject.ProjectID != 0)
    {
        <MNavigationDrawer App @bind-Value="_drawer" @bind-MiniVariant="_mini "
                       Style="height:100vh ;background-image: linear-gradient(to right bottom, #5e92f3,#97aaf6,#c0c4f8,#e2e1fb,#ffffff) "
                       Fixed class="overflow-hidden" Permanent>




            <MListItem Class="px-2 mb-1 " Style="height:70px" @ondblclick="EnableRenameProject">
                <MListItemAvatar Rounded="true">
                    <MImage tabindex="0" Class="me-2" Src="./images/sNotes_icon.png"></MImage>
                </MListItemAvatar>

                @if (@renameproject == false)
                {
                    <MListItemTitle class="text-h7 text-white">
                        @(dataSvs.MainProject.Name)
                    </MListItemTitle>

                }
                else
                {

                    <input type="text" class="mb-1 p-1 shadow rounded" style="background-color:white"
                   placeholder="Project Name" aria-label="Project Name"
                   aria-describedby="basic-addon2" @bind-value="dataSvs.MainProject.Name" @onkeypress="@((eventArg) => RenameProject(eventArg) )" @onfocusout="RenameProject">
                }


                <MButton Icon OnClick="() => _mini = !_mini ">
                    <MIcon>mdi-chevron-left</MIcon>
                </MButton>

            </MListItem>


            @if (!_mini)
            {
                <MRow>
                    <MNavDrawerHeader GoToMenu="@(dataSvs.SwitchMenus)" />

                </MRow>
                @switch (dataSvs.menustatus)
                {
                    case "mainmenu":
                        <SNNavMenu GoToMenu="@(dataSvs.SwitchMenus)" />

                        break;
                    case "collection":
                        <MRow Class="overflow-hidden">


                            <CollectionsMenu GoToMenu="@(dataSvs.SwitchMenus)" />
                        </MRow>
                        break;
                    case "cards":

                        <MRow Class="overflow-hidden">
                            <CardsMenu BackToMain="@(dataSvs.SwitchMenus)" />

                        </MRow>
                        break;
                    case "notetools":
                        <NoteTools BackToMain="@(dataSvs.SwitchMenus)" />
                        break;
                    case "notecards":

                        <MRow Class="overflow-hidden">
                            <NoteCardsMenu BackToMain="@(dataSvs.SwitchMenus)" />

                        </MRow>

                        break;
                    default:

                        <SNNavMenu GoToMenu="@(dataSvs.SwitchMenus)" />
                        break;
                }

            }

        </MNavigationDrawer>
    }
    else
    {

        <MNavigationDrawer App @bind-Value="_drawer" MiniVariant="true"
                       Style="height:100vh ;background-image: linear-gradient(to right bottom, #5e92f3,#97aaf6,#c0c4f8,#e2e1fb,#ffffff) "
                       Fixed class="overflow-hidden" Permanent>




            <MListItem Class="px-2 mb-1 " Style="height:70px">
                <MListItemAvatar Rounded="true">
                    <MImage tabindex="0" Class="me-2" Src="./images/sNotes_icon.png"></MImage>
                </MListItemAvatar>

            </MListItem>

        </MNavigationDrawer>

    }



    <!-- Sizes your content based upon application components -->
    <MMain>
        <!-- Provides the application the proper gutter -->
        <MContainer class="mainpg-style" Fluid>

            @Body


            <!--
                 <div class="card" style="overflow:auto;white-space:nowrap;height:100vh;width:100vw;">

            @Body
            </div>
            -->

        </MContainer>
    </MMain>


</MApp>


@code {

    private bool _drawer = true;
    private bool _mini = true;

    private bool renameproject;


    protected override void OnInitialized()
    {

        dataSvs.OnChange += StateHasChanged;

        MessageService.OnMessage += MessageHandler;

    }

    private string tempName;
    private void EnableRenameProject()
    {
        renameproject = true;

        tempName = dataSvs.MainProject.Name;

    }

    private async Task RenameProject()
    {

        if (!string.IsNullOrWhiteSpace(dataSvs.MainProject.Name))
        {
            await dataSvs.UpdateProject();

        }
        else
        {
            dataSvs.MainProject.Name = tempName;
            await dataSvs.UpdateProject();
        }
        renameproject = false;
    }

    private async Task RenameProject(KeyboardEventArgs keyboardEvent)
    {
        if (keyboardEvent.Key == "Enter")
        {

            if (!string.IsNullOrWhiteSpace(dataSvs.MainProject.Name))
            {
                await dataSvs.UpdateProject();

            }
            else
            {
                dataSvs.MainProject.Name = tempName;
                await dataSvs.UpdateProject();
            }
            renameproject = false;
        }
    }


    public void CloseDialog(dynamic result)
    {
        StateHasChanged();
    }

    public void Dispose()
    {

        dataSvs.OnChange -= StateHasChanged;
    }


    private void MessageHandler()
    {
        _mini = true;
        _mini = false;

        StateHasChanged();
    }


    private void OnCollapse()
    {
        StateHasChanged();
    }


}